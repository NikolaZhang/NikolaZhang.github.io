import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c as r,a as n,b as s,d as i,e}from"./app-676437ee.js";const l={},c=e(`<blockquote><p>Scrapy提供了Item Exporters 来创建不同的输出格式，如XML，CSV或JSON。</p></blockquote><h2 id="使用-item-exporter" tabindex="-1"><a class="header-anchor" href="#使用-item-exporter" aria-hidden="true">#</a> 使用 Item Exporter</h2><p>为了使用 Item Exporter，你必须对 Item Exporter 及其参数 (args) 实例化。每个 Item Exporter 需要不同的参数，详细请查看 Item Exporters 参考资料 。在实例化了 exporter 之后，你必须：</p><ol><li>调用方法 <strong><code>[start_exporting()](https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/exporters.html#scrapy.contrib.exporter.BaseItemExporter.start_exporting)</code></strong> 以标识 exporting 过程的开始。</li><li>对要导出的每个项目调用 <strong><code>[export_item()](https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/exporters.html#scrapy.contrib.exporter.BaseItemExporter.export_item)</code></strong> 方法。</li><li>最后调用 <strong><code>[finish_exporting()](https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/exporters.html#scrapy.contrib.exporter.BaseItemExporter.finish_exporting)</code></strong> 表示 exporting 过程的结束</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> scrapy <span class="token keyword">import</span> signals
<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>exporter <span class="token keyword">import</span> XmlItemExporter

<span class="token keyword">class</span> <span class="token class-name">XmlExportPipeline</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>files <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

     <span class="token decorator annotation punctuation">@classmethod</span>
     <span class="token keyword">def</span> <span class="token function">from_crawler</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> crawler<span class="token punctuation">)</span><span class="token punctuation">:</span>
         pipeline <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token punctuation">)</span>
         crawler<span class="token punctuation">.</span>signals<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>pipeline<span class="token punctuation">.</span>spider_opened<span class="token punctuation">,</span> signals<span class="token punctuation">.</span>spider_opened<span class="token punctuation">)</span>
         crawler<span class="token punctuation">.</span>signals<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>pipeline<span class="token punctuation">.</span>spider_closed<span class="token punctuation">,</span> signals<span class="token punctuation">.</span>spider_closed<span class="token punctuation">)</span>
         <span class="token keyword">return</span> pipeline

    <span class="token keyword">def</span> <span class="token function">spider_opened</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;%s_products.xml&#39;</span> <span class="token operator">%</span> spider<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&#39;w+b&#39;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>files<span class="token punctuation">[</span>spider<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">file</span>
        self<span class="token punctuation">.</span>exporter <span class="token operator">=</span> XmlItemExporter<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>exporter<span class="token punctuation">.</span>start_exporting<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">spider_closed</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>exporter<span class="token punctuation">.</span>finish_exporting<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token builtin">file</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>files<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>spider<span class="token punctuation">)</span>
        <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>exporter<span class="token punctuation">.</span>export_item<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token keyword">return</span> item
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，该字段值将不变的传递到序列化库，如何对其进行序列化的决定被委托给每一个特定的序列化库。</p><p>有两种方法可以自定义一个字段如何被序列化，请看下文</p><h3 id="_1-在-field-类中声明一个-serializer" tabindex="-1"><a class="header-anchor" href="#_1-在-field-类中声明一个-serializer" aria-hidden="true">#</a> 1. 在 field 类中声明一个 serializer</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> scrapy

<span class="token keyword">def</span> <span class="token function">serialize_price</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">&#39;$ %s&#39;</span> <span class="token operator">%</span> <span class="token builtin">str</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Product</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>
    price <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span>serializer<span class="token operator">=</span>serialize_price<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-覆盖-overriding-serialize-field-方法" tabindex="-1"><a class="header-anchor" href="#_2-覆盖-overriding-serialize-field-方法" aria-hidden="true">#</a> 2. 覆盖(overriding) serialize_field() 方法</h3><p>你可以覆盖 serialize_field() 方法来自定义如何输出你的数据。</p><p>在你的自定义代码后确保你调用父类的 serialize_field() 方法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>exporter <span class="token keyword">import</span> XmlItemExporter

<span class="token keyword">class</span> <span class="token class-name">ProductXmlExporter</span><span class="token punctuation">(</span>XmlItemExporter<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">serialize_field</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> field<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> field <span class="token operator">==</span> <span class="token string">&#39;price&#39;</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&#39;$ %s&#39;</span> <span class="token operator">%</span> <span class="token builtin">str</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span>Product<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>serialize_field<span class="token punctuation">(</span>field<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="item-exporters-参考资料" tabindex="-1"><a class="header-anchor" href="#item-exporters-参考资料" aria-hidden="true">#</a> Item Exporters 参考资料</h2><h3 id="baseitemexporter" tabindex="-1"><a class="header-anchor" href="#baseitemexporter" aria-hidden="true">#</a> BaseItemExporter</h3><blockquote><p>class scrapy.contrib.exporter.BaseItemExporter(fields_to_export=None, export_empty_fields=False, encoding=&#39;utf-8&#39;)</p></blockquote><p>这是一个对所有 Item Exporters 的(抽象)父类。它对所有(具体) Item Exporters 提供基本属性，如定义export什么fields, 是否export空fields, 或是否进行编码。</p><p>你可以在构造器中设置它们不同的属性值: <code>fields_to_export</code> , <code>export_empty_fields</code>, <code>encoding</code>.</p><ul><li><p><strong><code>export_item</code>(<em>item</em>)</strong></p><p>输出给定item. 此方法必须在子类中实现.</p></li><li><p><code>serialize_field(field, name, value)</code></p><p>返回给定field的序列化值. 你可以覆盖此方法来控制序列化或输出指定的field.</p><p>默认情况下, 此方法寻找一个 serializer 在 item field 中声明 并返回它的值. 如果没有发现 serializer, 则值不会改变，除非你使用 unicode 值并编码到 str， 编码可以在 encoding 属性中声明.</p><p>参数:</p><ul><li><strong>field</strong> (<strong><code>[Field](https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/items.html#scrapy.item.Field)</code></strong> object) – the field being serialized</li><li><strong>name</strong> (<em>str</em>) – the name of the field being serialized</li><li><strong>value</strong> – the value being serialized</li></ul></li><li><p><code>finish_exporting()</code></p><p>表示exporting过程的结束. 一些exporters用于产生需要的尾元素 (例如 XmlItemExporter). 在完成exporting item后必须调用此方法.</p></li><li><p><code>fields_to_export</code></p><p>列出export什么fields值, None表示export所有fields. 默认值为None.</p><p>一些 exporters (例如 CsvItemExporter) 按照定义在属性中fields的次序依次输出.</p></li><li><p><code>export_empty_fields</code></p><p>是否在输出数据中包含为空的item fields. 默认值是 False. 一些 exporters (例如 CsvItemExporter) 会忽略此属性并输出所有fields.</p></li><li><p><code>encoding</code></p><p>Encoding 属性将用于编码 unicode 值. (仅用于序列化字符串).其他值类型将不变的传递到指定的序列化库.</p></li></ul><h3 id="xmlitemexporter" tabindex="-1"><a class="header-anchor" href="#xmlitemexporter" aria-hidden="true">#</a> XmlItemExporter</h3><blockquote><p>classscrapy.contrib.exporter.XmlItemExporter(file, item_element=&#39;item&#39;, root_element=&#39;items&#39;, **kwargs)</p></blockquote><p>以XML格式 exports Items 到指定的文件类.</p><ul><li><strong>file</strong> – 文件类.</li><li><strong>root_element</strong> (<em>str</em>) – XML 根元素名.</li><li><strong>item_element</strong> (<em>str</em>) – XML item 的元素名.</li></ul><p>构造器额外的关键字参数将传给 <strong><code>[BaseItemExporter](https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/exporters.html#scrapy.contrib.exporter.BaseItemExporter)</code></strong> 构造器.</p><p><strong>举例</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">&quot;1.0&quot;</span> encoding<span class="token operator">=</span><span class="token string">&quot;utf-8&quot;</span>?<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>items<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>item<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>Color TV<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>price<span class="token operator">&gt;</span><span class="token number">1200</span><span class="token operator">&lt;</span><span class="token operator">/</span>price<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>item<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>DVD player<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>price<span class="token operator">&gt;</span><span class="token number">200</span><span class="token operator">&lt;</span><span class="token operator">/</span>price<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>items<span class="token operator">&gt;</span>

Item<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Doe&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token string">&#39;23&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 除了覆盖 serialize_field() 方法, </span>
<span class="token comment"># 多个值的 fields 会转化每个值到 &lt;value&gt; 元素. </span>
<span class="token comment"># 被转化为:</span>
<span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">&quot;1.0&quot;</span> encoding<span class="token operator">=</span><span class="token string">&quot;utf-8&quot;</span>?<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>items<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>item<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span>John<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span>Doe<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>age<span class="token operator">&gt;</span><span class="token number">23</span><span class="token operator">&lt;</span><span class="token operator">/</span>age<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>items<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="csvitemexporter" tabindex="-1"><a class="header-anchor" href="#csvitemexporter" aria-hidden="true">#</a> CsvItemExporter</h3><blockquote><p>classscrapy.contrib.exporter.CsvItemExporter(file, include_headers_line=True, join_multivalued=&#39;, &#39;, **kwargs)</p></blockquote><p>输出 csv 文件格式. 如果添加 fields_to_export 属性, 它会按顺序定义CSV的列名. export_empty_fields 属性在此没有作用.</p><ul><li><strong>file</strong> – 文件类.</li><li><strong>include_headers_line</strong> (<em>str</em>) – 启用后 exporter 会输出第一行为列名, 列名从 <strong><code>[BaseItemExporter.fields_to_export](https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/exporters.html#scrapy.contrib.exporter.BaseItemExporter.fields_to_export)</code></strong> 或第一个 item fields 获取.</li><li><strong>join_multivalued</strong> – char 将用于连接多个值的fields.</li></ul><p>此构造器额外的关键字参数将传给 BaseItemExporter 构造器 , 其余的将传给 csv.writer 构造器, 以此来定制 exporter.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>product,price
Color TV,1200
DVD player,200
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pickleitemexporter" tabindex="-1"><a class="header-anchor" href="#pickleitemexporter" aria-hidden="true">#</a> PickleItemExporter</h3><p>输出 pickle 文件格式.</p><blockquote><p>classscrapy.contrib.exporter.PickleItemExporter(file, protocol=0, **kwargs)</p></blockquote><ul><li><strong>file</strong> – 文件类.</li><li><strong>protocol</strong> (<em>int</em>) – pickle 协议.</li></ul>`,36),u={href:"http://docs.python.org/library/pickle.html",target:"_blank",rel:"noopener noreferrer"},d=e(`<p>此构造器额外的关键字参数将传给 <strong><code>[BaseItemExporter](https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/exporters.html#scrapy.contrib.exporter.BaseItemExporter)</code></strong> 构造器.</p><p>Pickle 不是可读的格式，这里不提供实例.</p><h3 id="pprintitemexporter" tabindex="-1"><a class="header-anchor" href="#pprintitemexporter" aria-hidden="true">#</a> PprintItemExporter</h3><p>输出整齐打印的文件格式.</p><blockquote><p>class scrapy.contrib.exporter.PprintItemExporter(file, **kwargs)</p></blockquote><ul><li>file – 文件类.</li></ul><p>此构造器额外的关键字参数将传给 <strong><code>[BaseItemExporter](https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/exporters.html#scrapy.contrib.exporter.BaseItemExporter)</code></strong> 构造器.</p><p>一个典型的 exporter 实例:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{&#39;name&#39;: &#39;Color TV&#39;, &#39;price&#39;: &#39;1200&#39;}
{&#39;name&#39;: &#39;DVD player&#39;, &#39;price&#39;: &#39;200&#39;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jsonitemexporter" tabindex="-1"><a class="header-anchor" href="#jsonitemexporter" aria-hidden="true">#</a> JsonItemExporter</h3><p>输出 JSON 文件格式, 所有对象将写进一个对象的列表. 此构造器额外的关键字参数将传给 BaseItemExporter 构造器, 其余的将传给 JSONEncoder 构造器, 以此来定制 exporter.</p><blockquote><p>classscrapy.contrib.exporter.JsonItemExporter(file, **kwargs)</p></blockquote><ul><li>file – 文件类.</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[{&quot;name&quot;: &quot;Color TV&quot;, &quot;price&quot;: &quot;1200&quot;},
{&quot;name&quot;: &quot;DVD player&quot;, &quot;price&quot;: &quot;200&quot;}]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jsonlinesitemexporter" tabindex="-1"><a class="header-anchor" href="#jsonlinesitemexporter" aria-hidden="true">#</a> JsonLinesItemExporter</h3><p>输出 JSON 文件格式, 每行写一个 JSON-encoded 项. 此构造器额外的关键字参数将传给 BaseItemExporter 构造器, 其余的将传给 JSONEncoder 构造器, 以此来定制 exporter.</p><blockquote><p>class scrapy.contrib.exporter.JsonLinesItemExporter(file, **kwargs)</p></blockquote><ul><li>file – 文件类.</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{&quot;name&quot;: &quot;Color TV&quot;, &quot;price&quot;: &quot;1200&quot;}
{&quot;name&quot;: &quot;DVD player&quot;, &quot;price&quot;: &quot;200&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,19);function k(m,v){const a=p("ExternalLinkIcon");return o(),r("div",null,[c,n("p",null,[s("更多信息请看 "),n("a",u,[s("pickle module documentation"),i(a)]),s(".")]),d])}const g=t(l,[["render",k],["__file","Item Exporters.html.vue"]]);export{g as default};
