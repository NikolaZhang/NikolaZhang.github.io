import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-533408b1.js";const i={},r=e('<blockquote><p>Item 对象是种简单的容器，保存了爬取到得数据。 其提供了 类似于词典(dictionary-like) 的API以及用于声明可用字段的简单语法。</p></blockquote><h2 id="item对象" tabindex="-1"><a class="header-anchor" href="#item对象" aria-hidden="true">#</a> <strong><strong>Item对象</strong></strong></h2><blockquote><p><strong><em>class</em><code>scrapy.item.Item</code>([<em>arg</em>])</strong></p></blockquote>',3),u={href:"http://docs.python.org/library/stdtypes.html#dict",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"fields",-1),k={href:"https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/items.html#topics-items-declaring",target:"_blank",rel:"noopener noreferrer"},m=n("strong",null,[n("code",null,"[Field](https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/items.html#scrapy.item.Field)")],-1),v=n("h2",{id:"字段-field-对象",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#字段-field-对象","aria-hidden":"true"},"#"),s(),n("strong",null,[n("strong",null,"字段(Field)对象")])],-1),g=n("blockquote",null,[n("p",null,[n("strong",null,[n("em",null,"class"),n("code",null,"scrapy.item.Field"),s("(["),n("em",null,"arg"),s("])")])])],-1),h=n("strong",null,[n("code",null,"[Field](https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/items.html#scrapy.item.Field)")],-1),b={href:"http://docs.python.org/library/stdtypes.html#dict",target:"_blank",rel:"noopener noreferrer"},y=n("strong",null,[n("code",null,"[Field](https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/items.html#scrapy.item.Field)")],-1),_={href:"https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/items.html#topics-items-declaring",target:"_blank",rel:"noopener noreferrer"},f=e(`<hr><h2 id="item字段-item-fields" tabindex="-1"><a class="header-anchor" href="#item字段-item-fields" aria-hidden="true">#</a> <strong>Item字段(Item Fields)</strong></h2><p><strong><code>[Field](https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/items.html#scrapy.item.Field)</code></strong> 对象指明了每个字段的元数据(metadata)。例如下面例子中 <code>last_updated</code> 中指明了该字段的序列化函数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> scrapy

<span class="token keyword">class</span> <span class="token class-name">Product</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>
    price <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>
    stock <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>
    last_updated <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span>serializer<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以为每个字段指明任何类型的元数据。 <strong><code>[Field](https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/items.html#scrapy.item.Field)</code></strong> 对象对接受的值没有任何限制。也正是因为这个原因，文档也无法提供所有可用的元数据的键(key)参考列表。 <strong><code>[Field](https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/items.html#scrapy.item.Field)</code></strong> 对象中保存的每个键可以由多个组件使用，并且只有这些组件知道这个键的存在。您可以根据自己的需求，定义使用其他的 <strong><code>[Field](https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/items.html#scrapy.item.Field)</code></strong> 键。 设置 <strong><code>[Field](https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/items.html#scrapy.item.Field)</code></strong> 对象的主要目的就是在一个地方定义好所有的元数据。 一般来说，那些依赖某个字段的组件肯定使用了特定的键(key)。您必须查看组件相关的文档，查看其用了哪些元数据键(metadata key)。</p><p>需要注意的是，用来声明item的 <strong><code>[Field](https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/items.html#scrapy.item.Field)</code></strong> 对象并没有被赋值为class的属性。 不过您可以通过 <strong><code>[Item.fields](https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/items.html#scrapy.item.Item.fields)</code></strong> 属性进行访问。</p><h2 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h2><h3 id="创建item" tabindex="-1"><a class="header-anchor" href="#创建item" aria-hidden="true">#</a> 创建item</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> product <span class="token operator">=</span> Product<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;Desktop PC&#39;</span><span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span> product
Product<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;Desktop PC&#39;</span><span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取字段的值" tabindex="-1"><a class="header-anchor" href="#获取字段的值" aria-hidden="true">#</a> 获取字段的值</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> product<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span>
Desktop PC
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> product<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
Desktop PC

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> product<span class="token punctuation">[</span><span class="token string">&#39;price&#39;</span><span class="token punctuation">]</span>
<span class="token number">1000</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> product<span class="token punctuation">[</span><span class="token string">&#39;last_updated&#39;</span><span class="token punctuation">]</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
KeyError<span class="token punctuation">:</span> <span class="token string">&#39;last_updated&#39;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> product<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;last_updated&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;not set&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">not</span> <span class="token builtin">set</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> product<span class="token punctuation">[</span><span class="token string">&#39;lala&#39;</span><span class="token punctuation">]</span> <span class="token comment"># getting unknown field</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
KeyError<span class="token punctuation">:</span> <span class="token string">&#39;lala&#39;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> product<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;lala&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;unknown field&#39;</span><span class="token punctuation">)</span>
<span class="token string">&#39;unknown field&#39;</span>

<span class="token comment"># 获取所有字段</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> product<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">&#39;price&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span>

<span class="token comment"># 获取所有</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> product<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;price&#39;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Desktop PC&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="判断" tabindex="-1"><a class="header-anchor" href="#判断" aria-hidden="true">#</a> 判断</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;name&#39;</span> <span class="token keyword">in</span> product  <span class="token comment"># is name field populated?</span>
<span class="token boolean">True</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;last_updated&#39;</span> <span class="token keyword">in</span> product  <span class="token comment"># is last_updated populated?</span>
<span class="token boolean">False</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;last_updated&#39;</span> <span class="token keyword">in</span> product<span class="token punctuation">.</span>fields  <span class="token comment"># is last_updated a declared field?</span>
<span class="token boolean">True</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;lala&#39;</span> <span class="token keyword">in</span> product<span class="token punctuation">.</span>fields  <span class="token comment"># is lala a declared field?</span>
<span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设置字段的值" tabindex="-1"><a class="header-anchor" href="#设置字段的值" aria-hidden="true">#</a> 设置字段的值</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> product<span class="token punctuation">[</span><span class="token string">&#39;last_updated&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;today&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> product<span class="token punctuation">[</span><span class="token string">&#39;last_updated&#39;</span><span class="token punctuation">]</span>
today

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> product<span class="token punctuation">[</span><span class="token string">&#39;lala&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span> <span class="token comment"># setting unknown field</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
KeyError<span class="token punctuation">:</span> <span class="token string">&#39;Product does not support field: lala&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他任务" tabindex="-1"><a class="header-anchor" href="#其他任务" aria-hidden="true">#</a> <strong>其他任务</strong></h3><p>复制item:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> product2 <span class="token operator">=</span> Product<span class="token punctuation">(</span>product<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span> product2
Product<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;Desktop PC&#39;</span><span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> product3 <span class="token operator">=</span> product2<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span> product3
Product<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;Desktop PC&#39;</span><span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据item创建字典(dict):</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span> <span class="token comment"># create a dict from all populated values</span>
<span class="token punctuation">{</span><span class="token string">&#39;price&#39;</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Desktop PC&#39;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>根据字典(dict)创建item:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Product<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Laptop PC&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;price&#39;</span><span class="token punctuation">:</span> <span class="token number">1500</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
Product<span class="token punctuation">(</span>price<span class="token operator">=</span><span class="token number">1500</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;Laptop PC&#39;</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Product<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Laptop PC&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lala&#39;</span><span class="token punctuation">:</span> <span class="token number">1500</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment"># warning: unknown field in dict</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
KeyError<span class="token punctuation">:</span> <span class="token string">&#39;Product does not support field: lala&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="扩展item" tabindex="-1"><a class="header-anchor" href="#扩展item" aria-hidden="true">#</a> <strong>扩展Item</strong></h2><p>您可以通过继承原始的Item来扩展item(添加更多的字段或者修改某些字段的元数据)。</p><p>例如:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">DiscountedProduct</span><span class="token punctuation">(</span>Product<span class="token punctuation">)</span><span class="token punctuation">:</span>
    discount_percent <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span>serializer<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">)</span>
    discount_expiration_date <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您也可以通过使用原字段的元数据,添加新的值或修改原来的值来扩展字段的元数据:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">SpecificProduct</span><span class="token punctuation">(</span>Product<span class="token punctuation">)</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span>Product<span class="token punctuation">.</span>fields<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> serializer<span class="token operator">=</span>my_serializer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码在保留所有原来的元数据值的情况下添加(或者覆盖)了 <code>name</code> 字段的 <code>serializer</code> 。</p>`,29);function F(P,x){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,n("p",null,[s("返回一个根据给定的参数可选初始化的item。 Item复制了标准的 "),n("a",u,[s("dict API"),t(a)]),s(" 。包括初始化函数也相同。")]),n("p",null,[s("Item唯一额外添加的属性是:**"),d,s("**一个包含了item所有声明的字段的字典，而不仅仅是获取到的字段。该字典的key是字段(field)的名字，值是 "),n("a",k,[s("Item声明"),t(a)]),s(" 中使用到的 "),m,s(" 对象。")]),v,g,n("p",null,[h,s(" 仅仅是内置的 "),n("a",b,[s("dict"),t(a)]),s(" 类的一个别名，并没有提供额外的方法或者属性。")]),n("p",null,[s("换句话说， "),y,s(" 对象完完全全就是Python字典(dict)。被用来基于类属性(class attribute)的方法来支持 "),n("a",_,[s("item声明语法"),t(a)]),s(" 。")]),f])}const w=p(i,[["render",F],["__file","Items.html.vue"]]);export{w as default};
