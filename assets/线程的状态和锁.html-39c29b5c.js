const e=JSON.parse('{"key":"v-b10ddb32","path":"/posts/thread/%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%E5%92%8C%E9%94%81.html","title":"线程的状态和锁","lang":"en-US","frontmatter":{"isOriginal":true,"title":"线程的状态和锁","tag":["thread","线程状态","锁"],"category":"thread","date":"2020-04-06T00:00:00.000Z","description":"主要介绍了线程的状态和锁","image":"https://tech.nikolazhang.top/84.jpg","sticky":false,"timeline":true,"article":true,"star":false,"head":[["meta",{"property":"og:url","content":"https://nikolazhang.github.io/posts/thread/%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%E5%92%8C%E9%94%81.html"}],["meta",{"property":"og:title","content":"线程的状态和锁"}],["meta",{"property":"og:description","content":"主要介绍了线程的状态和锁"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-06-08T15:09:36.000Z"}],["meta",{"property":"article:author","content":"我小叮当、"}],["meta",{"property":"article:tag","content":"thread"}],["meta",{"property":"article:tag","content":"线程状态"}],["meta",{"property":"article:tag","content":"锁"}],["meta",{"property":"article:published_time","content":"2020-04-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-08T15:09:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线程的状态和锁\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-04-06T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-08T15:09:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"我小叮当、\\",\\"url\\":\\"https://nikolazhang.github.io\\"}]}"]]},"headers":[{"level":2,"title":"线程的状态","slug":"线程的状态","link":"#线程的状态","children":[{"level":3,"title":"yield() 与 wait()的比较","slug":"yield-与-wait-的比较","link":"#yield-与-wait-的比较","children":[]},{"level":3,"title":"为什么notify(), wait()等函数定义在Object中，而不是Thread中","slug":"为什么notify-wait-等函数定义在object中-而不是thread中","link":"#为什么notify-wait-等函数定义在object中-而不是thread中","children":[]}]},{"level":2,"title":"锁","slug":"锁","link":"#锁","children":[{"level":3,"title":"乐观锁和悲观锁","slug":"乐观锁和悲观锁","link":"#乐观锁和悲观锁","children":[]},{"level":3,"title":"公平锁和非公平锁","slug":"公平锁和非公平锁","link":"#公平锁和非公平锁","children":[]},{"level":3,"title":"独占锁和共享锁","slug":"独占锁和共享锁","link":"#独占锁和共享锁","children":[]},{"level":3,"title":"可重入锁","slug":"可重入锁","link":"#可重入锁","children":[]},{"level":3,"title":"自旋锁","slug":"自旋锁","link":"#自旋锁","children":[]}]}],"git":{"createdTime":1686236976000,"updatedTime":1686236976000,"contributors":[{"name":"nikola","email":"nikolazhang@163.com","commits":1}]},"readingTime":{"minutes":3.18,"words":954},"filePathRelative":"posts/thread/线程的状态和锁.md","localizedDate":"April 6, 2020","excerpt":"<blockquote>\\n<p>简单记录一下多线程的东西</p>\\n</blockquote>\\n<h2> 线程的状态</h2>\\n<p>内容来自<a href=\\"https://www.cnblogs.com/happy-coder/p/6587092.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JAVA 线程状态及转化</a></p>\\n<p>线程共包括以下5种状态:</p>\\n<ol>\\n<li>新建状态(New): 线程对象被创建后，就进入了新建状态。例如，Thread thread = new Thread()。</li>\\n<li>就绪状态(Runnable): 也被称为“可执行状态”。线程对象被创建后，其它线程调用了该对象的start()方法，从而来启动该线程。例如，thread.start()。处于就绪状态的线程，随时可能被CPU调度执行。</li>\\n<li>运行状态(Running): 线程获取CPU权限进行执行。需要注意的是，线程只能从就绪状态进入到运行状态。</li>\\n<li>阻塞状态(Blocked): 阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。\\n阻塞的情况分三种：\\n(01) 等待阻塞 -- 通过调用线程的wait()方法，让线程等待某工作的完成。\\n(02) 同步阻塞 -- 线程在获取synchronized同步锁失败(因为锁被其它线程所占用)，它会进入同步阻塞状态。\\n(03) 其他阻塞 -- 通过调用线程的sleep()或join()或发出了I/O请求时，线程会进入到阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。</li>\\n<li>死亡状态(Dead): 线程执行完了或者因异常退出了run()方法，该线程结束生命周期。</li>\\n</ol>"}');export{e as data};
