import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-b5bc9b99.js";const t={},o=e(`<h1 id="配置条件处理" tabindex="-1"><a class="header-anchor" href="#配置条件处理" aria-hidden="true">#</a> 配置条件处理</h1><p>当不同的环境需要不同的配置时，需要改动某些配置，而大部分内容则保持不变。如在开发和测试环境我们尽可能打印debug级别的日志，在线上则以error级别的为主。为了避免重复配置和维护，按照条件处理配置文件提供了这方面的便利。</p><p>logback中通过<code>if</code>，<code>then</code>，<code>else</code>标签来控制配置处理过程。这里if标签表示条件，含有<code>condition</code>属性，值为java表达式。then是满足条件的分支，else是不满足条件的分支。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;!-- if-then form --&gt;
   &lt;if condition=&quot;some conditional expression&quot;&gt;
    &lt;then&gt;
      ...
    &lt;/then&gt;
  &lt;/if&gt;

  &lt;!-- if-then-else form --&gt;
  &lt;if condition=&quot;some conditional expression&quot;&gt;
    &lt;then&gt;
      ...
    &lt;/then&gt;
    &lt;else&gt;
      ...
    &lt;/else&gt;
  &lt;/if&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在condition表达式中只有上下文属性和系统属性可以使用。</p><h3 id="内部java方法" tabindex="-1"><a class="header-anchor" href="#内部java方法" aria-hidden="true">#</a> 内部java方法</h3><ol><li>property()或者简写p()方法将属性名作为参数返回属性的值。如果没有定义该属性那么，方法将会返回空字符串</li><li>isDefined()方法可以被用来检查属性是否定义。</li><li>isNull()方法可以检查属性是否为空</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>configuration debug<span class="token operator">=</span><span class="token string">&quot;true&quot;</span><span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span><span class="token keyword">if</span> condition<span class="token operator">=</span>&#39;<span class="token function">property</span><span class="token punctuation">(</span><span class="token string">&quot;HOSTNAME&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;torino&quot;</span><span class="token punctuation">)</span>&#39;<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>then<span class="token punctuation">&gt;</span></span>
      <span class="token operator">&lt;</span>appender name<span class="token operator">=</span><span class="token string">&quot;CON&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span><span class="token operator">&gt;</span>
        <span class="token generics"><span class="token punctuation">&lt;</span>encoder<span class="token punctuation">&gt;</span></span>
          <span class="token generics"><span class="token punctuation">&lt;</span>pattern<span class="token punctuation">&gt;</span></span><span class="token operator">%</span>d <span class="token operator">%</span><span class="token operator">-</span><span class="token number">5l</span>evel <span class="token operator">%</span>logger<span class="token punctuation">{</span><span class="token number">35</span><span class="token punctuation">}</span> <span class="token operator">-</span> <span class="token operator">%</span>msg <span class="token operator">%</span>n<span class="token operator">&lt;</span><span class="token operator">/</span>pattern<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>encoder<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>appender<span class="token operator">&gt;</span>
      <span class="token generics"><span class="token punctuation">&lt;</span>root<span class="token punctuation">&gt;</span></span>
        <span class="token operator">&lt;</span>appender<span class="token operator">-</span>ref ref<span class="token operator">=</span><span class="token string">&quot;CON&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>root<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>then<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span>appender name<span class="token operator">=</span><span class="token string">&quot;FILE&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;ch.qos.logback.core.FileAppender&quot;</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>file<span class="token punctuation">&gt;</span></span>$<span class="token punctuation">{</span>randomOutputDir<span class="token punctuation">}</span><span class="token operator">/</span>conditional<span class="token punctuation">.</span>log<span class="token operator">&lt;</span><span class="token operator">/</span>file<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>encoder<span class="token punctuation">&gt;</span></span>
      <span class="token generics"><span class="token punctuation">&lt;</span>pattern<span class="token punctuation">&gt;</span></span><span class="token operator">%</span>d <span class="token operator">%</span><span class="token operator">-</span><span class="token number">5l</span>evel <span class="token operator">%</span>logger<span class="token punctuation">{</span><span class="token number">35</span><span class="token punctuation">}</span> <span class="token operator">-</span> <span class="token operator">%</span>msg <span class="token operator">%</span>n<span class="token operator">&lt;</span><span class="token operator">/</span>pattern<span class="token operator">&gt;</span>
   <span class="token operator">&lt;</span><span class="token operator">/</span>encoder<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>appender<span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span>root level<span class="token operator">=</span><span class="token string">&quot;ERROR&quot;</span><span class="token operator">&gt;</span>
     <span class="token operator">&lt;</span>appender<span class="token operator">-</span>ref ref<span class="token operator">=</span><span class="token string">&quot;FILE&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>root<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),p=[o];function l(r,c){return s(),a("div",null,p)}const u=n(t,[["render",l],["__file","config-condition.html.vue"]]);export{u as default};
