import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-a98b52cf.js";const e={},p=t(`<blockquote><p>Item Loaders提供了一种便捷的方式填充抓取到的 :Items 。 虽然Items可以使用自带的类字典形式API填充，但是Items Loaders提供了更便捷的API， 可以分析原始数据并对Item进行赋值。</p></blockquote><p>从另一方面来说， Items 提供保存抓取数据的 容器 ， 而 Item Loaders提供的是 填充 容器的机制。</p><h2 id="填充items" tabindex="-1"><a class="header-anchor" href="#填充items" aria-hidden="true">#</a> 填充items</h2><p>Item Loader在每个(Item)字段中都包含了一个<code>输入处理器</code>和一个<code>输出处理器</code>｡</p><p>输入处理器收到数据时立刻提取数据 (通过 add_xpath(), add_css() 或者 add_value() 方法) 之后输入处理器的结果被收集起来并且保存在ItemLoader内.</p><p>收集到所有的数据后, 调用 ItemLoader.load_item() 方法来填充,并得到填充后的 Item 对象. 这是当输出处理器被和之前收集到的数据(和用输入处理器处理的)被调用.输出处理器的结果是被分配到Item的最终值｡</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>loader <span class="token keyword">import</span> ItemLoader
<span class="token keyword">from</span> myproject<span class="token punctuation">.</span>items <span class="token keyword">import</span> Product

<span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>
    l <span class="token operator">=</span> ItemLoader<span class="token punctuation">(</span>item<span class="token operator">=</span>Product<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token operator">=</span>response<span class="token punctuation">)</span>
		<span class="token comment"># 将两个不同位置的数据收集起来</span>
    l<span class="token punctuation">.</span>add_xpath<span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;//div[@class=&quot;product_name&quot;]&#39;</span><span class="token punctuation">)</span>
    l<span class="token punctuation">.</span>add_xpath<span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;//div[@class=&quot;product_title&quot;]&#39;</span><span class="token punctuation">)</span>

    l<span class="token punctuation">.</span>add_xpath<span class="token punctuation">(</span><span class="token string">&#39;price&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;//p[@id=&quot;price&quot;]&#39;</span><span class="token punctuation">)</span>
    l<span class="token punctuation">.</span>add_css<span class="token punctuation">(</span><span class="token string">&#39;stock&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;p#stock]&#39;</span><span class="token punctuation">)</span>
    l<span class="token punctuation">.</span>add_value<span class="token punctuation">(</span><span class="token string">&#39;last_updated&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;today&#39;</span><span class="token punctuation">)</span> <span class="token comment"># you can also use literal values</span>
    <span class="token keyword">return</span> l<span class="token punctuation">.</span>load_item<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="定义itemloaders" tabindex="-1"><a class="header-anchor" href="#定义itemloaders" aria-hidden="true">#</a> 定义ItemLoaders</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>loader<span class="token punctuation">.</span>processor <span class="token keyword">import</span> TakeFirst<span class="token punctuation">,</span> MapCompose<span class="token punctuation">,</span> Join

<span class="token keyword">class</span> <span class="token class-name">ProductLoader</span><span class="token punctuation">(</span>ItemLoader<span class="token punctuation">)</span><span class="token punctuation">:</span>

    default_output_processor <span class="token operator">=</span> TakeFirst<span class="token punctuation">(</span><span class="token punctuation">)</span>

    name_in <span class="token operator">=</span> MapCompose<span class="token punctuation">(</span><span class="token builtin">unicode</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>
    name_out <span class="token operator">=</span> Join<span class="token punctuation">(</span><span class="token punctuation">)</span>

    price_in <span class="token operator">=</span> MapCompose<span class="token punctuation">(</span><span class="token builtin">unicode</span><span class="token punctuation">.</span>strip<span class="token punctuation">)</span>

    <span class="token comment"># ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入处理器使用<code>_in</code>作为后缀, 输出处理器使用 <code>_out</code>作为后缀</p><p>使用 <code>default_input_processor</code> <code>default_output_processor</code> 来指定默认的输入输出处理器</p><h2 id="定义输入输出处理器" tabindex="-1"><a class="header-anchor" href="#定义输入输出处理器" aria-hidden="true">#</a> 定义输入输出处理器</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> scrapy
<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>loader<span class="token punctuation">.</span>processor <span class="token keyword">import</span> Join<span class="token punctuation">,</span> MapCompose<span class="token punctuation">,</span> TakeFirst
<span class="token keyword">from</span> w3lib<span class="token punctuation">.</span>html <span class="token keyword">import</span> remove_tags

<span class="token keyword">def</span> <span class="token function">filter_price</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> value<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> value

<span class="token keyword">class</span> <span class="token class-name">Product</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span>
        input_processor<span class="token operator">=</span>MapCompose<span class="token punctuation">(</span>remove_tags<span class="token punctuation">)</span><span class="token punctuation">,</span>
        output_processor<span class="token operator">=</span>Join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    price <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span>
        input_processor<span class="token operator">=</span>MapCompose<span class="token punctuation">(</span>remove_tags<span class="token punctuation">,</span> filter_price<span class="token punctuation">)</span><span class="token punctuation">,</span>
        output_processor<span class="token operator">=</span>TakeFirst<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> from scrapy.contrib.loader <span class="token function">import</span> ItemLoader
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> il <span class="token operator">=</span> ItemLoader<span class="token punctuation">(</span>item<span class="token operator">=</span>Product<span class="token punctuation">(</span><span class="token punctuation">))</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> il.add_value<span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span>, <span class="token punctuation">[</span>u<span class="token string">&#39;Welcome to my&#39;</span>, u<span class="token string">&#39;&lt;strong&gt;website&lt;/strong&gt;&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> il.add_value<span class="token punctuation">(</span><span class="token string">&#39;price&#39;</span>, <span class="token punctuation">[</span>u<span class="token string">&#39;&amp;euro;&#39;</span>, u<span class="token string">&#39;&lt;span&gt;1000&lt;/span&gt;&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> il.<span class="token function-name function">load_item</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token builtin class-name">:</span> u<span class="token string">&#39;Welcome to my website&#39;</span>, <span class="token string">&#39;price&#39;</span><span class="token builtin class-name">:</span> u<span class="token string">&#39;1000&#39;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入输出处理器的优先级:</p><ol><li>Item Loader field-specific attributes: <code>field_in</code> and <code>field_out</code> (most precedence)</li><li>Field metadata (<code>input_processor</code> and <code>output_processor</code> key)</li><li>Item Loader defaults: <strong><code>[ItemLoader.default_input_processor()](https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/loaders.html#scrapy.contrib.loader.ItemLoader.default_input_processor)</code></strong> and <strong><code>[ItemLoader.default_output_processor()](https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/loaders.html#scrapy.contrib.loader.ItemLoader.default_output_processor)</code></strong> (least precedence)</li></ol><h2 id="item-loader-context" tabindex="-1"><a class="header-anchor" href="#item-loader-context" aria-hidden="true">#</a> Item Loader Context</h2><p>上下文是一种字典, 可以在ItemLoader的输入输出处理器共享. 当定义/实例化/使用ItemLoader的时候可以被传递. 被用于修改输入输出处理器的行为.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">parse_length</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> loader_context<span class="token punctuation">)</span><span class="token punctuation">:</span>
    unit <span class="token operator">=</span> loader_context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;unit&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;m&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># ... length parsing code goes here ...</span>
    <span class="token keyword">return</span> parsed_length
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有几种方法可以修改 Item Loader 上下文值:</p><ol><li><p>通过修改当前活动的 Item Loader 上下文(context 属性) :</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>loader <span class="token operator">=</span> ItemLoader<span class="token punctuation">(</span>product<span class="token punctuation">)</span>
loader<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">&#39;unit&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;cm&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Item Loader 实例化(Item Loader 构造函数的关键字参数存储在 Item Loader 上下文中) :</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>loader <span class="token operator">=</span> ItemLoader<span class="token punctuation">(</span>product<span class="token punctuation">,</span> unit<span class="token operator">=</span><span class="token string">&#39;cm&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在 Item Loader 声明中，用于那些支持使用 Item Loader 上下文实例化它们的输入/输出处理器。MapCompose 就是其中之一:</p></li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ProductLoader</span><span class="token punctuation">(</span>ItemLoader<span class="token punctuation">)</span><span class="token punctuation">:</span>
    length_out <span class="token operator">=</span> MapCompose<span class="token punctuation">(</span>parse_length<span class="token punctuation">,</span> unit<span class="token operator">=</span><span class="token string">&#39;cm&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,22),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","ItemLoaders.html.vue"]]);export{d as default};
