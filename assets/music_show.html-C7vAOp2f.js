import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as t,e as s}from"./app-DiWCEyE4.js";const i={},r=s('<blockquote><p>提供音乐，以及图片生成一个图片播放的视频。</p></blockquote><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>对video_maker的重构, 使用pygame进行图像的绘制.<br> 并对结构进行调整, 更好的封装,继承.</p><h2 id="功能" tabindex="-1"><a class="header-anchor" href="#功能" aria-hidden="true">#</a> 功能</h2><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 实时展示音乐频谱图</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 音乐播放</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 歌词爬取</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-3"> 歌词及翻译展示</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-4" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-4"> 动态元素</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-5" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-5"> 背景图片</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-6" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-6"> 音乐频谱样式</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-7" disabled="disabled"><label class="task-list-item-label" for="task-item-7"> 生成视频</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-8" disabled="disabled"><label class="task-list-item-label" for="task-item-8"> 提前计算粒子轨迹数据,性能优化</label></li></ul><h3 id="pygame简单使用" tabindex="-1"><a class="header-anchor" href="#pygame简单使用" aria-hidden="true">#</a> pygame简单使用</h3><p>下述程序需要指定环境,需要在运行前指定环境参数. 建议使用test配置. 修改部分参数即可.</p><h4 id="绘制图形" tabindex="-1"><a class="header-anchor" href="#绘制图形" aria-hidden="true">#</a> 绘制图形</h4><ol><li><p>各种图形绘制</p></li><li><p>示例程序: <a href="test/draw/draw_shape.py"><code>draw_shape.py</code></a><br><img src="https://gitee.com/NikolaZhang/music_show/raw/master/resources/image/shapes1.png" alt="aaa"></p></li><li><p>绘制函数图像<br> 示例程序: <a href="test/draw/draw_trace.py"><code>draw_trace.py</code></a><br><img src="https://gitee.com/NikolaZhang/music_show/raw/master/resources/image/function.png" alt="default"></p></li></ol><h4 id="清屏与不清屏" tabindex="-1"><a class="header-anchor" href="#清屏与不清屏" aria-hidden="true">#</a> 清屏与不清屏</h4><ol><li><p>不清屏会显示历史位置<br> 示例程序: <a href="test/pygame/test.py"><code>bubble_test.py</code></a><br><img src="https://gitee.com/NikolaZhang/music_show/raw/master/resources/image/points1.gif" alt="default"></p></li><li><p>清屏只显示当前位置<br> 示例程序: <a href="test/pygame/test2.py"><code>bubble_test.py</code></a><br><img src="https://gitee.com/NikolaZhang/music_show/raw/master/resources/image/points2.gif" alt="default"></p></li></ol><h4 id="font的使用" tabindex="-1"><a class="header-anchor" href="#font的使用" aria-hidden="true">#</a> font的使用</h4><ol><li><p>使用透明度进行叠加<br> 示例程序: <a href="test/text/test_alpha.py"><code>test_alpha.py</code></a><br><img src="https://gitee.com/NikolaZhang/music_show/raw/master/resources/image/font1.png" alt="default"></p></li><li><p>使用字体，以及位置设定<br> 示例程序: <a href="test/text/test_font.py"><code>test_font.py</code></a><br><img src="https://gitee.com/NikolaZhang/music_show/raw/master/resources/image/font2.png" alt="default"></p></li></ol><h3 id="粒子效果" tabindex="-1"><a class="header-anchor" href="#粒子效果" aria-hidden="true">#</a> 粒子效果</h3><h4 id="随机泡泡" tabindex="-1"><a class="header-anchor" href="#随机泡泡" aria-hidden="true">#</a> 随机泡泡</h4><p>示例程序: <a href="test/particle/bubble_test.py"><code>bubble_test.py</code></a></p><h4 id="随机碰撞泡泡" tabindex="-1"><a class="header-anchor" href="#随机碰撞泡泡" aria-hidden="true">#</a> 随机碰撞泡泡</h4><p>示例程序: <a href="test/particle/collision_test.py"><code>bubble_test.py</code></a><br><img src="https://gitee.com/NikolaZhang/music_show/raw/master/resources/image/particle2.gif" alt="default"></p><h4 id="下落粒子" tabindex="-1"><a class="header-anchor" href="#下落粒子" aria-hidden="true">#</a> 下落粒子</h4><p>示例程序: <a href="test/particle/simple_test.py"><code>simple_test.py</code></a><br> 这个程序为你演示实际生成粒子, 以及粒子动画的底层逻辑.<br><img src="https://gitee.com/NikolaZhang/music_show/raw/master/resources/image/particle3.gif" alt="default"></p><h4 id="烟花效果" tabindex="-1"><a class="header-anchor" href="#烟花效果" aria-hidden="true">#</a> 烟花效果</h4><p>示例程序: <a href="test/particle/upfirework_test.py"><code>upfirework_test.py</code></a><br><img src="https://gitee.com/NikolaZhang/music_show/raw/master/resources/image/particle4.gif" alt="default"></p><p>下面的程序是对上面的简化。<br> 示例程序: <a href="test/particle/upfirework_test2.py"><code>upfirework_test2.py</code></a><br><img src="https://gitee.com/NikolaZhang/music_show/raw/master/resources/image/firework2.gif" alt="default"></p><h4 id="粒子数据预生成" tabindex="-1"><a class="header-anchor" href="#粒子数据预生成" aria-hidden="true">#</a> 粒子数据预生成</h4><p>示例程序: <a href="test/particle/compute_test.py"><code>compute_test.py</code></a><br> 当粒子数量较多时, 实时粒子生成展示的方式会出现卡顿, 因此使用预生成粒子数据的方式。</p><p>粒子的装载方式与上述装载方式相同, 只是最后展示调用的方法不同, 实际调用<code>show_compute</code>.</p><p>通过display_context中的<code>is_compute</code>可以控制是否使用预生成方式</p><h3 id="歌词爬取" tabindex="-1"><a class="header-anchor" href="#歌词爬取" aria-hidden="true">#</a> 歌词爬取</h3><ol><li><p>获取网易云上的歌词<br> 示例程序: <a href="test/spider/request_music.py"><code>request_music.py</code></a><br><code>NetEaseRequest</code>需要歌曲id作为参数.<br><code>search_lyric</code>方法会返回两个集合, 一个是原始歌词, 另一个是翻译.<br><img src="https://gitee.com/NikolaZhang/music_show/raw/master/resources/image/歌词结果.png" alt="default"></p></li><li><p>歌词分割，将比较长的歌词分成固定长度的，切分为多行:<br> 示例程序: <a href="test/text/test_split.py"><code>test_split.py</code></a><br><img src="https://gitee.com/NikolaZhang/music_show/raw/master/resources/image/word_split.png" alt="default"></p></li></ol><h3 id="图像处理" tabindex="-1"><a class="header-anchor" href="#图像处理" aria-hidden="true">#</a> 图像处理</h3><h4 id="将图像对齐到指定大小" tabindex="-1"><a class="header-anchor" href="#将图像对齐到指定大小" aria-hidden="true">#</a> 将图像对齐到指定大小</h4><p>自动将图像补充高度或者宽度，补充的内容会进行模糊化处理。</p><p>示例程序: <a href="test/image/test.py"><code>test.py</code></a><br><img src="https://gitee.com/NikolaZhang/music_show/raw/master/resources/image/图片补充.png" alt="default"></p><h3 id="音乐可视化" tabindex="-1"><a class="header-anchor" href="#音乐可视化" aria-hidden="true">#</a> 音乐可视化</h3><h4 id="音乐频谱柱状图" tabindex="-1"><a class="header-anchor" href="#音乐频谱柱状图" aria-hidden="true">#</a> 音乐频谱柱状图</h4><p>示例程序: <a href="test/weave/test2.py"><code>test2.py</code></a><br><img src="https://gitee.com/NikolaZhang/music_show/raw/master/resources/image/bars.gif" alt="default"></p><h4 id="音乐频谱环绕圆形" tabindex="-1"><a class="header-anchor" href="#音乐频谱环绕圆形" aria-hidden="true">#</a> 音乐频谱环绕圆形</h4><p>示例程序: <a href="test/weave/test.py"><code>test.py</code></a><br><img src="https://gitee.com/NikolaZhang/music_show/raw/master/resources/image/weave_circle.gif" alt="default"></p><h2 id="main" tabindex="-1"><a class="header-anchor" href="#main" aria-hidden="true">#</a> main</h2><p><code>main.py</code> 是程序入口，组合了多个元素。运行截图如下：<br><img src="https://gitee.com/NikolaZhang/music_show/raw/master/resources/image/run.png" alt="default"><br><img src="https://gitee.com/NikolaZhang/music_show/raw/master/resources/image/run2.png" alt="default"></p><h2 id="一些总结" tabindex="-1"><a class="header-anchor" href="#一些总结" aria-hidden="true">#</a> 一些总结</h2><ol><li>系统自动去装载程序命令指定的环境，如果没有则更具<code>env.py</code>中的默认值加载环境参数。</li><li><code>PygameDisplay</code>可以提供一个视图，当需要展示一些动态元素的时候，使用它非常方便。</li><li>需要给<code>PygameDisplay</code>提供play_time参数，指定展示时间。</li><li><code>PygameDisplay</code>的<code>add_element</code>方法，允许添加动态元素。元素需要继承<code>BaseElement</code></li><li><code>PygameDisplay</code>的<code>show</code>方法，即可播放。</li></ol><h2 id="关于粒子数据预生成" tabindex="-1"><a class="header-anchor" href="#关于粒子数据预生成" aria-hidden="true">#</a> 关于粒子数据预生成</h2><p>有两种方案:</p><ol><li>使用pygame动态生成方式, 但是时间序列提前生成. 代码中根据当前时间参数进行粒子数据的生成和存储.<br> 这种方式和原始动态生成有很多代码需要兼容.</li><li>使用<code>particle/compute</code>包下的代码提前生成粒子数据.</li></ol><p>动态粒子都是用<a href="particle/compute">particle/compute</a>包下的代码.<br> 最初的动态粒子使用生成时间</p><h2 id="issue" tabindex="-1"><a class="header-anchor" href="#issue" aria-hidden="true">#</a> issue</h2><h3 id="_1-使用sprite进行粒子轨迹计算不知为啥碰撞粒子不会碰撞了" tabindex="-1"><a class="header-anchor" href="#_1-使用sprite进行粒子轨迹计算不知为啥碰撞粒子不会碰撞了" aria-hidden="true">#</a> 1. 使用sprite进行粒子轨迹计算不知为啥碰撞粒子不会碰撞了</h3><h3 id="_2-生成视频时长不对-而且无法录音-可以后期为mp4添加音乐" tabindex="-1"><a class="header-anchor" href="#_2-生成视频时长不对-而且无法录音-可以后期为mp4添加音乐" aria-hidden="true">#</a> 2. 生成视频时长不对. 而且无法录音(可以后期为mp4添加音乐)</h3><h2 id="end" tabindex="-1"><a class="header-anchor" href="#end" aria-hidden="true">#</a> end</h2><p>\\T_T/ a gift for touhouer.</p>',51),c=[r];function l(d,h){return a(),t("div",null,c)}const m=e(i,[["render",l],["__file","music_show.html.vue"]]);export{m as default};
