import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-DYHdsX1M.js";const p={},e=t(`<blockquote><p>springboot 启动时是如何打印banner的, 以及如何配置一个自己的banner.</p></blockquote><h2 id="入口方法" tabindex="-1"><a class="header-anchor" href="#入口方法" aria-hidden="true">#</a> 入口方法</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Banner</span> <span class="token function">printBanner</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableEnvironment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bannerMode <span class="token operator">==</span> <span class="token class-name">Banner<span class="token punctuation">.</span>Mode</span><span class="token punctuation">.</span><span class="token constant">OFF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">ResourceLoader</span> resourceLoader <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader
      <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">DefaultResourceLoader</span><span class="token punctuation">(</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">SpringApplicationBannerPrinter</span> bannerPrinter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplicationBannerPrinter</span><span class="token punctuation">(</span>resourceLoader<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>banner<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bannerMode <span class="token operator">==</span> <span class="token class-name">Mode</span><span class="token punctuation">.</span><span class="token constant">LOG</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> bannerPrinter<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">,</span> logger<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> bannerPrinter<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>printBanner</code>是banner打印的入口方法, 该方法根据不同的<code>Banner.Mode</code>为枚举类型, 值有<code>OFF</code>, <code>CONSOLE</code>, <code>LOG</code>, 分别对应不打印, 控制台输出, 输出到日志文件.<br> 对于<code>CONSOLE</code>和<code>LOG</code>类型需要通过<code>ResourceLoader resourceLoader</code>加载banner资源. banner打印需要通过<code>SpringApplicationBannerPrinter</code>类中的<code>print</code>方法(重载)进行处理, 对于<code>CONSOLE</code>类型, 第三个参数为<code>PrintStream</code>类型, 传入<code>System.out</code>进行处理, <code>LOG</code>类型则通过日志对象<code>logger</code>(其定义为private static final Log logger = LogFactory.getLog(SpringApplication.class);)进行处理. 不过两个重载方法逻辑是一致的.</p><h2 id="print" tabindex="-1"><a class="header-anchor" href="#print" aria-hidden="true">#</a> print</h2><p>以<code>CONSOLE</code>类型为例, 其代码为:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Banner</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> sourceClass<span class="token punctuation">,</span> <span class="token class-name">PrintStream</span> out<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Banner</span> banner <span class="token operator">=</span> <span class="token function">getBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>
  banner<span class="token punctuation">.</span><span class="token function">printBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> sourceClass<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PrintedBanner</span><span class="token punctuation">(</span>banner<span class="token punctuation">,</span> sourceClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先要获取一个Banner对象(函数式), 调用打印方法<code>printBanner</code>输出banner, 打印完毕, 构造一个<code>PrintedBanner</code>继承于<code>Banner</code>返回.</p><p>下面具体看一下<code>getBanner</code>方法:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Banner</span> <span class="token function">getBanner</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Banners</span> banners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Banners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  banners<span class="token punctuation">.</span><span class="token function">addIfNotNull</span><span class="token punctuation">(</span><span class="token function">getImageBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  banners<span class="token punctuation">.</span><span class="token function">addIfNotNull</span><span class="token punctuation">(</span><span class="token function">getTextBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>banners<span class="token punctuation">.</span><span class="token function">hasAtLeastOneBanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> banners<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fallbackBanner <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fallbackBanner<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token constant">DEFAULT_BANNER</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Banners</code>类是<code>Banner</code>接口的实现, 内部维护一个<code>private final List&lt;Banner&gt; banners = new ArrayList&lt;&gt;();</code>用来存放所有的Banner, 该类也重写<code>printBanner</code>为:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printBanner</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> sourceClass<span class="token punctuation">,</span> <span class="token class-name">PrintStream</span> out<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Banner</span> banner <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>banners<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    banner<span class="token punctuation">.</span><span class="token function">printBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> sourceClass<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即: 将banners中的banner对象全部打印. 而banners中的banner来自于<code>getImageBanner</code>和<code>getTextBanner</code>加载的资源. 下面分别来看一下这两个方法.</p><h2 id="getimagebanner" tabindex="-1"><a class="header-anchor" href="#getimagebanner" aria-hidden="true">#</a> getImageBanner</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">BANNER_IMAGE_LOCATION_PROPERTY</span> <span class="token operator">=</span> <span class="token string">&quot;spring.banner.image.location&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token class-name">Banner</span> <span class="token function">getImageBanner</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> location <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token constant">BANNER_IMAGE_LOCATION_PROPERTY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Resource</span> resource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> resource<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">ImageBanner</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> ext <span class="token operator">:</span> <span class="token constant">IMAGE_EXTENSION</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Resource</span> resource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;banner.&quot;</span> <span class="token operator">+</span> ext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImageBanner</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>BANNER_IMAGE_LOCATION_PROPERTY</code>配置用来表示图片类型banner资源的加载位置, 之后<code>resourceLoader</code>会生成一个对应位置资源的操作对象<code>Resource resource</code>.<br> 如果该位置下存在资源则返回<code>ImageBanner</code>类型的对象, 该类也是<code>Banner</code>的一个实现.</p><p>如果没有定义<code>BANNER_IMAGE_LOCATION_PROPERTY</code>则<code>resourceLoader</code>加载以<code>banner</code>为前缀, <code>&quot;gif&quot;, &quot;jpg&quot;, &quot;png&quot;</code>等格式的文件. 如果存在则直接返回一个<code>ImageBanner</code>类型的对象.</p><p>注意如果不存在由于<code>addIfNotNull</code>会判断<code>Banner</code>是否为null, 是则不会将其放入<code>banners</code>中.</p><h2 id="gettextbanner" tabindex="-1"><a class="header-anchor" href="#gettextbanner" aria-hidden="true">#</a> getTextBanner</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">BANNER_LOCATION_PROPERTY</span> <span class="token operator">=</span> <span class="token string">&quot;spring.banner.location&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEFAULT_BANNER_LOCATION</span> <span class="token operator">=</span> <span class="token string">&quot;banner.txt&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token class-name">Banner</span> <span class="token function">getTextBanner</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> location <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token constant">BANNER_LOCATION_PROPERTY</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_BANNER_LOCATION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Resource</span> resource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResourceBanner</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时会从<code>BANNER_LOCATION_PROPERTY</code>出加载<code>banner.txt</code>文件, 并返回<code>ResourceBanner</code>对象.</p><p>对于一个默认的系统配置, 无法加载图片和文本banner此时直接返回一个默认的<code>DEFAULT_BANNER</code>, 其为<code>SpringBootBanner</code>类型. 该类定义如下, 可以看到<code>BANNER</code>为系统的默认<br> 输出.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">SpringBootBanner</span> <span class="token keyword">implements</span> <span class="token class-name">Banner</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">BANNER</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;  .   ____          _            __ _ _&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot; /\\\\\\\\ / ___&#39;_ __ _ _(_)_ __  __ _ \\\\ \\\\ \\\\ \\\\&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;( ( )\\\\___ | &#39;_ | &#39;_| | &#39;_ \\\\/ _\` | \\\\ \\\\ \\\\ \\\\&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot; \\\\\\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;  &#39;  |____| .__|_| |_|_| |_\\\\__, | / / / /&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot; =========|_|==============|___/=/_/_/_/&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SPRING_BOOT</span> <span class="token operator">=</span> <span class="token string">&quot; :: Spring Boot :: &quot;</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">STRAP_LINE_SIZE</span> <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printBanner</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> sourceClass<span class="token punctuation">,</span> <span class="token class-name">PrintStream</span> printStream<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> line <span class="token operator">:</span> <span class="token constant">BANNER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    printStream<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">String</span> version <span class="token operator">=</span> <span class="token class-name">SpringBootVersion</span><span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  version <span class="token operator">=</span> <span class="token punctuation">(</span>version <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot; (v&quot;</span> <span class="token operator">+</span> version <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token class-name">StringBuilder</span> padding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>padding<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token constant">STRAP_LINE_SIZE</span> <span class="token operator">-</span> <span class="token punctuation">(</span>version<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">SPRING_BOOT</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    padding<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  printStream<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">AnsiOutput</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">AnsiColor</span><span class="token punctuation">.</span><span class="token constant">GREEN</span><span class="token punctuation">,</span> <span class="token constant">SPRING_BOOT</span><span class="token punctuation">,</span> <span class="token class-name">AnsiColor</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">,</span> padding<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token class-name">AnsiStyle</span><span class="token punctuation">.</span><span class="token constant">FAINT</span><span class="token punctuation">,</span> version<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  printStream<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义banner" tabindex="-1"><a class="header-anchor" href="#自定义banner" aria-hidden="true">#</a> 自定义banner</h2><p>从上面的分析我们可知, banner有三种形式:</p><ol><li>图片<code>ImageBanner</code>, banner是在<code>spring.banner.image.location</code>位置下的, 或者是默认路径下的<code>banner.png|gif|jpg</code>文件</li><li>文本<code>ResourceBanner</code>, banner是在<code>spring.banner.location</code>位置下的, 或者是默认路径下的<code>banner.txt</code>文件.</li><li>系统默认<code>SpringBootBanner</code>, banner样式是写在一个String数组中的</li></ol><p>对于图片, 在资源目录下添加一个<code>banner.png</code>文件, 运行:<br><img src="https://tech.nikolazhang.top/2020-05-10-14-04-01.png" alt="2020-05-10-14-04-01"></p><p>另外springboot还提供了图片打印的一些参数控制, 比如长度,宽度,<code>bitdepth</code>(值为4, 8, 分别只16色和256色), <code>pixelmode</code>(值为block, 默认text, 分别对应方块输出和字符画)<br> 一通配置之后的打印banner.<br><img src="https://tech.nikolazhang.top/2020-05-10-14-10-34.png" alt="2020-05-10-14-10-34"></p><p>那么, 这些参数又是在什么时候生效的呢? 这就要看ImageBanner中重写的<code>printBanner</code></p><p>下面的方法是核心方法, 就不分析了.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printBanner</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">,</span> <span class="token class-name">PrintStream</span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> width <span class="token operator">=</span> <span class="token function">getProperty</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> <span class="token string">&quot;width&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token function">getProperty</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> <span class="token string">&quot;height&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> margin <span class="token operator">=</span> <span class="token function">getProperty</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> <span class="token string">&quot;margin&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">boolean</span> invert <span class="token operator">=</span> <span class="token function">getProperty</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> <span class="token string">&quot;invert&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">BitDepth</span> bitDepth <span class="token operator">=</span> <span class="token function">getBitDepthProperty</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">PixelMode</span> pixelMode <span class="token operator">=</span> <span class="token function">getPixelModeProperty</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Frame</span><span class="token punctuation">[</span><span class="token punctuation">]</span> frames <span class="token operator">=</span> <span class="token function">readFrames</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> frames<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">resetCursor</span><span class="token punctuation">(</span>frames<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printBanner</span><span class="token punctuation">(</span>frames<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> margin<span class="token punctuation">,</span> invert<span class="token punctuation">,</span> bitDepth<span class="token punctuation">,</span> pixelMode<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span>frames<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getDelayTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于文本, 在资源目录下添加<code>banner.txt</code>文件. 运行:<br><img src="https://tech.nikolazhang.top/2020-05-10-13-52-09.png" alt="2020-05-10-13-52-09"></p>`,32),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","springboot源码分析-banner.html.vue"]]);export{k as default};
