const s=JSON.parse('{"key":"v-aa19d848","path":"/posts/hashmap/%E7%BA%A2%E9%BB%91%E6%A0%91_1_%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E5%AF%B9%E6%AF%94.html","title":"源码分析[4] HashMap之红黑树","lang":"en-US","frontmatter":{"isOriginal":true,"title":"源码分析[4] HashMap之红黑树","mathjax":true,"tag":["hashmap","红黑树"],"category":"源码","date":"2020-01-11T00:00:00.000Z","description":"分析一下hashmap红黑树","image":"https://tech.nikolazhang.top/26.png","sticky":false,"timeline":true,"article":true,"star":false,"head":[["meta",{"property":"og:url","content":"https://nikolazhang.github.io/posts/hashmap/%E7%BA%A2%E9%BB%91%E6%A0%91_1_%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E5%AF%B9%E6%AF%94.html"}],["meta",{"property":"og:title","content":"源码分析[4] HashMap之红黑树"}],["meta",{"property":"og:description","content":"分析一下hashmap红黑树"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-06-08T15:09:36.000Z"}],["meta",{"property":"article:author","content":"我小叮当、"}],["meta",{"property":"article:tag","content":"hashmap"}],["meta",{"property":"article:tag","content":"红黑树"}],["meta",{"property":"article:published_time","content":"2020-01-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-08T15:09:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"源码分析[4] HashMap之红黑树\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-01-11T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-08T15:09:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"我小叮当、\\",\\"url\\":\\"https://nikolazhang.github.io\\"}]}"]]},"headers":[{"level":2,"title":"二叉搜索树BST","slug":"二叉搜索树bst","link":"#二叉搜索树bst","children":[{"level":3,"title":"BST的特点","slug":"bst的特点","link":"#bst的特点","children":[]},{"level":3,"title":"缺陷","slug":"缺陷","link":"#缺陷","children":[]}]},{"level":2,"title":"红黑树","slug":"红黑树","link":"#红黑树","children":[{"level":3,"title":"红黑树性质","slug":"红黑树性质","link":"#红黑树性质","children":[]},{"level":3,"title":"红黑树的自平衡","slug":"红黑树的自平衡","link":"#红黑树的自平衡","children":[]}]},{"level":2,"title":"end","slug":"end","link":"#end","children":[]}],"git":{"createdTime":1686236976000,"updatedTime":1686236976000,"contributors":[{"name":"nikola","email":"nikolazhang@163.com","commits":1}]},"readingTime":{"minutes":6.37,"words":1911},"filePathRelative":"posts/hashmap/红黑树[1]与二叉树对比.md","localizedDate":"January 11, 2020","excerpt":"<h2> 二叉搜索树BST</h2>\\n<p>先介绍一下二叉搜索树. 之后再引出红黑树.</p>\\n<h3> BST的特点</h3>\\n<ol>\\n<li>当前节点的左子节点小于当前节点.</li>\\n<li>当前节点的右子节点大于当前节点.</li>\\n</ol>\\n<h3> 缺陷</h3>\\n<p>我们先计算一下理想情况下的BST的时间复杂度. 对于节点数为n的二叉树, 其深度m满足:\\n<span class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><msup><mn>2</mn><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\\"application/x-tex\\">2^{m-1}-1</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.8974em;vertical-align:-0.0833em;\\"></span><span class=\\"mord\\"><span class=\\"mord\\">2</span><span class=\\"msupsub\\"><span class=\\"vlist-t\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.8141em;\\"><span style=\\"top:-3.063em;margin-right:0.05em;\\"><span class=\\"pstrut\\" style=\\"height:2.7em;\\"></span><span class=\\"sizing reset-size6 size3 mtight\\"><span class=\\"mord mtight\\"><span class=\\"mord mathnormal mtight\\">m</span><span class=\\"mbin mtight\\">−</span><span class=\\"mord mtight\\">1</span></span></span></span></span></span></span></span></span><span class=\\"mspace\\" style=\\"margin-right:0.2222em;\\"></span><span class=\\"mbin\\">−</span><span class=\\"mspace\\" style=\\"margin-right:0.2222em;\\"></span></span><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.6444em;\\"></span><span class=\\"mord\\">1</span></span></span></span> &lt; n &lt;= <span class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><msup><mn>2</mn><mi>m</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\\"application/x-tex\\">2^m-1</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.7477em;vertical-align:-0.0833em;\\"></span><span class=\\"mord\\"><span class=\\"mord\\">2</span><span class=\\"msupsub\\"><span class=\\"vlist-t\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.6644em;\\"><span style=\\"top:-3.063em;margin-right:0.05em;\\"><span class=\\"pstrut\\" style=\\"height:2.7em;\\"></span><span class=\\"sizing reset-size6 size3 mtight\\"><span class=\\"mord mathnormal mtight\\">m</span></span></span></span></span></span></span></span><span class=\\"mspace\\" style=\\"margin-right:0.2222em;\\"></span><span class=\\"mbin\\">−</span><span class=\\"mspace\\" style=\\"margin-right:0.2222em;\\"></span></span><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.6444em;\\"></span><span class=\\"mord\\">1</span></span></span></span>\\n如果遍历一个节点的时间花费为O(1), 那么遍历到我们想要的节点就大约需要: O(log_2n)\\n性能还是不错的.\\n但是当二叉树倾斜后时间复杂度将变为O(n), 此时的查找为链表查找, 每次都会寻址, 查询效率大大降低.</p>"}');export{s as data};
