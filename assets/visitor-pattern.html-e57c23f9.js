const t=JSON.parse('{"key":"v-3b86e4dc","path":"/posts/pattern/visitor-pattern.html","title":"visitor pattern","lang":"en-US","frontmatter":{"isOriginal":true,"title":"visitor pattern","date":"2018-12-13T00:00:00.000Z","tag":["visitor pattern"],"category":"技术","description":"访问者模式的实现和介绍","image":"http://image.nikolazhang.top/wallhaven-nrwq11.jpg","head":[["meta",{"property":"og:url","content":"https://nikolazhang.github.io/posts/pattern/visitor-pattern.html"}],["meta",{"property":"og:title","content":"visitor pattern"}],["meta",{"property":"og:description","content":"访问者模式的实现和介绍"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-06-09T00:57:17.000Z"}],["meta",{"property":"article:author","content":"我小叮当、"}],["meta",{"property":"article:tag","content":"visitor pattern"}],["meta",{"property":"article:published_time","content":"2018-12-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-09T00:57:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"visitor pattern\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-12-13T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-09T00:57:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"我小叮当、\\",\\"url\\":\\"https://nikolazhang.github.io\\"}]}"]]},"headers":[{"level":2,"title":"访问者接口","slug":"访问者接口","link":"#访问者接口","children":[]},{"level":2,"title":"实现一个访问者","slug":"实现一个访问者","link":"#实现一个访问者","children":[]},{"level":2,"title":"被访问的接口","slug":"被访问的接口","link":"#被访问的接口","children":[]},{"level":2,"title":"被访问接口的实现","slug":"被访问接口的实现","link":"#被访问接口的实现","children":[]},{"level":2,"title":"测试","slug":"测试","link":"#测试","children":[]},{"level":2,"title":"结果","slug":"结果","link":"#结果","children":[]}],"git":{"createdTime":1686272237000,"updatedTime":1686272237000,"contributors":[{"name":"dewy yr","email":"nikolazhang@163.com","commits":1}]},"readingTime":{"minutes":1.74,"words":522},"filePathRelative":"posts/pattern/visitor-pattern.md","localizedDate":"December 13, 2018","excerpt":"<blockquote>\\n<p>访问者模式：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。[菜鸟]</p>\\n</blockquote>\\n<!--more-->\\n<p>怎么说呢，访问者模式和观察者模式还是有点像的。但是，访问者模式是你想访问就访问。观察者则是我变了就告诉你。访问者是主动的，观察者是被动的。</p>\\n<p>通常我们在被访问者类中定义一个accept方法，这个方法的参数是访问者对象。访问者类中定义visit方法，方法的参数是当前被访问对象。visit中调用被访问对象中的方法。为了易于扩展，例子中我们的访问对象和被访问对象都抽象出了一个接口。接口中分别定义公共方法visit，accept。</p>"}');export{t as data};
