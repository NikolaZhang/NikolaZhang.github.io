import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as p,c,a as n,d as s,b as e,e as i}from"./app-CwUbNVwE.js";const l={},r={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html",target:"_blank",rel:"noopener noreferrer"},u=i(`<h2 id="指定单个函数" tabindex="-1"><a class="header-anchor" href="#指定单个函数" aria-hidden="true">#</a> 指定单个函数</h2><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /_search
<span class="token punctuation">{</span>
    <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;function_score&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;match_all&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">&quot;boost&quot;</span><span class="token operator">:</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;random_score&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">&quot;boost_mode&quot;</span><span class="token operator">:</span><span class="token string">&quot;multiply&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>random_score</code>就是一个计算函数.</p><h2 id="指定多个函数" tabindex="-1"><a class="header-anchor" href="#指定多个函数" aria-hidden="true">#</a> 指定多个函数</h2><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /_search
<span class="token punctuation">{</span>
    <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;function_score&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;match_all&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token property">&quot;boost&quot;</span><span class="token operator">:</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;functions&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
              <span class="token punctuation">{</span>
                  <span class="token property">&quot;filter&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;match&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                  <span class="token property">&quot;random_score&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                  <span class="token property">&quot;weight&quot;</span><span class="token operator">:</span> <span class="token number">23</span>
              <span class="token punctuation">}</span><span class="token punctuation">,</span>
              <span class="token punctuation">{</span>
                  <span class="token property">&quot;filter&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;match&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cat&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                  <span class="token property">&quot;weight&quot;</span><span class="token operator">:</span> <span class="token number">42</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token property">&quot;max_boost&quot;</span><span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>
          <span class="token property">&quot;score_mode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;max&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;boost_mode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;multiply&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;min_score&quot;</span> <span class="token operator">:</span> <span class="token number">42</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当文档匹配到对应的过滤器时, 会执行相应的函数. 如果没有提供函数的过滤器, 则等效于<code>&quot;match_all&quot;: {}</code></p><h3 id="score-mode参数" tabindex="-1"><a class="header-anchor" href="#score-mode参数" aria-hidden="true">#</a> score_mode参数</h3><p><code>score_mode</code>表示计算的分数会如何被组合. 有以下参数:<br><code>multiply</code>, <code>sum</code>, <code>avg</code>, <code>first</code>, <code>max</code>, <code>min</code><br> 含义如同字面意思, 这里单独说一下<code>first</code>, 表示: 使用第一个匹配的.</p><h3 id="weight参数" tabindex="-1"><a class="header-anchor" href="#weight参数" aria-hidden="true">#</a> weight参数</h3><p>得分可能有不同的域, 而且有时不同函数对分数产生不同程度的影响也是我们所期望的. 通过为每个函数设置权重<code>weight</code>我们可以达到调整对分数的影响. <code>weight</code>最终会被各自函数结果乘上. 如果权重没有相应的函数, 则<code>weight</code>相当于一个返回<code>weight</code>值的方法.</p><p>如果<code>score_mode</code>被设置为<code>avg</code>, 最终的分数为加权平均. 1的权重是3, 2的权重是4, 则加权平均每结果为 (1*3 + 2*4) / (3 + 4).</p><h3 id="max-boost参数" tabindex="-1"><a class="header-anchor" href="#max-boost参数" aria-hidden="true">#</a> max_boost参数</h3><p>设置该参数可以防止新的分数超过某个值. 默认情况下, <code>max_boost</code>的值为: <code>FLT_MAX</code>.</p><h3 id="boost-mode参数" tabindex="-1"><a class="header-anchor" href="#boost-mode参数" aria-hidden="true">#</a> boost_mode参数</h3><p>新的分数通过查询分数和函数分数以某种方式<code>boost_mode</code>运算得出.<br><code>boost_mode</code>的值可以设置为如下:<br><code>multiply</code>, <code>sum</code>, <code>avg</code>, <code>replace</code>, <code>max</code>, <code>min</code></p><p><code>replace</code>的含义是只使用函数得分忽略查询得分.</p><h3 id="min-score参数" tabindex="-1"><a class="header-anchor" href="#min-score参数" aria-hidden="true">#</a> min_score参数</h3><p>默认情况下，修改分数不会更改与哪个文档匹配。要排除不符合特定分数阈值的文档，可以将min_score参数设置为所需的分数阈值。</p><p>要min_score工作，查询返回的所有文档都需要算分，然后逐个筛选。</p><h2 id="函数种类" tabindex="-1"><a class="header-anchor" href="#函数种类" aria-hidden="true">#</a> 函数种类</h2><p>有以下六种函数:</p><ul><li>script_score</li><li>weight</li><li>random_score</li><li>field_value_factor</li><li>decay functions: gauss, linear, exp</li></ul><h3 id="script-score" tabindex="-1"><a class="header-anchor" href="#script-score" aria-hidden="true">#</a> script score</h3><p>script_score函数允许您包装另一个查询，并使用脚本表达式从文档中的其他数值字段值派生的计算来自定义它的评分。下面是一个简单的示例：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /_search
<span class="token punctuation">{</span>
    <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;function_score&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;match&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;elasticsearch&quot;</span> <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">&quot;script_score&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;script&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
                  <span class="token property">&quot;source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Math.log(2 + doc[&#39;likes&#39;].value)&quot;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意: 所有文档的得都是正32bit浮点数. 如果函数生成更精确地浮点数, 则转换为最近的32bit浮点数. 另外分数不能是非负数, 否则会出现错误.</p><p>定义脚本参数, 并在脚本中使用:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /_search
<span class="token punctuation">{</span>
    <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;function_score&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;match&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;elasticsearch&quot;</span> <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">&quot;script_score&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;script&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token property">&quot;params&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                        <span class="token property">&quot;a&quot;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
                        <span class="token property">&quot;b&quot;</span><span class="token operator">:</span> <span class="token number">1.2</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;params.a / Math.pow(params.b, doc[&#39;likes&#39;].value)&quot;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="weight" tabindex="-1"><a class="header-anchor" href="#weight" aria-hidden="true">#</a> weight</h3><p>将分数与权重相乘.</p><h3 id="random-score" tabindex="-1"><a class="header-anchor" href="#random-score" aria-hidden="true">#</a> random_score</h3><p><code>random_score</code>生成[0,1)之间的分数。默认情况下，它使用内部 Lucene 文档 ID 作为随机性源，这非常有效，但不幸的是无法重现，因为文档可能通过合并重新编号。</p><p>如果希望分数重现, 则需要提供种子<code>seed</code>和字段<code>field</code>两个参数. 最终的分数的计算会根据<code>seed</code>, 文档的<code>field</code>字段的最小值, 以及基于索引名称和分片 ID 计算的盐值. 从而含有相同值, 但索引不同的文档会有不同的得分.</p><p>同一分片内具有相同<code>field</code>值的文档将获得相同的分数，因此通常需要使用对所有文档具有唯一值的字段。比较好的选择可能是使用<code>_seq_no</code>字段，其唯一缺点是如果文档更新，分数将发生变化，因为更新操作也会更新<code>_seq_no</code>字段的值。</p><p>可以在不设置字段的情况下设置种子，但这已被弃用，因为这需要在占用大量内存的_id字段上加载字段数据。</p><h4 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h4><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /_search
<span class="token punctuation">{</span>
    <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;function_score&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;random_score&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;seed&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
                <span class="token property">&quot;field&quot;</span><span class="token operator">:</span> <span class="token string">&quot;_seq_no&quot;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="field-value-factor" tabindex="-1"><a class="header-anchor" href="#field-value-factor" aria-hidden="true">#</a> field_value_factor</h3><p><code>field_value_factor</code>函数允许使用文档中的字段来影响分数。它类似于使用<code>script_score</code>函数，但是，它避免了脚本的开销。如果在多值字段上使用，则在计算中仅使用该字段的第一个值。</p><h4 id="举例" tabindex="-1"><a class="header-anchor" href="#举例" aria-hidden="true">#</a> 举例</h4><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /_search
<span class="token punctuation">{</span>
    <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;function_score&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;field_value_factor&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;field&quot;</span><span class="token operator">:</span> <span class="token string">&quot;likes&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;factor&quot;</span><span class="token operator">:</span> <span class="token number">1.2</span><span class="token punctuation">,</span>
                <span class="token property">&quot;modifier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;sqrt&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;missing&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的查询对应的计算公式为: <code>sqrt(1.2 * doc[&#39;likes&#39;].value)</code></p><h4 id="field-value-factor的字段" tabindex="-1"><a class="header-anchor" href="#field-value-factor的字段" aria-hidden="true">#</a> field_value_factor的字段</h4><table><thead><tr><th style="text-align:left;">字段名</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">field</td><td style="text-align:left;">从文档中提取的字段</td></tr><tr><td style="text-align:left;">factor</td><td style="text-align:left;">需要乘上字段值的操作因子, 默认值为1</td></tr><tr><td style="text-align:left;">modifier</td><td style="text-align:left;">应用到字段值的修饰符, 取值见下表</td></tr><tr><td style="text-align:left;">missing</td><td style="text-align:left;">当文档中不存在提取的字段, 则使用该字段值替代</td></tr></tbody></table><h4 id="modifier取值" tabindex="-1"><a class="header-anchor" href="#modifier取值" aria-hidden="true">#</a> modifier取值</h4><p><img src="https://tech.nikolazhang.top/2020-02-06-09-42-55.png" alt="2020-02-06-09-42-55"></p><p>field_value_score函数生成的分数必须为非负数，否则将引发错误。如果对 0 和 1 之间的值使用，则对数和 ln 修饰符将生成负值。请务必使用范围筛选器限制字段的值以避免这种情况，或使用 log1p 和 ln1p。另外也要避免对0取对数这种非逻辑操作.</p><h3 id="decay" tabindex="-1"><a class="header-anchor" href="#decay" aria-hidden="true">#</a> decay</h3><p>衰减函数依赖于用户给定的<code>origin</code>数值型间的距离计算得分. 这类似一个范围查询, 但是边缘平滑而不是框定具体的边缘值.</p><p>要对具有数字字段的查询使用距离评分，用户必须为每个字段定义<code>origin</code>和<code>scale</code>。需要<code>origin</code>来定义计算距离的&quot;中心点&quot;，<code>scale</code>用来定义衰减的速率. 衰减函数可以定义成如下:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;DECAY_FUNCTION&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;FIELD_NAME&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;origin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;11, 12&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;scale&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2km&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0km&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;decay&quot;</span><span class="token operator">:</span> <span class="token number">0.33</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>DECAY_FUNCTION</code>可以设置为: <code>liner</code>, <code>exp</code>, <code>gauss</code>.<br><code>FIELD_NAME</code>字段的值类型必须为numeric, date, geo-point.</p><p>在上面的示例中，字段是geo_point，并且可以以地理格式提供原点。在这种情况下，必须使用单位给出比例和偏移量。如果字段是日期字段，则可以将缩放和偏移设置为天、周等。如:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /_search
<span class="token punctuation">{</span>
    <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;function_score&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;gauss&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;date&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                      <span class="token property">&quot;origin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2013-09-17&quot;</span><span class="token punctuation">,</span>
                      <span class="token property">&quot;scale&quot;</span><span class="token operator">:</span> <span class="token string">&quot;10d&quot;</span><span class="token punctuation">,</span>
                      <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token string">&quot;5d&quot;</span><span class="token punctuation">,</span>
                      <span class="token property">&quot;decay&quot;</span> <span class="token operator">:</span> <span class="token number">0.5</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>origin</code>的日期格式由映射中的<code>format</code>定义. 如果不设置<code>origin</code>,则使用当前时间.<br><code>offset</code>和<code>decay</code>为可选字段.</p><h4 id="字段介绍" tabindex="-1"><a class="header-anchor" href="#字段介绍" aria-hidden="true">#</a> 字段介绍</h4><table><thead><tr><th style="text-align:left;">字段</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">origin</td><td style="text-align:left;">用于计算距离的原点。必须为数字字段的数字、日期字段的日期和地理字段的地理点。对于地理和数字字段是必需的。对于日期字段，默认值为now。origin支持日期计算(如: now - 1h).</td></tr><tr><td style="text-align:left;">scale</td><td style="text-align:left;">所有类型都需要。定义与<code>origin + offset</code>的距离等于衰减参数。对于地理字段：可以定义为数字单位（1km，12m,... ）。默认单位为米。对于日期字段：可以定义为数字_单位 （&quot;1h&quot;， &quot;10d&quot;,... ）。默认单位为毫秒。对于数字字段：任意数字。</td></tr><tr><td style="text-align:left;">offset</td><td style="text-align:left;">如果定义了偏移量，则衰减函数将仅计算距离大于定义的偏移量的文档的衰减函数。默认值为 0。</td></tr><tr><td style="text-align:left;">decay</td><td style="text-align:left;">衰减参数定义文档如何通过<code>scale</code>进行评分。如果未定义衰减，则距离刻度处的文档将评分0.5。</td></tr></tbody></table><p>第一个例子中文档可能包含地理位置字段的酒店信息. 您希望根据酒店与给定位置的远点计算衰减函数. 你可能不能立刻知道如何指定高斯函数的<code>scale</code>, 但是你可能知道&quot;在2km的距离上分数应该衰减到1/3&quot;. <code>scale</code>参数将会被自动调整以确保0.33的得分会距离给定点2km.</p><p>在第二个示例中，字段值介于<code>2013-09-12</code>和<code>2013-09-22</code>之间的文档将得到1.0的权重，而从该日期起为15天的文档权重为0.5。</p><h4 id="衰减函数" tabindex="-1"><a class="header-anchor" href="#衰减函数" aria-hidden="true">#</a> 衰减函数</h4><p><code>DECAY_FUNCTION</code>用来确定使用什么衰减函数, 支持的衰减函数见下:</p><p><img src="https://tech.nikolazhang.top/2020-02-06-16-51-55.png" alt="2020-02-06-16-51-55"></p><h3 id="多值字段" tabindex="-1"><a class="header-anchor" href="#多值字段" aria-hidden="true">#</a> 多值字段</h3><p>如果用于计算衰减的字段包含多个值，则每个默认值选择最接近原点的值来确定距离。这可以通过设置<code>multi_value_mode</code>, 取值为: <code>min</code>, <code>max</code>, <code>avg</code>, <code>sum</code>.</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;DECAY_FUNCTION&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;FIELD_NAME&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;origin&quot;</span><span class="token operator">:</span> ...<span class="token punctuation">,</span>
            <span class="token property">&quot;scale&quot;</span><span class="token operator">:</span> ...
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;multi_value_mode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;avg&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="最后" tabindex="-1"><a class="header-anchor" href="#最后" aria-hidden="true">#</a> 最后</h2>`,66),d={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html",target:"_blank",rel:"noopener noreferrer"};function k(v,m){const a=o("ExternalLinkIcon");return p(),c("div",null,[n("blockquote",null,[n("p",null,[s("function_score允许自定义分数计算规则, 修改文档检索后的得分. 你可以指定一个或针对不同情形指定不同的规则. 以下内容有些枯燥, 基本上是对"),n("a",r,[s("官方文档"),e(a)]),s("的翻译.")])]),u,n("p",null,[s("有兴趣可以阅读"),n("a",d,[s("官方文档"),e(a)])])])}const h=t(l,[["render",k],["__file","elasticsearch系列_7_入门-function.html.vue"]]);export{h as default};
