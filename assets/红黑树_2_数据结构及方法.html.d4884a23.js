import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e as p}from"./app.e7c9cb9e.js";const t={},e=p(`<blockquote><p>\u7EC8\u4E8E\u5230\u4E86HashMap\u4E2D\u7684\u7EA2\u9ED1\u6811\u5B9E\u73B0\u7684\u5206\u6790\u4E86, \u6211\u4E0D\u786E\u5B9A\u81EA\u5DF1\u80FD\u5426\u89E3\u91CA\u6E05\u695A\u8FD9\u90E8\u5206. \u9887\u6709\u5982\u4E34\u5927\u654C, \u5982\u5C65\u8584\u51B0, \u80C6\u6218\u5FC3\u60CA\u4E4B\u611F. \u6BD5\u7ADF\u6211\u662F\u4E2A\u83DC\u9E21da\u2606ze~</p></blockquote><h2 id="\u7EA2\u9ED1\u6811\u7684\u7ED3\u6784\u5B9A\u4E49" tabindex="-1"><a class="header-anchor" href="#\u7EA2\u9ED1\u6811\u7684\u7ED3\u6784\u5B9A\u4E49" aria-hidden="true">#</a> \u7EA2\u9ED1\u6811\u7684\u7ED3\u6784\u5B9A\u4E49</h2><p>hashmap\u4E2D\u7EA2\u9ED1\u6811\u7684\u5B9E\u73B0\u7C7B\u662F<code>TreeNode</code>, \u5176\u4E2D\u7684\u5C5E\u6027\u5982\u4E0B:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> parent<span class="token punctuation">;</span>  <span class="token comment">// red-black tree links</span>
    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> left<span class="token punctuation">;</span>
    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> right<span class="token punctuation">;</span>
    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">;</span>    <span class="token comment">// needed to unlink next upon deletion</span>
    <span class="token keyword">boolean</span> red<span class="token punctuation">;</span>
    <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> val<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6211\u4EEC\u518D\u8BF4\u4E00\u4E0B\u8FD9\u91CC\u7684<code>super(hash, key, val, next)</code>, \u771F\u6B63\u8C03\u7528\u7684\u662F<code>Node</code>\u7C7B\u7684\u6784\u9020\u5668.</p><h2 id="puttreeval" tabindex="-1"><a class="header-anchor" href="#puttreeval" aria-hidden="true">#</a> putTreeVal</h2><p>\u6211\u4EEC\u5148\u5206\u6790\u4E00\u4E0B\u6DFB\u52A0\u8282\u70B9\u7684\u65B9\u6CD5.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span>
                                <span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token class-name">K</span> k<span class="token punctuation">,</span> <span class="token class-name">V</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> kc <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> searched <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> root <span class="token operator">=</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">root</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u91CC\u6709\u4E2A<code>root</code>\u65B9\u6CD5, \u65B9\u6CD5\u7684\u5177\u4F53\u5B9E\u73B0\u89C1\u4E0B:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">root</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> r <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span> p<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> r<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> r<span class="token punctuation">;</span>
        r <span class="token operator">=</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u901A\u8FC7\u4E0D\u65AD\u83B7\u53D6\u5F53\u524D\u8282\u70B9\u7684\u7236\u8282\u70B9, \u5411\u4E0A\u904D\u5386\u76F4\u5230\u7236\u8282\u70B9\u4E3Anull. \u6B64\u65F6\u4FBF\u5F97\u5230\u4E86\u6839\u8282\u70B9. \u56E0\u4E3A\u6BCF\u6B21\u63D2\u5165\u65B0\u7684\u8282\u70B9\u7684\u65F6\u5019, \u9700\u8981\u548C\u4E4B\u524D\u7684\u8282\u70B9\u8FDB\u884C\u6BD4\u8F83, \u4EE5\u786E\u5B9A\u6700\u65B0\u7684\u8282\u70B9\u5E94\u8BE5\u653E\u5728\u4EC0\u4E48\u4F4D\u7F6E\u4E0A.</p><p>\u4E0B\u9762\u770B\u4E00\u4E0B\u904D\u5386\u7684\u903B\u8F91:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> dir<span class="token punctuation">,</span> ph<span class="token punctuation">;</span> <span class="token class-name">K</span> pk<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ph <span class="token operator">=</span> p<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">&gt;</span> h<span class="token punctuation">)</span>
    dir <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ph <span class="token operator">&lt;</span> h<span class="token punctuation">)</span>
    dir <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pk <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> k <span class="token operator">||</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> k<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>kc <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>
            <span class="token punctuation">(</span>kc <span class="token operator">=</span> <span class="token function">comparableClassFor</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span>
            <span class="token punctuation">(</span>dir <span class="token operator">=</span> <span class="token function">compareComparables</span><span class="token punctuation">(</span>kc<span class="token punctuation">,</span> k<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>searched<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> q<span class="token punctuation">,</span> ch<span class="token punctuation">;</span>
        searched <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>
                <span class="token punctuation">(</span>q <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> k<span class="token punctuation">,</span> kc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> p<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>
                <span class="token punctuation">(</span>q <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> k<span class="token punctuation">,</span> kc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> q<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    dir <span class="token operator">=</span> <span class="token function">tieBreakOrder</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u7684\u8FD9\u6BB5\u4EE3\u7801\u5C31\u662F\u4E00\u4E2A\u6BD4\u8F83\u7684\u903B\u8F91, \u5206\u4E3A\u56DB\u79CD\u60C5\u51B5:</p><ol><li>\u5F53\u524D\u8282\u70B9\u7684hash\u5927\u4E8E\u5F85\u653E\u5165\u6570\u636E\u7684key\u7684hash, \u5219dir\u4E3A-1. \u8FD9\u91CC\u63D0\u524D\u5267\u900F\u4E00\u4E0B: dir\u4E3A-1\u8868\u793A\u5E94\u8BE5\u653E\u4E8E\u5DE6\u8282\u70B9</li><li>\u5F53\u5C0F\u4E8E\u5219dir\u4E3A1, \u653E\u4E8E\u53F3\u8282\u70B9</li><li>\u5F53\u524D\u8282\u70B9\u7684key\u548C\u5F85\u653E\u5165\u7684key\u76F8\u540C, \u5219\u76F4\u63A5\u8FD4\u56DE\u5F53\u524D\u8282\u70B9, \u5BF9\u6700\u65B0\u6570\u636E\u4E0D\u505A\u5904\u7406.</li><li>\u5F53key\u4E0D\u80FD\u6BD4\u8F83, \u6216\u8005\u80FD\u6BD4\u8F83\u4F46\u662F\u7ED3\u679C\u76F8\u540C <code>(kc == null &amp;&amp; (kc = comparableClassFor(k)) == null) || (dir = compareComparables(kc, k, pk)) == 0</code> \u4E4B\u540E\u8FD8\u4F1A\u4F7F\u7528<code>tieBreakOrder</code>\u8FDB\u884C\u6BD4\u8F83, \u6700\u7EC8\u786E\u5B9Adir.</li><li>\u56DE\u5934\u770B\u4E00\u4E0Bseached\u7684\u5224\u65AD\u903B\u8F91, \u5F88\u660E\u663E\u8FD9\u6BB5\u903B\u8F91\u53EA\u6709\u5934\u8282\u70B9\u624D\u4F1A\u8D77\u4F5C\u7528, \u8FD9\u6BB5\u7684\u610F\u601D\u662F\u4ECE\u5206\u522B\u4ECE\u5DE6\u53F3\u8282\u70B9\u4E2D\u5BFB\u627E\u548C\u5F85\u653E\u5165\u7684hash, key\u76F8\u540C\u7684\u8282\u70B9\u5E76\u8FD4\u56DE.</li></ol><p>\u786E\u5B9Adir\u4E4B\u540E, \u5982\u679Cdir\u5C0F\u4E8E\u7B49\u4E8E0, \u5219\u5C06\u521B\u5EFA\u7684\u65B0\u8282\u70B9\u653E\u5230\u5DE6\u8282\u70B9, \u5426\u5219\u653E\u4E8E\u53F3\u8282\u70B9. \u4E4B\u540E\u8BBE\u7F6E\u65B0\u8282\u70B9\u7684pre, parent\u5C5E\u6027\u4E3A\u5F53\u524D\u8282\u70B9, \u5F53\u524D\u8282\u70B9\u7684next\u8BBE\u7F6E\u4E3A\u65B0\u8282\u70B9. \u5982\u679C\u5F53\u524D\u8282\u70B9\u7684next\u4E4B\u524D\u4E0D\u4E3A\u7A7A\u5219\u5C06\u65B0\u8282\u70B9\u653E\u5230next\u8282\u70B9\u4E4B\u524D. \u4E0A\u9762\u7B80\u76F4\u4E0D\u662F\u53E5\u4EBA\u8BDD. pre\u548Cnext\u662F\u4E00\u5BF9\u94FE\u8868\u5C5E\u6027, parent, left, right\u662F\u4E00\u7EC4\u6811\u5C5E\u6027. \u8FD9\u6BB5\u903B\u8F91\u5728\u4E8E\u66F4\u65B0(\u5206\u522B)\u539F\u6765\u7684\u94FE\u8868\u548C\u6811\u7684\u5173\u7CFB. \u53EF\u89C1TreeNode\u4E0D\u4EC5\u4EC5\u7EF4\u62A4\u4E86\u7EA2\u9ED1\u6811\u7ED3\u6784, \u5176\u8FD8\u7EF4\u62A4\u4E86\u4E00\u4E2A\u94FE\u8868\u7ED3\u6784.</p><p>\u6700\u540E<code>moveRootToFront(tab, balanceInsertion(root, x));</code>, <code>balanceInsertion</code>\u662F\u7EA2\u9ED1\u6811\u7684\u81EA\u5E73\u8861\u5B9E\u73B0. \u81EA\u5E73\u8861\u4E4B\u540E\u6709\u53EF\u80FD\u4F1A\u53D8\u66F4\u6839\u8282\u70B9, \u56E0\u6B64\u6709\u5FC5\u8981\u4F7F\u7528<code>moveRootToFront</code>\u91CD\u65B0\u66F4\u65B0\u4E00\u4E0B\u6839\u8282\u70B9\u7684\u6307\u5411.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> xp <span class="token operator">=</span> p<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>dir <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> p<span class="token punctuation">.</span>left <span class="token operator">:</span> p<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> xpn <span class="token operator">=</span> xp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">newTreeNode</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">,</span> xpn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dir <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        xp<span class="token punctuation">.</span>left <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        xp<span class="token punctuation">.</span>right <span class="token operator">=</span> x<span class="token punctuation">;</span>
    xp<span class="token punctuation">.</span>next <span class="token operator">=</span> x<span class="token punctuation">;</span>
    x<span class="token punctuation">.</span>parent <span class="token operator">=</span> x<span class="token punctuation">.</span>prev <span class="token operator">=</span> xp<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>xpn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>xpn<span class="token punctuation">)</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token function">moveRootToFront</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token function">balanceInsertion</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="find" tabindex="-1"><a class="header-anchor" href="#find" aria-hidden="true">#</a> find</h2><p>\u67E5\u627Etree\u4E2D\u7684\u6307\u5B9A\u8282\u70B9, \u6BCF\u6B21\u8981\u5C06\u7ED9\u5B9Ahash\u503C\u548C\u5F53\u524D\u7684\u8282\u70B9hash\u8FDB\u884C\u6BD4\u8F83,</p><ol><li>\u5982\u679C\u5F53\u524D\u8282\u70B9\u7684hash\u5927\u5219\u5E94\u8BE5\u67E5\u627E\u5DE6\u5B50\u8282\u70B9.</li><li>\u5982\u679C\u5C0F\u4E8E\u5219,\u5E94\u8BE5\u67E5\u627E\u53F3\u5B50\u8282\u70B9</li><li>\u76F8\u7B49\u5219\u627E\u5230, \u76F4\u63A5\u8FD4\u56DE\u5F53\u524D\u8282\u70B9</li><li>\u5F53key\u5B9E\u73B0Comparable\u63A5\u53E3\u5E76\u4E14\u6BD4\u8F83\u7ED3\u679C\u4E0D\u76F8\u540C, \u5219\u6839\u636E\u6BD4\u8F83\u7684\u7ED3\u679C\u786E\u5B9A\u5E94\u8BE5\u67E5\u627E\u5DE6\u5B50\u8282\u70B9\u6216\u8005\u53F3\u5B50\u8282\u70B9.</li><li>\u5F53\u4ECE\u53F3\u5B50\u8282\u70B9\u5F00\u59CB\u67E5\u627E\u627E\u5230\u8282\u70B9\u540E\u76F4\u63A5\u8FD4\u56DE.</li><li>\u4E0D\u6EE1\u8DB3\u4EE5\u4E0A\u6761\u4EF6(\u6BD4\u5982: \u5F53key\u6CA1\u6709\u5B9E\u73B0Comparable, \u6216\u8005\u5B9E\u73B0\u4E86\u8BE5\u63A5\u53E3\u4F46\u6BD4\u8F83\u7ED3\u679C\u76F8\u540C, \u4ECE\u53F3\u5B50\u8282\u70B9\u67E5\u627E\u4E0D\u5230), \u5219\u8BBE\u7F6E\u4E0B\u4E00\u8282\u70B9\u4E3A\u5DE6\u5B50\u8282\u70B9.</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token class-name">Object</span> k<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> kc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> ph<span class="token punctuation">,</span> dir<span class="token punctuation">;</span> <span class="token class-name">K</span> pk<span class="token punctuation">;</span>
        <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> pl <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">,</span> pr <span class="token operator">=</span> p<span class="token punctuation">.</span>right<span class="token punctuation">,</span> q<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ph <span class="token operator">=</span> p<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">&gt;</span> h<span class="token punctuation">)</span>
            p <span class="token operator">=</span> pl<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ph <span class="token operator">&lt;</span> h<span class="token punctuation">)</span>
            p <span class="token operator">=</span> pr<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pk <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> k <span class="token operator">||</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> k<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> p<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pl <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            p <span class="token operator">=</span> pr<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pr <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            p <span class="token operator">=</span> pl<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>kc <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span>
                    <span class="token punctuation">(</span>kc <span class="token operator">=</span> <span class="token function">comparableClassFor</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                    <span class="token punctuation">(</span>dir <span class="token operator">=</span> <span class="token function">compareComparables</span><span class="token punctuation">(</span>kc<span class="token punctuation">,</span> k<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            p <span class="token operator">=</span> <span class="token punctuation">(</span>dir <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> pl <span class="token operator">:</span> pr<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>q <span class="token operator">=</span> pr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> k<span class="token punctuation">,</span> kc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> q<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            p <span class="token operator">=</span> pl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u4E2A\u5224\u65AD\u903B\u8F91\u771F\u7684\u662F\u5F3A\u554A. 666</p><h2 id="gettreenode" tabindex="-1"><a class="header-anchor" href="#gettreenode" aria-hidden="true">#</a> getTreeNode</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">getTreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token class-name">Object</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">root</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u4E2A\u65B9\u6CD5\u6CA1\u4EC0\u4E48\u597D\u8BF4\u7684, \u786E\u4FDD\u4ECE\u6839\u8282\u70B9\u8C03\u7528find\u5F00\u59CB\u67E5\u627E\u8282\u70B9.</p><h2 id="tiebreakorder" tabindex="-1"><a class="header-anchor" href="#tiebreakorder" aria-hidden="true">#</a> tieBreakOrder</h2><p>\u4E0D\u77E5\u4F60\u8FD8\u8BB0\u5F97putTreeVal\u4E2D\u5728key\u65E0\u6CD5\u6BD4\u8F83\u7684\u60C5\u51B5\u4E0B, \u4F7F\u7528\u7684\u9ED8\u8BA4\u6BD4\u8F83\u65B9\u6CD5\u5417. \u4E0B\u9762\u8FD9\u6BB5\u903B\u8F91\u5C31\u662F\u5176\u5E90\u5C71\u771F\u9762\u76EE.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">tieBreakOrder</span><span class="token punctuation">(</span><span class="token class-name">Object</span> a<span class="token punctuation">,</span> <span class="token class-name">Object</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> d<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> b <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span>
        <span class="token punctuation">(</span>d <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
            <span class="token function">compareTo</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> d<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5F53\u5165\u53C2\u4E0D\u662Fnull, \u6BD4\u8F83\u5176class name. class name\u76F8\u540C, \u8FD9\u65F6\u901A\u8FC7<code>System.identityHashCode</code> \u6765\u6BD4\u8F83\u4E24\u4E2A\u7C7B\u7684hash, \u4EE5\u6B64\u786E\u5B9Ad; \u5982\u679Cif\u6761\u4EF6\u4E0D\u6EE1\u8DB3, \u5219\u8FD4\u56DE\u9ED8\u8BA4\u503C0.</p><h2 id="treeify" tabindex="-1"><a class="header-anchor" href="#treeify" aria-hidden="true">#</a> treeify</h2><p>\u6811\u5316, \u8FD8\u8BB0\u5F97\u4E4B\u524D\u6211\u4EEC\u5206\u6790<code>putVal</code>\u4E2D\u5224\u65AD\u94FE\u8868\u957F\u5EA6\u5927\u4E8E<code>TREEIFY_THRESHOLD</code>\u5C31\u8981\u8FDB\u884C\u6811\u5316\u5417? \u90A3\u4E2A\u5730\u65B9\u5C31\u7528\u5230\u4E86\u8FD9\u4E2A\u65B9\u6CD5.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span> next<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> x <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    next <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    x<span class="token punctuation">.</span>left <span class="token operator">=</span> x<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        x<span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        x<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        root <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E4B\u524D\u63D0\u5230\u8FC7, TreeNode\u5B9E\u9645\u4E0A\u7EF4\u62A4\u4E86\u4E24\u5957\u6570\u636E\u7ED3\u6784, \u94FE\u8868\u548C\u7EA2\u9ED1\u6811. \u6CE8\u610F\u5F53\u8C03\u7528\u8BE5\u65B9\u6CD5\u7684\u65F6\u5019\u867D\u7136\u5BF9\u8C61\u662F\u4E2ATreeNode\u4F46\u5176\u672C\u6765\u7684\u9762\u76EE\u662F\u4E2A\u94FE\u8868.</p><p><code>next = (TreeNode&lt;K,V&gt;)x.next;</code> \u662F\u4E3A\u4E86\u8FBE\u6210\u904D\u5386\u8282\u70B9\u7684\u6761\u4EF6. \u7B2C\u4E00\u6B21\u904D\u5386\u7684\u65F6\u5019, \u8BBE\u7F6E\u5F53\u524Dnode(\u5373: this)\u4E3A\u6839\u8282\u70B9, \u5E76\u521D\u59CB\u5316\u6839\u8282\u70B9\u7684\u76F8\u5173\u5C5E\u6027, \u6839\u8282\u70B9\u7684\u7236\u8282\u70B9\u4E3Anull, \u4E14\u4E3A\u9ED1\u8272. \u4E4B\u540E\u7684\u904D\u5386\u90FD\u8FDBelse</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token class-name">K</span> k <span class="token operator">=</span> x<span class="token punctuation">.</span>key<span class="token punctuation">;</span>
    <span class="token keyword">int</span> h <span class="token operator">=</span> x<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> kc <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> dir<span class="token punctuation">,</span> ph<span class="token punctuation">;</span>
        <span class="token class-name">K</span> pk <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ph <span class="token operator">=</span> p<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">&gt;</span> h<span class="token punctuation">)</span>
            dir <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ph <span class="token operator">&lt;</span> h<span class="token punctuation">)</span>
            dir <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>kc <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>
                    <span class="token punctuation">(</span>kc <span class="token operator">=</span> <span class="token function">comparableClassFor</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span>
                    <span class="token punctuation">(</span>dir <span class="token operator">=</span> <span class="token function">compareComparables</span><span class="token punctuation">(</span>kc<span class="token punctuation">,</span> k<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            dir <span class="token operator">=</span> <span class="token function">tieBreakOrder</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> xp <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>dir <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> p<span class="token punctuation">.</span>left <span class="token operator">:</span> p<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x<span class="token punctuation">.</span>parent <span class="token operator">=</span> xp<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>dir <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                xp<span class="token punctuation">.</span>left <span class="token operator">=</span> x<span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                xp<span class="token punctuation">.</span>right <span class="token operator">=</span> x<span class="token punctuation">;</span>
            root <span class="token operator">=</span> <span class="token function">balanceInsertion</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u6BB5\u4EE3\u7801\u7684\u76EE\u7684\u662F\u4E3A\u4E86\u6784\u5EFA\u4E00\u4E2A\u7EA2\u9ED1\u6811, \u4E0A\u9762\u7684\u6BD4\u8F83\u903B\u8F91\u6211\u4EEC\u5927\u6982\u5DF2\u7ECF\u7ECF\u5386\u4E86\u4E24\u6B21\u4E86, \u6B64\u5904\u5C31\u4E0D\u518D\u5206\u6790\u4E86. \u5FD8\u4E86\u7684\u81EA\u5DF1\u5206\u6790\u4E00\u4E0B, \u52A0\u5F3A\u8BA4\u77E5. <code>balanceInsertion</code> \u662F\u4E3A\u4E86\u81EA\u5E73\u8861. \u4E0A\u7BC7\u6587\u7AE0\u5206\u6790\u8FC7, \u589E\u52A0\u65B0\u7684\u8282\u70B9\u90FD\u4F1A\u6709\u53EF\u80FD\u5BFC\u81F4\u6811\u4E0D\u518D\u6EE1\u8DB35\u4E2A\u6761\u4EF6. \u65B0\u8282\u70B9\u589E\u52A0\u4E4B\u540E, break\u9000\u51FA\u5F53\u524D\u5FAA\u73AF, \u5E76\u5C06\u94FE\u8868\u7684\u4E0B\u4E00\u8282\u70B9, \u6DFB\u52A0\u5230\u6811\u4E0A.</p><p>\u6811\u5316\u7684\u6700\u540E\u6709\u4E00\u6B65<code>moveRootToFront(tab, root);</code>\u5C31\u662F\u91CD\u65B0\u786E\u5B9A\u5728table\u4E2D\u7684\u8282\u70B9\u662F\u6211\u4EEC\u65B0\u751F\u6210\u6811\u7684\u6839\u8282\u70B9.</p><h2 id="untreeify" tabindex="-1"><a class="header-anchor" href="#untreeify" aria-hidden="true">#</a> untreeify</h2><p>\u94FE\u5316, \u8FD9\u4E2A\u5F88\u7B80\u5355. \u7EC8\u4E8E\u6709\u4E2A\u4E0D\u8D39\u8111\u5B50\u7684\u4E86. \u867D\u7136\u5F88\u7B80\u5355\u4F46\u662F\u6211\u4EEC\u8FD8\u662F\u8C08\u4E00\u4E0B\u5427, hd\u8FD9\u4E2A\u53D8\u91CF\u662F\u4E3A\u4E86\u653E\u7F6E\u5934\u8282\u70B9\u7684, \u8FD9\u4E2A\u5934\u8282\u70B9\u540C\u6837\u662F\u8981\u8BBE\u7F6E\u5230table\u4E0A\u53BB\u7684(\u6211\u53EF\u7B97\u77E5\u9053\u5199\u8FD9\u4E2A\u4EE3\u7801\u7684\u4EBA\u7684\u5C3F\u6027\u4E86), tl\u5C31\u662F\u7528\u4E8E\u6784\u9020\u94FE\u8868\u7684\u4E00\u4E2A\u53D8\u91CF. \u6BCF\u6B21\u5FAA\u73AF\u8C03\u7528<code>replacementNode</code>\u4F7F\u7528\u5F53\u524D\u8282\u70B9\u91CD\u65B0\u6784\u5EFANode, \u4E4B\u540E\u5C06\u65B0\u8282\u70B9\u6307\u5411tl\u7684\u5C3E\u90E8, <code>tl = p</code>\u66F4\u65B0\u94FE\u5C3E\u8282\u70B9.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">untreeify</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> hd <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> tl <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> q <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> q <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> q <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">replacementNode</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tl <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            hd <span class="token operator">=</span> p<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            tl<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>
        tl <span class="token operator">=</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> hd<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">replacementNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">,</span> <span class="token class-name">Node</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash<span class="token punctuation">,</span> p<span class="token punctuation">.</span>key<span class="token punctuation">,</span> p<span class="token punctuation">.</span>value<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5982\u679C\u4F60\u597D\u5947\u4E3A\u4EC0\u4E48\u8FD9\u4E2A\u4EE3\u7801\u6CA1\u6709\u6811\u554A, \u90A3\u4E48\u4F60\u5E94\u8BE5\u6253\u6B7B\u4F60. \u56E0\u4E3ATreeNode\u5DF2\u7ECF\u7EF4\u62A4\u4E86\u4E00\u4EFD\u94FE\u8868\u4E86. <img src="https://tech.nikolazhang.top/15.jpg" alt="15" loading="lazy"> \u4F46\u662F\u5982\u679C\u4F60\u597D\u5947\u4E3A\u4EC0\u4E48<code>treeify</code>\u65B9\u6CD5, \u6811\u5316\u7684\u65F6\u5019\u6CA1\u6709\u7EF4\u62A4\u94FE\u8868. \u90A3\u4E48\u606D\u559C\u4F60, \u53D1\u73B0\u4E86\u6211\u4E0A\u9762\u6CA1\u6709\u8BB2\u7684\u5730\u65B9. \u539F\u56E0\u5F88\u7B80\u5355,(\u6216\u8BB8\u662F\u6211\u4EE5\u4E3A\u7B80\u5355, \u6B22\u8FCE\u5927\u5BB6\u63D0\u610F\u89C1, \u53D1\u8868\u81EA\u5DF1\u7684\u770B\u6CD5), \u56E0\u4E3A\u6811\u5316\u4E4B\u524D\u5C31\u662F\u4E2A\u94FE\u8868\u554A, \u6811\u5316\u5E76\u6CA1\u6709\u6539\u53D8\u8FD9\u4E2A\u94FE\u8868, \u53EA\u662F\u591A\u8BBE\u7F6E\u4E86\u51E0\u4E2A\u5C5E\u6027, \u800C<sub>\u5DF2</sub>\u554A~~~~.</p><h2 id="end" tabindex="-1"><a class="header-anchor" href="#end" aria-hidden="true">#</a> end</h2><p>\u6682\u65F6\u544A\u4E00\u6BB5\u843D\u5427, \u8FD9\u7BC7\u6587\u7AE0\u4E5F\u662F\u86EE\u786C\u6838\u7684. \u6211\u4E0D\u80FD\u4FDD\u8BC1\u6211\u7684\u5206\u6790\u4E00\u5B9A\u6B63\u786E, \u5E0C\u671B\u5404\u4F4D\u5927\u4F6C\u591A\u591A\u6279\u8BC4, \u4E0D\u541D\u8D50\u6559. <img src="https://tech.nikolazhang.top/21.gif" alt="21" loading="lazy"></p>`,44),o=[e];function c(l,u){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","\u7EA2\u9ED1\u6811[2]\u6570\u636E\u7ED3\u6784\u53CA\u65B9\u6CD5.html.vue"]]);export{r as default};
