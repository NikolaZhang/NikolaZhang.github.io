const e=JSON.parse('{"key":"v-4d6f5a4c","path":"/posts/pattern/interpretor-pattern.html","title":"interpretor pattern","lang":"en-US","frontmatter":{"isOriginal":true,"title":"interpretor pattern","date":"2018-12-15T00:00:00.000Z","tag":["interpretor pattern"],"category":"技术","description":"解释器模式的介绍和实现","image":"http://image.nikolazhang.top/wallhaven-nrwq11.jpg","head":[["meta",{"property":"og:url","content":"https://nikolazhang.github.io/posts/pattern/interpretor-pattern.html"}],["meta",{"property":"og:title","content":"interpretor pattern"}],["meta",{"property":"og:description","content":"解释器模式的介绍和实现"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-06-08T15:09:36.000Z"}],["meta",{"property":"article:author","content":"我小叮当、"}],["meta",{"property":"article:tag","content":"interpretor pattern"}],["meta",{"property":"article:published_time","content":"2018-12-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-08T15:09:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"interpretor pattern\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-12-15T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-08T15:09:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"我小叮当、\\",\\"url\\":\\"https://nikolazhang.github.io\\"}]}"]]},"headers":[{"level":2,"title":"模型结构","slug":"模型结构","link":"#模型结构","children":[]},{"level":2,"title":"环境角色","slug":"环境角色","link":"#环境角色","children":[]},{"level":2,"title":"抽象表达式接口","slug":"抽象表达式接口","link":"#抽象表达式接口","children":[]},{"level":2,"title":"终结和非终结表达式实现","slug":"终结和非终结表达式实现","link":"#终结和非终结表达式实现","children":[]},{"level":2,"title":"测试","slug":"测试","link":"#测试","children":[]},{"level":2,"title":"结果","slug":"结果","link":"#结果","children":[]}],"git":{"createdTime":1686236976000,"updatedTime":1686236976000,"contributors":[{"name":"nikola","email":"nikolazhang@163.com","commits":1}]},"readingTime":{"minutes":1.66,"words":499},"filePathRelative":"posts/pattern/interpretor-pattern.md","localizedDate":"December 15, 2018","excerpt":"<blockquote>\\n<p>解释器模式，最经典的解释器模型就是我们用的那些IDE。将你编写的语言转成机器语言。这个转换就可以理解为解释。</p>\\n</blockquote>\\n<!--more-->\\n<h2> 模型结构</h2>\\n<p>解释器模型，有三个主要的角色。</p>\\n<ol>\\n<li>Context：环境角色，主要用于存放传入的数据。</li>\\n<li>AbstractExpress：抽象解释器，是所有解释器的接口或者抽象父类。</li>\\n<li>TerminalExpress：终结符表达式，主要解释文法。</li>\\n<li>NonTermianlExpress: 非终结符表达式，主要解释符号标记。\\n比如：select * from database where name = #{name}\\nselect，from，where [a-z_A-Z]* =,是非终结表达式。database,*，#{name}这样的就属于终结表达式。\\n下面看看我这个例子吧。笑笑就好~实在拙劣。。。</li>\\n</ol>"}');export{e as data};
