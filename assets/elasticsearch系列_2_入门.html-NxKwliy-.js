import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as t,e as d}from"./app-1QxuzPzL.js";const r={},c=d('<blockquote><p>上一篇我们已经安装好了elasticsearch以及kibana. 这一篇简单介绍一下elasticsearch的相关知识.</p></blockquote><h2 id="elasticsearch的特性" tabindex="-1"><a class="header-anchor" href="#elasticsearch的特性" aria-hidden="true">#</a> elasticsearch的特性</h2><ul><li>分布式的实时文件存储，每个字段都被索引并可被搜索</li><li>分布式的实时分析搜索引擎</li><li>可以扩展到上百台服务器，处理PB级结构化或非结构化数据</li></ul><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><ul><li>面向文档, 所谓文档是一类信息的结合, 你可以理解为一个对象. 但是文档还会有除了对象本身之外的信息.</li><li>文档序列化使用json格式</li><li>基于http协议, 提供restful api进行通信</li></ul><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><h3 id="结构" tabindex="-1"><a class="header-anchor" href="#结构" aria-hidden="true">#</a> 结构</h3><p>索引(indices): 多个类型的集合, 类似数据库中<code>库</code>的概念<br> 类型(type): 所有文档的集合, 表示一类.类似<code>表</code>的概念<br> 文档(document): 一条记录, 一个对象.类似<code>行</code>的概念.<br> 字段(field): 对象中的具体属性. 类似<code>列</code>的概念.</p><h3 id="倒排索引" tabindex="-1"><a class="header-anchor" href="#倒排索引" aria-hidden="true">#</a> 倒排索引</h3><p>使用传统数据库, 为了优化查询, 通常对条件中的列增加索引. 如mqsql通过建立b+树索引去获取主键索引, 之后读取数据.<br> 但是elasticsearch使用倒排索引, 简单来说就是将文档中的内容作为索引, 根据索引去获取相应的文档.<br> 比如, 下面的几句话:<br> A: 失败是成功之母.<br> B: 一次成功的背后是千百次的失败.<br> C: 丢你老母.</p><p>我们可以看到A,B中都包含<code>成功</code>,<code>失败</code>. A,C中都包含<code>母</code>.<br> 因此建立倒排索引后可能会是这样的结果:</p><table><thead><tr><th>索引</th><th>文档</th></tr></thead><tbody><tr><td>失败</td><td>A,B</td></tr><tr><td>成功</td><td>A,B</td></tr><tr><td>母</td><td>A,C</td></tr></tbody></table><p>因此当我们想搜索<code>成功</code>相关的内容时, 可以很快的找到对应的文档A,B.</p><h2 id="waiting" tabindex="-1"><a class="header-anchor" href="#waiting" aria-hidden="true">#</a> waiting</h2><p>未完待续....<br><img src="https://tech.nikolazhang.top/2020-02-02-14-39-29.png" alt="2020-02-02-14-39-29"></p>',15),i=[c];function h(o,l){return a(),t("div",null,i)}const b=e(r,[["render",h],["__file","elasticsearch系列_2_入门.html.vue"]]);export{b as default};
