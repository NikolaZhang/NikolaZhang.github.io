import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as a,e as t}from"./app-633915bb.js";const l={},r=t('<h2 id="设计模式的分类" tabindex="-1"><a class="header-anchor" href="#设计模式的分类" aria-hidden="true">#</a> 设计模式的分类</h2><p>按照设计模式的目的，可以将设计模式划分为：</p><ol><li>创建型模式： 是对象实例化过程的抽象，通过采用抽象类所定义的接口，封装了系统中对象如何创建、组合等信息。</li><li>结构型模式： 主要用于如何组合已有的类和对象以获得更大的结构，一般借鉴封装、代理、继承等概念将一个或多个类或对象进行组合、封装，以提供统一的外部视图或新的功能。</li><li>行为型模式： 主要用于对象之间的职责及其提供的服务的分配，它不仅描述对象或类的模式，还描述它们之间的通信模式，特别是描述一组对等的对象怎样相互协作完成其中任一对象都无法单独完成的任务。</li></ol><h2 id="设计模式实例" tabindex="-1"><a class="header-anchor" href="#设计模式实例" aria-hidden="true">#</a> 设计模式实例</h2><h3 id="创建型模式" tabindex="-1"><a class="header-anchor" href="#创建型模式" aria-hidden="true">#</a> 创建型模式</h3><ol><li>抽象工厂 Abstract Factory</li><li>构建器 Builder</li><li>工厂方法 Factory Method</li><li>原型 Prototype</li><li>单例 Singleton</li></ol>',6),o=[r];function c(d,h){return i(),a("div",null,o)}const s=e(l,[["render",c],["__file","设计模式简介.html.vue"]]);export{s as default};
