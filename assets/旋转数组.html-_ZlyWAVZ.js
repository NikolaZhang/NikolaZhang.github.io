import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as p}from"./app-JRKDUQ6b.js";const t={},e=p(`<blockquote><p>一道看起来很简单但是又有一定技巧的题(或许是我太菜)</p></blockquote><h2 id="原题如下" tabindex="-1"><a class="header-anchor" href="#原题如下" aria-hidden="true">#</a> 原题如下</h2><p><img src="https://tech.nikolazhang.top/2020-02-16-19-34-34.png" alt="2020-02-16-19-34-34"></p><h2 id="我的思路" tabindex="-1"><a class="header-anchor" href="#我的思路" aria-hidden="true">#</a> 我的思路</h2><h3 id="分析以及注意事项" tabindex="-1"><a class="header-anchor" href="#分析以及注意事项" aria-hidden="true">#</a> 分析以及注意事项</h3><p>因为数组旋转, 每个位置上的数据必然发生变化. 因此算法最优时间必然是O(N).<br> 因此无论如何都要将数组所有元素遍历一遍, 因为每次变化, 只是数据替换, 因此我们知道空间最优必然是O(1).<br> 而且题目要求空间复杂度为O(1). 因此想创建一个新数组往里塞数的想法已经被扼杀了.</p><p>这就很明显了, 我们只需要在外层对数组进行遍历, 或者计数, 当循环数组长度次数时, 算法结束.<br> 内部需要一个变量<code>temp</code>用于存放当前替换的值<code>nums[next]</code><br> next的计算方式必然是<code>(next + k) % size</code>, k为步长, size为数组大小. 取余是为了高位替换低位, 你必须在数组长度内进行操作.</p><p>对于以某个步长, 进行数组循环, 无非有两种情况:</p><ol><li>发生局部循环, 数组无法全部遍历</li><li>数组能够全部遍历</li></ol><p>可以参考下图, 分别以2, 3为步长进行1~8的循环遍历:<br><img src="https://tech.nikolazhang.top/2020-02-16-19-48-02.png" alt="2020-02-16-19-48-02"></p><p>当步长可整除时, 会发生局部循环, 这个很好理解.<br> 当步长不可整除时, 无法在跨度为数组长度时回到起始位置. 因此无法闭环. 而下一次回到起始点, 也就是闭环只能是数组长度的步进长度倍.</p><p>额, 其实上面和我们算法关系不大, 只是提醒你担心局部循环的问题. 这也是我第一次写犯的错误.</p><hr><p>如果达到局部循环, 那么<code>next</code>必然会回到起始遍历位置. 因此我们可以增加<code>pre</code>记录起始位置, 并在局部循环达成后, 让pre自增1, 开始下一个局部循环.</p><p>为什么这样做能在O(n)实现所有元素的替换呢?<br> 因为, 关键原因在于每次循环都会发生元素替换. 而不产生漏换的原因在于, 我们考虑了局部循环的情况. 不能整除的必然只有一个闭环.</p><h2 id="程序" tabindex="-1"><a class="header-anchor" href="#程序" aria-hidden="true">#</a> 程序</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">rotate</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> k <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   size <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
   <span class="token keyword">if</span> size <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">||</span> k <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> k<span class="token operator">==</span>size<span class="token punctuation">{</span>
      <span class="token keyword">return</span>
   <span class="token punctuation">}</span>
   pre<span class="token punctuation">,</span> next<span class="token punctuation">,</span> temp <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
   <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
      next <span class="token operator">=</span> <span class="token punctuation">(</span>next <span class="token operator">+</span> k<span class="token punctuation">)</span> <span class="token operator">%</span> size
      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;交换 %d, %d\\n&quot;</span><span class="token punctuation">,</span> temp<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token punctuation">)</span>
      nums<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token punctuation">,</span> temp <span class="token operator">=</span> temp<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>next<span class="token punctuation">]</span>
      <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span>
         fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d,&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\t %d\\n&quot;</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span>
      <span class="token keyword">if</span> next <span class="token operator">==</span> pre <span class="token punctuation">{</span>
         fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;====重新设置&quot;</span><span class="token punctuation">,</span> pre<span class="token punctuation">)</span>
         pre<span class="token operator">++</span>
         temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>pre<span class="token punctuation">]</span>
         next <span class="token operator">=</span> pre
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   nums <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>
   <span class="token function">rotate</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结果" tabindex="-1"><a class="header-anchor" href="#结果" aria-hidden="true">#</a> 结果</h3><p><img src="https://tech.nikolazhang.top/2020-02-16-20-46-14.png" alt="2020-02-16-20-46-14"></p><p>leetcode结果:<br><img src="https://tech.nikolazhang.top/2020-02-16-20-48-22.png" alt="2020-02-16-20-48-22"></p><h2 id="最优解" tabindex="-1"><a class="header-anchor" href="#最优解" aria-hidden="true">#</a> 最优解</h2><p>我们再谈一谈最优解</p><p>代码如下:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">rotate</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> k <span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span>k<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>k<span class="token operator">%</span><span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    k<span class="token operator">=</span>k<span class="token operator">%</span><span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
    <span class="token function">reverseSlice</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token function">reverseSlice</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token function">reverseSlice</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">reverseSlice</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">;</span> <span class="token punctuation">{</span>
        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        i<span class="token operator">++</span>
        j<span class="token operator">--</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先全部遍历一次, 交换前后两个镜像位置元素<br> 之后分别对0<sub>k-1和k</sub>len(nums)-1区域重复上述操作.</p><p>这么神奇的吗? 画一下图, 还真是的!<br><img src="https://tech.nikolazhang.top/2020-02-16-20-58-56.png" alt="2020-02-16-20-58-56"></p><p>这种方法的巧妙之处在于, 当我们进行k次移动的时候, 会把后面的k%n, (考虑k&gt;n)个数放到前面,<br> 全局反转后, 以k-1和k为界将移除数组跑到前面的元素和未移出数组跑到后面的元素分开,<br> 之后进行反转, 进行顺序恢复.<br> 妙哉, 妙哉~我小叮当甘拜下风!</p><p><img src="https://tech.nikolazhang.top/2020-02-16-21-15-45.png" alt="2020-02-16-21-15-45"></p>`,28),o=[e];function c(i,u){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","旋转数组.html.vue"]]);export{r as default};
