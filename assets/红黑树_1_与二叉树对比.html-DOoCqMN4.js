import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as l,c as o,a as n,d as s,b as c,e as a}from"./app-_Q4FBYRc.js";const i={},u=a('<h2 id="二叉搜索树bst" tabindex="-1"><a class="header-anchor" href="#二叉搜索树bst" aria-hidden="true">#</a> 二叉搜索树BST</h2><p>先介绍一下二叉搜索树. 之后再引出红黑树.</p><h3 id="bst的特点" tabindex="-1"><a class="header-anchor" href="#bst的特点" aria-hidden="true">#</a> BST的特点</h3><ol><li>当前节点的左子节点小于当前节点.</li><li>当前节点的右子节点大于当前节点.</li></ol><h3 id="缺陷" tabindex="-1"><a class="header-anchor" href="#缺陷" aria-hidden="true">#</a> 缺陷</h3>',5),k=n("p",null,[s("我们先计算一下理想情况下的BST的时间复杂度. 对于节点数为n的二叉树, 其深度m满足:"),n("br"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mrow",null,[n("mi",null,"m"),n("mo",null,"−"),n("mn",null,"1")])]),n("mo",null,"−"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"2^{m-1}-1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"m"),n("span",{class:"mbin mtight"},"−"),n("span",{class:"mord mtight"},"1")])])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1")])])]),s(" < n <= "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mi",null,"m")]),n("mo",null,"−"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"2^m-1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7477em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.6644em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"m")])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1")])])]),n("br"),s(" 如果遍历一个节点的时间花费为O(1), 那么遍历到我们想要的节点就大约需要: O(log_2n)"),n("br"),s(" 性能还是不错的."),n("br"),s(" 但是当二叉树倾斜后时间复杂度将变为O(n), 此时的查找为链表查找, 每次都会寻址, 查询效率大大降低.")],-1),r=a(`<p>下面是我写的一段BST实现的代码:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>nikola<span class="token punctuation">.</span>treetest<span class="token punctuation">.</span>tree</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">ToString</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 二叉树的实现
 * 
 * <span class="token keyword">@author</span> nikolazhang
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BST</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">BST</span> bst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> head <span class="token operator">=</span> bst<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        head<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        head<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        head<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        head<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        head<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        head<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        head<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        head<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        head<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        head<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        head<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;输出信息为: {}&quot;</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token string">&quot;parent&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> left<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> right<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> parent<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * 向二叉树中添加节点
         * 
         * <span class="token keyword">@param</span> <span class="token parameter">t</span> 将要放入二叉树中的值
         */</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addChild</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 创建一个新节点</span>
            <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 遍历当前节点信息并比较两个节点</span>
            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>
            <span class="token keyword">int</span> res<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 比较当前节点和新节点, 如果新节点小于等于当前节点则添加到左子树, 否则添加到右子树</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>res <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span>left <span class="token operator">=</span> child<span class="token punctuation">;</span>
                        child<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        e <span class="token operator">=</span> e<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;和当前节点数值相同, 不做处理&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span>right <span class="token operator">=</span> child<span class="token punctuation">;</span>
                        child<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        e <span class="token operator">=</span> e<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * 删除元素
         * 
         * <span class="token keyword">@param</span> <span class="token parameter">t</span>
         */</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">deleteChild</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> targetNode <span class="token operator">=</span> <span class="token function">findNode</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>targetNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> parentNode <span class="token operator">=</span> targetNode<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                parentNode<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>targetNode<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                parentNode<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>targetNode<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                targetNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;{} 不存在&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * 判断t是否存在
         * 
         * <span class="token keyword">@param</span> <span class="token parameter">t</span>
         * <span class="token keyword">@return</span>
         */</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isExist</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 返回节点不为空则存在</span>
            <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span><span class="token function">findNode</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * 查询t所在的节点
         * 
         * <span class="token keyword">@param</span> <span class="token parameter">t</span>
         * <span class="token keyword">@return</span>
         */</span>
        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findNode</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>
            <span class="token keyword">int</span> res<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>res <span class="token operator">=</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        e <span class="token operator">=</span> e<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> e<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        e <span class="token operator">=</span> e<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * 比较两个节点
         */</span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * 比较数值
         * 
         * <span class="token keyword">@param</span> <span class="token parameter">t1</span>
         * <span class="token keyword">@param</span> <span class="token parameter">t2</span>
         * <span class="token keyword">@return</span>
         */</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">T</span> t1<span class="token punctuation">,</span> <span class="token class-name">T</span> t2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> t1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为(这里我手动格式化了一下):</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>BST.Node<span class="token punctuation">(</span>
    <span class="token assign-left variable">data</span><span class="token operator">=</span><span class="token number">7</span>,
    <span class="token assign-left variable">left</span><span class="token operator">=</span>BST.Node<span class="token punctuation">(</span>
        <span class="token assign-left variable">data</span><span class="token operator">=</span><span class="token number">2</span>,
        <span class="token assign-left variable">left</span><span class="token operator">=</span>null,
        <span class="token assign-left variable">right</span><span class="token operator">=</span>BST.Node<span class="token punctuation">(</span>
            <span class="token assign-left variable">data</span><span class="token operator">=</span><span class="token number">6</span>,
            <span class="token assign-left variable">left</span><span class="token operator">=</span>null,
            <span class="token assign-left variable">right</span><span class="token operator">=</span>null<span class="token punctuation">))</span>,
    <span class="token assign-left variable">right</span><span class="token operator">=</span>BST.Node<span class="token punctuation">(</span>
        <span class="token assign-left variable">data</span><span class="token operator">=</span><span class="token number">9</span>,
        <span class="token assign-left variable">left</span><span class="token operator">=</span>null,
        <span class="token assign-left variable">right</span><span class="token operator">=</span>BST.Node<span class="token punctuation">(</span>
            <span class="token assign-left variable">data</span><span class="token operator">=</span><span class="token number">10</span>,
            <span class="token assign-left variable">left</span><span class="token operator">=</span>null,
            <span class="token assign-left variable">right</span><span class="token operator">=</span>BST.Node<span class="token punctuation">(</span>
                <span class="token assign-left variable">data</span><span class="token operator">=</span><span class="token number">11</span>,
                <span class="token assign-left variable">left</span><span class="token operator">=</span>null,
                <span class="token assign-left variable">right</span><span class="token operator">=</span>BST.Node<span class="token punctuation">(</span>
                    <span class="token assign-left variable">data</span><span class="token operator">=</span><span class="token number">12</span>,
                    <span class="token assign-left variable">left</span><span class="token operator">=</span>null,
                    <span class="token assign-left variable">right</span><span class="token operator">=</span>BST.Node<span class="token punctuation">(</span>
                        <span class="token assign-left variable">data</span><span class="token operator">=</span><span class="token number">13</span>,
                        <span class="token assign-left variable">left</span><span class="token operator">=</span>null,
                        <span class="token assign-left variable">right</span><span class="token operator">=</span>BST.Node<span class="token punctuation">(</span>
                            <span class="token assign-left variable">data</span><span class="token operator">=</span><span class="token number">14</span>,
                            <span class="token assign-left variable">left</span><span class="token operator">=</span>null,
                            <span class="token assign-left variable">right</span><span class="token operator">=</span>BST.Node<span class="token punctuation">(</span>
                                <span class="token assign-left variable">data</span><span class="token operator">=</span><span class="token number">15</span>,
                                <span class="token assign-left variable">left</span><span class="token operator">=</span>null,
                                <span class="token assign-left variable">right</span><span class="token operator">=</span>BST.Node<span class="token punctuation">(</span>
                                    <span class="token assign-left variable">data</span><span class="token operator">=</span><span class="token number">16</span>,
                                    <span class="token assign-left variable">left</span><span class="token operator">=</span>null,
                                    <span class="token assign-left variable">right</span><span class="token operator">=</span>null<span class="token punctuation">))</span><span class="token punctuation">))</span><span class="token punctuation">))</span><span class="token punctuation">))</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很明显添加形如: 10, 11, 12, 13, 14......这样的递增数字的时候, 会导致二叉树不断右斜(所有的子节点都在右子节点上).<br> 进而性能向链表退化.</p><h2 id="红黑树" tabindex="-1"><a class="header-anchor" href="#红黑树" aria-hidden="true">#</a> 红黑树</h2><p>平衡二叉树可以解决BST的倾斜退化问题, 红黑树就是这其中的一种解决方案. (另外如AVL等)</p><h3 id="红黑树性质" tabindex="-1"><a class="header-anchor" href="#红黑树性质" aria-hidden="true">#</a> 红黑树性质</h3><ol><li>任何一个节点都有颜色，黑色或者红色</li><li>根节点是黑色的</li><li>父子节点之间不能出现两个连续的红节点</li><li>任何一个节点向下遍历到其子孙的叶子节点，所经过的黑节点个数必须相等</li><li>空节点被认为是黑色的</li></ol><h3 id="红黑树的自平衡" tabindex="-1"><a class="header-anchor" href="#红黑树的自平衡" aria-hidden="true">#</a> 红黑树的自平衡</h3><p>红黑树进行自平衡有以下几种处理方法: <code>变色, 左旋, 右旋</code>.</p><p>这里简单说一下左旋和右旋的步骤, 请看下图(分别以R,H 和 L,H做左旋和右旋演示, 图画的有点拙劣 X_X):<br><img src="https://tech.nikolazhang.top/2020-01-12-20-18-49.png" alt="2020-01-12-20-18-49"></p><p>对于新手,建议你先有这几点意识:</p><ol><li>旋转只会发生在父子节点之间</li><li>旋转之后, 父子节点关系发生变化, 父节点变成子节点, 子节点变成父节点.</li><li>旋转方向上的子节点的子节点会改变父级指向. 比如: 右旋则子级节点的右子节点的父级会指向到子节点的父级上, 成为其左子节点.</li><li>左旋只会发生在右子节点和父节点之间; 右旋只会发生在左子节点和父节点之间.</li><li>左旋其父节点最终要变为左子节点, 右旋父节点最终要变成右子节点.</li></ol><h4 id="演示" tabindex="-1"><a class="header-anchor" href="#演示" aria-hidden="true">#</a> 演示</h4><p>下面演示加入10, 5, 20, 1, 3生成红黑树的过程:</p><ol><li>添加10时, 父节点为空, 则将10设置为头节点, 并将其涂成黑色.<br><img src="https://tech.nikolazhang.top/2020-01-12-09-38-14.png" alt="2020-01-12-09-38-14"></li><li>当新的节点插入时, 颜色要设置为红色, 插入红色时, 不会影响到达新的节点的黑色数量的计算. 但是插入红色唯一出现的问题是会违反规则3, 这个时候就需要进行变色和旋转. 使红黑树重新达到自平衡.</li><li>当插入节点5时, 我们设置其节点为红色, 校验父节点的颜色, 发现为黑色. 则红黑树条件满足. 插入节点20的情况与之相同<br><img src="https://tech.nikolazhang.top/2020-01-12-09-47-29.png" alt="2020-01-12-09-47-29"><img src="https://tech.nikolazhang.top/2020-01-12-09-48-19.png" alt="2020-01-12-09-48-19"></li><li>当插入节点1时, 遍历红黑树此时1应该放在5的左子树上. 当1设置为红色后, 发现父节点5也为红色. 这时我们需要将父节点5变为黑色,这时到达20的子节点的黑色节点数量和到达5的子节点的黑色数量不一致, 因此兄弟节点20也需要变成黑色, 以满足条件4.<br><img src="https://tech.nikolazhang.top/2020-01-12-10-07-19.png" alt="2020-01-12-10-07-19"></li><li>之后再添加节点3, 3要先放到1的右子树上(如图所示). 并且颜色为红色.<br><img src="https://tech.nikolazhang.top/2020-01-12-13-16-01.png" alt="2020-01-12-13-16-01"><br> 首先我们先进行旋转让树达到平衡, 首先肯定不能对1和5进行右旋,因为3占据了右子节点. 因此先对1,3进行左旋, 如下图.<br><img src="https://tech.nikolazhang.top/2020-01-12-13-58-44.png" alt="2020-01-12-13-58-44"><br> 之后再进行3,5右旋,如下图.<br><img src="https://tech.nikolazhang.top/2020-01-12-21-09-59.png" alt="2020-01-12-21-09-59"><br> 进行完以上处理树已经缴纳满足平衡二叉树了. 但是仍旧不满足条件3,4. 此时我们进行变色处理. 将5变成红色, 3变成黑色.<br><img src="https://tech.nikolazhang.top/2020-01-12-21-08-33.png" alt="2020-01-12-21-08-33"><br> 这样就满足了红黑树的5个条件</li></ol><h2 id="end" tabindex="-1"><a class="header-anchor" href="#end" aria-hidden="true">#</a> end</h2>`,18),d={href:"https://www.cs.usfca.edu/~galles/visualization/RedBlack.html",target:"_blank",rel:"noopener noreferrer"},m=n("br",null,null,-1);function v(b,h){const p=e("ExternalLinkIcon");return l(),o("div",null,[u,k,r,n("p",null,[s("这里有一个数据结构的模拟网站: "),n("a",d,[s("www.cs.usfca.edu"),c(p)]),s("有兴趣可以自己尝试一下."),m,s(" 这篇文章我也是边学习边探索边写的(主要是探索), 有些坑还没有填上(比如红黑树的删除). 下一篇继续再说说hashmap中的红黑树的实现吧.")])])}const w=t(i,[["render",v],["__file","红黑树_1_与二叉树对比.html.vue"]]);export{w as default};
