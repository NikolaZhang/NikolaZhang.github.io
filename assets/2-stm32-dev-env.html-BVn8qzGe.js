import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as r,c as l,a as e,d as a,b as s,e as p}from"./app-CYrfdzXE.js";const m={},u={href:"https://gnutoolchains.com/arm-eabi/openocd/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.st.com/content/st_com/en/stm32cubemx.html",target:"_blank",rel:"noopener noreferrer"},c={href:"https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads",target:"_blank",rel:"noopener noreferrer"},g={href:"https://zhuanlan.zhihu.com/p/628628503",target:"_blank",rel:"noopener noreferrer"},h={href:"https://zhuanlan.zhihu.com/p/145801160",target:"_blank",rel:"noopener noreferrer"};function b(v,n){const t=i("ExternalLinkIcon");return r(),l("div",null,[n[12]||(n[12]=e("blockquote",null,[e("p",null,"使用keil进行stm32开发，代码提示不如clion。为了使用clion进行开发，需要配置相关环境信息。")],-1)),n[13]||(n[13]=e("h2",{id:"openocd和stm32cubemx",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#openocd和stm32cubemx","aria-hidden":"true"},"#"),a(" OpenOCD和Stm32CubeMX")],-1)),e("p",null,[n[1]||(n[1]=a("OpenOCD是一款开源工具，允许使用各种JTAG编程器通过GDB调试各种ARM设备。该工具可以在")),e("a",u,[n[0]||(n[0]=a("gnutoolchains")),s(t)]),n[2]||(n[2]=a("下载。"))]),e("p",null,[n[4]||(n[4]=a("Stm32CubeMX是一款开源的STM32的IDE，可以生成STM32的工程文件。该工具可以在")),e("a",d,[n[3]||(n[3]=a("stm32cubemx")),s(t)]),n[5]||(n[5]=a("下载。"))]),n[14]||(n[14]=e("p",null,"下载后，找个位置安装，将路径配置到Clion的Settings中，如下图：",-1)),n[15]||(n[15]=e("p",null,[e("img",{src:"https://raw.githubusercontent.com/NikolaZhang/image-blog/main/2-stm32-dev-env/20240313214724.png",alt:"20240313214724"})],-1)),n[16]||(n[16]=e("h2",{id:"cmake配置",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#cmake配置","aria-hidden":"true"},"#"),a(" CMake配置")],-1)),e("p",null,[n[7]||(n[7]=a("下载")),e("a",c,[n[6]||(n[6]=a("arm-none-eabi-gcc")),s(t)]),n[8]||(n[8]=a("，解压后配置到下面位置："))]),n[17]||(n[17]=p(`<p><img src="https://raw.githubusercontent.com/NikolaZhang/image-blog/main/2-stm32-dev-env/20240313214613.png" alt="20240313214613"></p><p><img src="https://raw.githubusercontent.com/NikolaZhang/image-blog/main/2-stm32-dev-env/20240313223442.png" alt="20240313223442"></p><h2 id="创建项目" tabindex="-1"><a class="header-anchor" href="#创建项目" aria-hidden="true">#</a> 创建项目</h2><p>创建项目的时候，选择<code>stm32cubemx</code>。</p><p><img src="https://raw.githubusercontent.com/NikolaZhang/image-blog/main/2-stm32-dev-env/20240313213131.png" alt="20240313213131"></p><h3 id="选择配置" tabindex="-1"><a class="header-anchor" href="#选择配置" aria-hidden="true">#</a> 选择配置</h3><p><code>select board config file</code>的作用是选择板子的配置信息。我买的是淘宝的极简板，这个配置一般是没有的。这里可以直接跳过。</p><p><img src="https://raw.githubusercontent.com/NikolaZhang/image-blog/main/2-stm32-dev-env/20240313214005.png" alt="20240313214005"></p><p>之后会自动运行stm32cubemx，如果没有启动，可以直接外部启动，或者通过ioc文件运行。</p><p><img src="https://raw.githubusercontent.com/NikolaZhang/image-blog/main/2-stm32-dev-env/20240313221126.png" alt="20240313221126"></p><h2 id="使用stm32cubemx生成项目代码" tabindex="-1"><a class="header-anchor" href="#使用stm32cubemx生成项目代码" aria-hidden="true">#</a> 使用stm32cubemx生成项目代码</h2><p>通过clion进入，芯片可能不是我们想要的。需要点击home，选择我们的芯片。</p><p><img src="https://raw.githubusercontent.com/NikolaZhang/image-blog/main/2-stm32-dev-env/20240313221514.png" alt="20240313221514"></p><p><img src="https://raw.githubusercontent.com/NikolaZhang/image-blog/main/2-stm32-dev-env/20240313221714.png" alt="20240313221714"></p><p>可以点击星号，收藏芯片，下次可以直接点击左上角的星号找芯片。双击列表中的芯片，可以确认选中该芯片。</p><p>之后，可以配置芯片引脚类型，及标签。这里设置PB3为GPIO-Output，标签为LED。</p><p><img src="https://raw.githubusercontent.com/NikolaZhang/image-blog/main/2-stm32-dev-env/20240313222328.png" alt="20240313222328"><br><img src="https://raw.githubusercontent.com/NikolaZhang/image-blog/main/2-stm32-dev-env/20240313232022.png" alt="20240313232022"><br> 配置项目名称，路径，以及IDE。</p><p><img src="https://raw.githubusercontent.com/NikolaZhang/image-blog/main/2-stm32-dev-env/20240313222636.png" alt="20240313222636"></p><p>生成文件配置，勾上<code>Generate peripheral initialization as a pair of’.c/.h’ files per peripheral</code>为每个外设生成一对&quot;.c/.h &quot;文件的外设初始化文件。</p><p><img src="https://raw.githubusercontent.com/NikolaZhang/image-blog/main/2-stm32-dev-env/20240313222751.png" alt="20240313222751"></p><p>点击右上角生成代码。生成之后关闭stm32cubemx即可。</p><h2 id="运行项目" tabindex="-1"><a class="header-anchor" href="#运行项目" aria-hidden="true">#</a> 运行项目</h2><p>在main.c中，找到<code>while(1)</code>，在其中添加下面两行代码，用于控制引脚电平反转</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">HAL_GPIO_TogglePin</span><span class="token punctuation">(</span>LED_GPIO_Port<span class="token punctuation">,</span> LED_Pin<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在运行配置中，添加<code>OpenOCD Download &amp; Run</code>，配置如下：</p><p><img src="https://raw.githubusercontent.com/NikolaZhang/image-blog/main/2-stm32-dev-env/20240313224155.png" alt="20240313224155"></p><p>图中stlink.cfg文件，内容如下，可以复制到文件中，放到项目里。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> <span class="token punctuation">[</span>find interface/stlink.cfg<span class="token punctuation">]</span>
transport <span class="token keyword">select</span> hla_swd
<span class="token builtin class-name">source</span> <span class="token punctuation">[</span>find target/stm32f1x.cfg<span class="token punctuation">]</span>
adapter speed <span class="token number">10000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行项目，效果如下：</p><p><img src="https://raw.githubusercontent.com/NikolaZhang/image-blog/main/2-stm32-dev-env/VID_20240313_232355 -small-original.gif" alt="VID_20240313_232355 -small-original"></p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,31)),e("p",null,[e("a",g,[n[9]||(n[9]=a("手把手教你用Clion进行STM32开发")),s(t)]),n[11]||(n[11]=e("br",null,null,-1)),e("a",h,[n[10]||(n[10]=a("配置CLion用于STM32开发")),s(t)])])])}const x=o(m,[["render",b],["__file","2-stm32-dev-env.html.vue"]]);export{x as default};
