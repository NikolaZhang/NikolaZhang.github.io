import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as l,c as e,e as a}from"./app-eIIEjUIZ.js";const r={},t=a('<h2 id="设计模式的分类" tabindex="-1"><a class="header-anchor" href="#设计模式的分类" aria-hidden="true">#</a> 设计模式的分类</h2><p>按照设计模式的目的，可以将设计模式划分为：</p><ol><li>创建型模式：<br> 是对象实例化过程的抽象，通过采用抽象类所定义的接口，封装了系统中对象如何创建、组合等信息。</li><li>结构型模式：<br> 主要用于如何组合已有的类和对象以获得更大的结构，一般借鉴封装、代理、继承等概念将一个或多个类或对象进行组合、封装，以提供统一的外部视图或新的功能。</li><li>行为型模式：<br> 主要用于对象之间的职责及其提供的服务的分配，它不仅描述对象或类的模式，还描述它们之间的通信模式，特别是描述一组对等的对象怎样相互协作完成其中任一对象都无法单独完成的任务。</li></ol><h2 id="设计模式实例" tabindex="-1"><a class="header-anchor" href="#设计模式实例" aria-hidden="true">#</a> 设计模式实例</h2><h3 id="创建型模式" tabindex="-1"><a class="header-anchor" href="#创建型模式" aria-hidden="true">#</a> 创建型模式</h3><ol><li>抽象工厂 Abstract Factory</li><li>构建器 Builder</li><li>工厂方法 Factory Method</li><li>原型 Prototype</li><li>单例 Singleton</li></ol><h3 id="结构型模式" tabindex="-1"><a class="header-anchor" href="#结构型模式" aria-hidden="true">#</a> 结构型模式</h3><ol><li>适配器 Adapter</li><li>桥接 Bridge</li><li>组合 Composite</li><li>装饰者 Decorator</li><li>外观 Facade</li><li>享元 Flyweight</li><li>代理 Proxy</li></ol><h3 id="行为型模式" tabindex="-1"><a class="header-anchor" href="#行为型模式" aria-hidden="true">#</a> 行为型模式</h3><ol><li>责任链 Chain of Responsibility</li><li>命令 Command</li><li>解释器 Interpreter</li><li>迭代器 Iterator</li><li>中介者 Mediator</li><li>备忘录 Memento</li><li>观察者 Observer</li><li>状态 State</li><li>策略 Strategy</li><li>模板 Template Method</li><li>访问者 Visitor</li></ol><h2 id="一句话" tabindex="-1"><a class="header-anchor" href="#一句话" aria-hidden="true">#</a> 一句话</h2><ol><li>单例模式(Singleton)：确保一个类仅有一个实例，并提供全局访问点。</li><li>工厂方法(Factory Method)：定义一个用于创建对象的接口，让子类决定实例化哪一个类。</li><li>抽象工厂(Abstract Factory)：提供一个创建一系列相关或相互依赖对象的接口，而无需指定具体类。</li><li>建造者(Builder)：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</li><li>原型(Prototype)：通过复制原型实例来创建新的对象，而不是新建实例。</li><li>代理(Proxy)：为其他对象提供一种代理以控制对这个对象的访问，如远程代理、虚拟代理、保护代理等。</li><li>适配器(Adapter)：将一个类的接口转换成客户希望的另一个接口，使原本不兼容的类能够合作无间。</li><li>桥接(Bridge)：将抽象部分与其实现部分分离，使它们都可以独立变化，例如实现系统可能有多种方式，但接口保持一致。</li><li>组合(Composite)：允许你将对象组合成树形结构来表现“整体-部分”层次结构，用户对单个对象和组合对象的使用具有一致性。</li><li>装饰器(Decorator)：动态地给对象添加额外的责任（功能），同时保持类的单一职责原则。</li><li>门面(Facade)：为子系统中的一组接口提供一个统一的高层接口，简化了外部调用接口，隐藏内部复杂性。</li><li>享元(Flyweight)：运用共享技术有效地支持大量细粒度的对象，减少系统中的对象数量，从而节省资源。</li><li>观察者(Observer)：定义了一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知并自动更新。</li><li>模板方法(Template Method)：在一个抽象类中定义一个操作中的算法骨架，而将一些步骤延迟到子类中实现。</li><li>责任链(Chain of Responsibility)：多个对象都有机会处理请求，避免请求的发送者和接收者之间的耦合关系。</li><li>命令(Command)：将请求封装为一个对象，使得可以用不同的请求参数化客户端，支持可撤销操作和队列请求等功能。</li><li>解释器(Interpreter)：提供了评估语言语法或表达式的方式，通常用于设计小型语言解析器。</li><li>迭代器(Iterator)：提供一种顺序访问聚合对象元素的方法，而又不需要暴露其底层表示。</li><li>中介者(Mediator)：定义一个中介对象来封装系列对象间的交互，降低对象间的耦合度。</li><li>备忘录(Memento)：在不破坏封装性的前提下，捕获一个对象的内部状态并在需要时恢复它。</li><li>状态(State)：允许对象在其内部状态改变时改变其行为，对象看起来似乎修改了它的类。</li><li>策略(Strategy)：定义了一系列算法，并将每一个算法封装起来，使它们可以相互替换，让算法的变化独立于使用该算法的客户。</li><li>访问者(Visitor)：表示一个作用于某对象结构中的各元素的操作，它使你可以在不改变各元素类的前提下定义作用于这些元素的新操作。</li></ol>',12),o=[t];function d(h,n){return l(),e("div",null,o)}const _=i(r,[["render",d],["__file","0-设计模式简介.html.vue"]]);export{_ as default};
