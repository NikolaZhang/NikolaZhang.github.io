import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o as i,c as l,a as s,d,b as p,e as t}from"./app-UXtdUrsC.js";const c={},o=t(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p><code>sed</code> 是一种流式文本编辑工具，在 Linux 系统中被广泛使用。它运行在终端中，能够对文本进行替换、删除、插入、取代等操作。</p><p>sed对文本的处理很强大，并且sed非常小，参数少，容易掌握，他的操作方式根awk有点像。sed按顺序逐行读取文件。</p><p>然后，它执行为该行指定的所有操作，并在完成请求的修改之后的内容显示出来，也可以存放到文件中。完成了一行上的所有操作之后，它读取文件的下一行，然后重复该过程直到它完成该文件。</p><p>在这里要注意一点，<code>源文件（默认地）保持不被修改</code>。sed 默认读取整个文件并对其中的每一行进行修改。说白了就是一行一行的操作。</p><h2 id="命令" tabindex="-1"><a class="header-anchor" href="#命令" aria-hidden="true">#</a> 命令</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-h</span>
 -n, --quiet, <span class="token parameter variable">--silent</span>    取消自动打印模式空间
 <span class="token parameter variable">-e</span> 脚本, <span class="token parameter variable">--expression</span><span class="token operator">=</span>脚本   添加“脚本”到程序的运行列表
 <span class="token parameter variable">-f</span> 脚本文件, <span class="token parameter variable">--file</span><span class="token operator">=</span>脚本文件  添加“脚本文件”到程序的运行列表
 --follow-symlinks    直接修改文件时跟随软链接
 -i<span class="token punctuation">[</span>扩展名<span class="token punctuation">]</span>, --in-place<span class="token punctuation">[</span><span class="token operator">=</span>扩展名<span class="token punctuation">]</span>    直接修改文件<span class="token punctuation">(</span>如果指定扩展名就备份文件<span class="token punctuation">)</span>
 <span class="token parameter variable">-l</span> N, --line-length<span class="token operator">=</span>N   指定“l”命令的换行期望长度
 <span class="token parameter variable">--posix</span>  关闭所有 GNU 扩展
 -r, --regexp-extended  在脚本中使用扩展正则表达式
 -s, <span class="token parameter variable">--separate</span>  将输入文件视为各个独立的文件而不是一个长的连续输入
 -u, <span class="token parameter variable">--unbuffered</span>  从输入文件读取最少的数据，更频繁的刷新输出
 <span class="token parameter variable">--help</span>     打印帮助并退出
 <span class="token parameter variable">--version</span>  输出版本信息并退出
 <span class="token parameter variable">-a</span> ∶新增， a 的后面可以接字串，而这些字串会在新的一行出现<span class="token punctuation">(</span>目前的下一行<span class="token punctuation">)</span>～
 <span class="token parameter variable">-c</span> ∶取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！
 <span class="token parameter variable">-d</span> ∶删除，因为是删除啊，所以 d 后面通常不接任何咚咚；
 <span class="token parameter variable">-i</span> ∶插入， i 的后面可以接字串，而这些字串会在新的一行出现<span class="token punctuation">(</span>目前的上一行<span class="token punctuation">)</span>；
 <span class="token parameter variable">-p</span> ∶列印，亦即将某个选择的资料印出。通常 p 会与参数 <span class="token function">sed</span> <span class="token parameter variable">-n</span> 一起运作～
 <span class="token parameter variable">-s</span> ∶取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h2><p>下面的案例使用如下文本进行演示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>old:case:bash
old1:graph:
old2:code:shell
old3:print:mail
dewy:year:text
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="替换" tabindex="-1"><a class="header-anchor" href="#替换" aria-hidden="true">#</a> 替换</h3><ol><li><p>将文件 <code>file.txt</code> 中的 <code>old</code> 替换为 <code>new</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;s/old/new/&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>如果需要替换所有的字符串，需要添加<code>g</code>参数：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;s/old/new/g&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>如果需要查看哪些行发生了变化，可以添加<code>-n</code>和<code>p</code>参数：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;s/old/new/gp&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>指定替换范围，如果需要替换前2到3行范围内的文本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;2,3s/old/new/gp&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>如果不同的范围需要替换不同的内容，可以参考：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;2,3s/old/new1/gp;4s/old/new2/gp&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2,3行之间的old使用new1替换，第4行的old使用new2替换。<code>;</code>用于分割两个命令。</p><p>关于命令的分割，可以使用-e参数：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-ne</span> <span class="token string">&#39;2,3s/old/new1/gp&#39;</span> <span class="token parameter variable">-ne</span>  <span class="token string">&#39;4s/old/new2/gp&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果不知道要替换的范围，但是直到开始和结束的字符串。比如从old1开始到old2之间的文本需要替换。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-ne</span> <span class="token string">&#39;/^old1/,/old2/s/old/new/gp&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用正则替换时，特殊符号要进行转义：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;s/^\\(ol\\w\\{1\\}\\)/new/gp&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里匹配ol字符后有一个字符的文本替换为new</p></li><li><p><code>&amp;</code>用于在匹配的文本后，附加文本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;s/old/&amp;new/&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的命令会在匹配到<code>old</code>的文本后面添加<code>new</code></p></li><li><p><code>n;</code>是next的缩写，</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;/old/{n;s/old1/new1/}&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的命令会在匹配到old的文本之后，将下一行的old1替换为new1</p></li><li><p>y的作用是进行字符集替换，不过替换字符和被替换字符长度要一样</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;y/old/new/&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该命令会将所有的o替换为n，l替换为e，d替换为w。这个命令与s是不同的，需要注意。</p></li><li><p>h的作用是将找到的行，放到一个缓存区，G的作用是将缓存区中的内容放到最后一行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;/old1/h;$G&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该命令会见匹配到old1所在的行放到缓存区，$G会将该内容放到最后一行。</p><p>行替换，用匹配old1的行，来替换匹配old2的行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;/old1/h;/old2/g&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>退出<code>q</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;s/old/new/g;3q&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3q的意思为匹配到第3行退出</p></li><li><p>特殊匹配，以下文本表示符合某种规则</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>匹配数字别忘了中括号外面还有一个中括号。
<span class="token punctuation">[</span>:alnum:<span class="token punctuation">]</span> 字母数字 <span class="token punctuation">[</span>a-z A-Z <span class="token number">0</span>-9<span class="token punctuation">]</span>
<span class="token punctuation">[</span>:alpha:<span class="token punctuation">]</span> 字母 <span class="token punctuation">[</span>a-z A-Z<span class="token punctuation">]</span>
<span class="token punctuation">[</span>:blank:<span class="token punctuation">]</span> 空格或制表键
<span class="token punctuation">[</span>:cntrl:<span class="token punctuation">]</span> 任何控制字符
<span class="token punctuation">[</span>:digit:<span class="token punctuation">]</span> 数字 <span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span>
<span class="token punctuation">[</span>:graph:<span class="token punctuation">]</span> 任何可视字符（无空格）
<span class="token punctuation">[</span>:lower:<span class="token punctuation">]</span> 小写 <span class="token punctuation">[</span>a-z<span class="token punctuation">]</span>
<span class="token punctuation">[</span>:print:<span class="token punctuation">]</span> 非控制字符
<span class="token punctuation">[</span>:punct:<span class="token punctuation">]</span> 标点字符
<span class="token punctuation">[</span>:space:<span class="token punctuation">]</span> 空格
<span class="token punctuation">[</span>:upper:<span class="token punctuation">]</span> 大写 <span class="token punctuation">[</span>A-Z<span class="token punctuation">]</span>
<span class="token punctuation">[</span>:xdigit:<span class="token punctuation">]</span> 十六进制数字 <span class="token punctuation">[</span><span class="token number">0</span>-9 a-f A-F<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方法如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;s/[[:digit:]]/xxx/gp&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该命令将所有的数字替换为xxx</p><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> 删除</h3><ol><li><p>删除行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;/old/d&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除文件 <code>file.txt</code> 中包含 <code>old</code> 的所有行。</p></li><li><p>删除1到3行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;1,3d&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>删除3行之后的所有</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;3,$d&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>删除包括old1的行，或者包括old2的行，别忘了加\\</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;/\\(old1\\|old2\\)/d&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>字符匹配范围删除</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;/old1/,/^old3/d&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从old1开始到old3开头的数据</p></li></ol><h2 id="插入" tabindex="-1"><a class="header-anchor" href="#插入" aria-hidden="true">#</a> 插入</h2><ol><li><p>插入行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;3idewy yr&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在文件 <code>file.txt</code> 的第 3 行之前插入 <code>dewy yr</code>。</p></li><li><p>在匹配行后添加一行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;/old/a new_line&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在文件 <code>file.txt</code> 中包含 <code>old</code> 的所有行后添加一行 <code>new_line</code>。</p></li><li><p>读取test2的内容，并将其写入到匹配行的下面</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;/^old/r test2&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>将匹配的内容写入test2中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;/old/w test2&#39;</span> file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,21),r={href:"http://linux.51yip.com/search/sed",target:"_blank",rel:"noopener noreferrer"};function u(v,b){const a=e("ExternalLinkIcon");return i(),l("div",null,[o,s("ol",null,[s("li",null,[s("a",r,[d("51yip"),p(a)])])])])}const g=n(c,[["render",u],["__file","sed命令.html.vue"]]);export{g as default};
