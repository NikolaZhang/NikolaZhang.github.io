import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e as p}from"./app.e7c9cb9e.js";const t={},e=p(`<h2 id="\u94FA\u57AB" tabindex="-1"><a class="header-anchor" href="#\u94FA\u57AB" aria-hidden="true">#</a> \u94FA\u57AB</h2><p>HashMap\u4E2D\u5B9A\u4E49\u4E86table\u7528\u4E8E\u5B58\u653E\u952E\u503C\u5BF9, \u5176\u5B9A\u4E49\u4E3A:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u770B\u4E00\u4E0BNode\u7C7B\u578B\u7684\u5B9A\u4E49:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>
    <span class="token class-name">V</span> value<span class="token punctuation">;</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>

    <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5F88\u660E\u663ENode\u662F\u4E00\u4E2A\u94FE\u8868\u7ED3\u6784, \u6BCF\u4E2A\u8282\u70B9\u4E2D\u542B\u6709key, value, \u4EE5\u53CA\u6839\u636Ekey, value\u751F\u6210\u7684hash. next\u662F\u8BE5\u8282\u70B9\u6307\u5411\u7684\u4E0B\u4E00\u4E2A\u8282\u70B9. \u51C6\u786E\u7684\u8BF4\u8FD9\u662F\u4E00\u4E2A\u5355\u5411\u94FE\u8868.</p><p>\u53E6\u5916\u6211\u4EEC\u8FD8\u8981\u63D0\u53CA\u53E6\u4E00\u4E2A\u7C7B\u578BTreeNode</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> parent<span class="token punctuation">;</span>  <span class="token comment">// red-black tree links</span>
    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> left<span class="token punctuation">;</span>
    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> right<span class="token punctuation">;</span>
    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">;</span>    <span class="token comment">// needed to unlink next upon deletion</span>
    <span class="token keyword">boolean</span> red<span class="token punctuation">;</span>
    <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> val<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TreeNode\u662F\u4E00\u4E2A\u7EA2\u9ED1\u6811\u7C7B\u578B. \u8FD9\u91CC\u9700\u8981\u6CE8\u610F\u4E0B\u8FD9\u4E2A\u6784\u9020\u65B9\u6CD5, \u5B9E\u9645\u4E0A\u662F\u7EE7\u627F\u4E86 HashMap\u7684Node, \u4E5F\u5C31\u662F\u590D\u7528\u4E86\u6784\u9020\u94FE\u8868\u7684\u903B\u8F91.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">HashMap<span class="token punctuation">.</span>Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> before<span class="token punctuation">,</span> after<span class="token punctuation">;</span>
    <span class="token class-name">Entry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// super(hash, key, value, next);</span>
<span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="put-\u64CD\u4F5C" tabindex="-1"><a class="header-anchor" href="#put-\u64CD\u4F5C" aria-hidden="true">#</a> put \u64CD\u4F5C</h2><p>\u5411HashMap\u4E2D\u6DFB\u52A0\u4E00\u4E2A\u952E\u503C\u5BF9\u5F88\u7B80\u5355, \u53EA\u9700\u8981put\u64CD\u4F5C. \u4F46\u662Fput\u7684\u6E90\u7801\u5374\u4E0D\u662F\u90A3\u4E48\u7B80\u5355.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u9996\u5148\u5C06\u53C2\u6570key\u54C8\u5E0C, \u4EE3\u7801\u5982\u4E0B:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> h<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5BF9\u5E94\u4E0D\u540C\u7C7B\u578B\u4F1A\u6709\u4E0D\u540C\u7684hash\u7B97\u6CD5, \u6B64\u5904\u5C31\u4E0D\u518D\u8BE6\u8FF0. \u4F46\u662F\u6BCF\u6B21hash\u4E4B\u540E\u4F1A\u5F02\u6216\u53F3\u79FB16\u4F4D, \u6211\u4EEC\u6682\u4E14\u6309\u4E0B\u4E0D\u8868.</p><p>\u5BF9\u4E8E<code>putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict)</code> \u7B80\u5355\u8BF4\u4E0B\u540E\u4E24\u4E2A\u53C2\u6570\u7684\u542B\u4E49.</p><ul><li><code>onlyIfAbsent</code> \u4E3Atrue \u5219\u4E0D\u6539\u53D8\u5DF2\u7ECF\u5B58\u5728\u7684\u503C</li><li><code>evict</code> \u4E3Afalse \u5219table\u4F7F\u7528\u521B\u5EFA\u6A21\u5F0F, \u8FD9\u4E2A\u4E24\u4E2A\u53C2\u6570\u4E4B\u540E\u4F1A\u8FDB\u884C\u8FDB\u4E00\u6B65\u4ECB\u7ECD</li></ul><p><code>putVal</code>\u7684\u5B9E\u73B0\u4E3B\u8981\u662F\u5BF9table\u7684\u64CD\u4F5C, \u5177\u4F53\u4EE3\u7801\u89C1\u4E0B:(\u8FD9\u7BC7\u6587\u7AE0\u6211\u4EEC\u4E3B\u8981\u8BB2\u4E0B\u9762\u8FD9\u6BB5\u4EE3\u7801)</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>
                <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6269\u5BB9resize" tabindex="-1"><a class="header-anchor" href="#\u6269\u5BB9resize" aria-hidden="true">#</a> \u6269\u5BB9resize</h2><p>\u4ECE\u5934\u5F00\u59CB\u5206\u6790</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u65B9\u6CD5\u5165\u53E3\u5BF9table\u662F\u5426\u4E3A\u7A7A\u4EE5\u53CA\u957F\u5EA6\u8FDB\u884C\u5224\u65AD, \u5F53table\u4E3A\u7A7A\u65F6, \u9996\u5148\u8FDB\u884C\u521D\u59CB\u5316table\u7684\u5927\u5C0F. \u8FD9\u91CC\u987A\u5E26\u63D0\u4E00\u53E5, \u5B9E\u4F8B\u5316HashMap\u65F6, \u53EA\u662F\u8BBE\u7F6E\u4E86threshold\u7684\u5927\u5C0F, \u800C\u6CA1\u6709\u521D\u59CB\u5316table.</p><p>\u4E0B\u9762\u8BE6\u7EC6\u8BF4\u4E00\u4E0B<code>resize()</code> \u7684\u5B9E\u73B0\u903B\u8F91:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>
<span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>
<span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">&gt;=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        threshold <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">&amp;&amp;</span>
            oldCap <span class="token operator">&gt;=</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">)</span>
        newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// double threshold</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// initial capacity was placed in threshold</span>
    newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>               <span class="token comment">// zero initial threshold signifies using defaults</span>
    newCap <span class="token operator">=</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">;</span>
    newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_LOAD_FACTOR</span> <span class="token operator">*</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>
    newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">?</span>
            <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6CE8\u610Fresize(), \u4E0D\u662F\u53EA\u6709\u521D\u59CB\u5316\u7684\u65F6\u5019\u8C03\u7528, \u5F53\u5BB9\u91CF\u8FBE\u5230\u9608\u503C\u65F6, HashMap\u4F1A\u8C03\u7528\u8BE5\u65B9\u6CD5\u8FDB\u884C\u6269\u5BB9.</p><p>\u5F53table\u4E3Anull\u65F6, \u5206\u4E24\u79CD\u60C5\u51B5\u8003\u8651:</p><ul><li>\u5982\u679C\u5B9E\u4F8B\u5316\u65F6\u8BBE\u7F6E\u7684threshold&gt;0, \u90A3\u4E48\u5C31\u4F7F\u7528threshold\u53BB\u521D\u59CB\u5316table.</li><li>\u5982\u679C\u5B9E\u4F8B\u5316\u65F6\u8BBE\u7F6E\u7684threshold\u4E3A0, \u90A3\u4E48\u4F7F\u7528\u9ED8\u8BA4\u7684\u5BB9\u91CF\u53BB\u521D\u59CB\u5316table, \u5E76\u4F7F\u7528\u9ED8\u8BA4\u7684\u8D1F\u8F7D\u56E0\u5B50\u548C\u9ED8\u8BA4\u5BB9\u91CF\u53BB\u8BBE\u7F6Ethreshold.</li></ul><p>\u5F53table\u4E0D\u4E3Anull, \u8FD9\u5C31\u662F\u4E4B\u540E\u8FDB\u884C\u6269\u5BB9\u7684\u65F6\u5019\u624D\u4F1A\u8D70\u7684\u903B\u8F91:</p><ul><li>\u5224\u65AD\u5F53\u524D\u7684table\u5BB9\u91CF\u662F\u5426\u8D85\u8FC7\u4E0A\u9650MAXIMUM_CAPACITY, \u5982\u679C\u8D85\u8FC7\u5219threshold\u8BBE\u7F6E\u4E3AInteger.MAX_VALUE, \u5E76\u4E14\u76F4\u63A5\u8FD4\u56DEtable, \u4E0D\u505A\u5904\u7406.</li><li>\u6CA1\u6709\u8D85\u8FC7\u4E0A\u9650\u5219\u5C06\u539F\u6765\u5BB9\u91CF\u6269\u5145\u4E00\u500D, \u5982\u679C\u6269\u5145\u540E\u5BB9\u91CF\u6CA1\u6709\u8D85\u8FC7\u4E0A\u9650\u4E14\u5BB9\u91CF\u5927\u4E8E\u9ED8\u8BA4\u5BB9\u91CF, threshold\u4E5F\u6269\u5145\u4E00\u500D.</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>
<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;rawtypes&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>
table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>
                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// preserve order</span>
                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> newTab<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5BB9\u91CF\u6269\u5145\u4E4B\u540E, \u5B9E\u4F8B\u5316\u4E00\u4E2A\u6700\u65B0\u7684\u5BB9\u91CFNode&lt;K,V&gt; newTab\u6570\u7EC4. \u4E4B\u540E\u5C06\u539F\u6765\u7684\u6570\u636EoldTab, \u653E\u5230\u65B0\u6570\u7EC4\u4E2D. \u4E0B\u9762\u4ECB\u7ECD\u4E00\u4E0B\u5177\u4F53\u7684\u6D41\u7A0B.</p><p>\u904D\u5386oldTab\u4E2D\u6240\u6709\u5143\u7D20, \u5728\u5F53\u524D\u5143\u7D20\u4E0D\u4E3Anull\u7684\u524D\u63D0\u4E0B(\u5982\u679C\u5F53\u524D\u5143\u7D20\u4E3Anull, \u5C31\u4E0D\u7528\u505A\u4EFB\u4F55\u5904\u7406).</p><ol><li>\u5982\u679C\u5F53\u524D\u5143\u7D20\u6CA1\u6709\u5B50\u8282\u70B9, \u5C31\u5C06\u5F53\u671F\u5143\u7D20\u653E\u5230\u65B0\u6570\u7EC4\u7684e.hash &amp; (newCap - 1)\u4F4D\u7F6E\u4E0A. 2.\u5982\u679C\u5F53\u524D\u5143\u7D20\u4E3ATreeNode\u7C7B\u578B. \u5219\u4F7F\u7528split\u65B9\u6CD5\u5BF9\u7EA2\u9ED1\u6811\u8FDB\u884C\u8FDB\u884C\u62C6\u5206</li><li>\u5982\u679C\u4E0D\u662FTreeNode\u7C7B\u578B, \u5219\u8FDB\u884C\u94FE\u8868\u7684\u5904\u7406</li></ol><p>\u4E0B\u9762\u5206\u522B\u5BF92,3\u4E24\u6B65\u8FDB\u884C\u5206\u6790</p><h3 id="\u6811\u7684\u62C6\u5206" tabindex="-1"><a class="header-anchor" href="#\u6811\u7684\u62C6\u5206" aria-hidden="true">#</a> \u6811\u7684\u62C6\u5206</h3><p><code>((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap)</code>\u4E5F\u662F\u975E\u5E38\u503C\u5F97\u4E00\u8BF4\u7684:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> bit<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>prev <span class="token operator">=</span> loTail<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>
    loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>
    <span class="token operator">++</span>lc<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>prev <span class="token operator">=</span> hiTail<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>
    hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>
    <span class="token operator">++</span>hc<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4EE3\u7801\u903B\u8F91\u89C1\u4E0B:</p><ol><li>\u5F53\u524Dnode\u8D4B\u503Ce, \u5B50\u8282\u70B9\u8D4B\u503Cnext</li><li>\u53BB\u9664\u5F53\u524Dnode\u4E0B\u7684\u5B50\u8282\u70B9</li><li>\u5224\u65AD(e.hash &amp; bit) == 0, \u5E76\u5206\u5206\u522B\u8FDB\u884C\u5904\u7406</li></ol><p>\u4E0B\u9762\u6211\u4EEC\u8BE6\u7EC6\u8BF4\u4E00\u4E0B<code>e.hash &amp; bit</code>:</p><p>bit\u662F\u539F\u6765hashmap\u7684\u5BB9\u91CF, \u8FD9\u4E2A\u5224\u65AD\u6807\u51C6<code>e.hash &amp; bit</code>\u5B9E\u9645\u4E0A\u662F\u4E3A\u4E86\u5C06\u8282\u70B9\u5206\u6563\u5230\u65B0\u6570\u7EC4\u7684\u540E\u65B9\u533A\u57DF\u548C\u524D\u65B9\u533A\u57DF(\u5176\u7D22\u5F15\u548C\u539F\u6765\u7684\u6570\u7EC4\u7A7A\u95F4\u7D22\u5F15\u76F8\u540C).</p><p>\u56E0\u4E3A, \u4E00\u822C\u60C5\u51B5\u4E0B\u4E00\u6B21\u6269\u5BB9\u4E4B\u540E\u65B0\u7684\u5BB9\u91CF\u662F\u539F\u6765\u7684\u5BB9\u91CF\u76842\u500D, \u5F53\u62F7\u8D1D\u539F\u6765\u7684\u6570\u636E\u5230\u65B0\u7684\u7A7A\u95F4\u7684\u65F6\u5019\u4E3A\u4E86\u4F18\u5316\u6027\u80FD, \u6216\u8005\u63D0\u9AD8\u7A7A\u95F4\u5360\u7528\u7387. \u539F\u6765\u7684\u6570\u636E\u5728\u65B0\u7A7A\u95F4\u4E2D\u8D8A\u5206\u6563\u662F\u8D8A\u597D\u7684. \u6027\u80FD\u4F18\u5316\u7684\u63D0\u73B0\u5C31\u662F\u5982\u679C\u539F\u6709\u7A7A\u95F4\u7684\u6811\u5C42\u7EA7\u8F83\u9AD8, \u90A3\u4E48\u67E5\u8BE2\u80AF\u5B9A\u662F\u8017\u65F6\u7684. \u5C06\u539F\u6765\u7684\u6811\u8FDB\u884C\u62C6\u5206,\u5C06\u539F\u6765\u7684\u8282\u70B9\u653E\u5230\u65B0\u7684\u6570\u7EC4\u4F4D\u7F6E\u4E0A, \u4E00\u65B9\u9762\u53EF\u80FD\u4F7F\u7528\u65B0\u62D3\u5C55\u7684\u7A7A\u95F4\u4F4D\u7F6E, \u53E6\u4E00\u65B9\u9762\u51CF\u5C11\u4E86\u539F\u6765\u6811\u7684\u5C42\u7EA7, \u67E5\u8BE2\u6548\u7387\u81EA\u7136\u63D0\u5347. \u6CE8\u610F\u6811\u964D\u7EA7\u4E4B\u540E\u6709\u53EF\u80FD\u4F1A\u53D8\u6210\u94FE\u8868.</p><p>\u91CC\u9762\u5D4C\u5957\u7684\u6761\u4EF6, \u9996\u5148\u5F53\u662F\u4E00\u4E2A\u6811\u7684\u9876\u70B9\u65F6\u8981\u8BB0\u5F55head, \u56E0\u6B64\u5C31\u9700\u8981\u591A\u5B9A\u4E49\u4E00\u4E2AloHead, hiHead. \u867D\u7136\u5230\u76EE\u524D\u4E3A\u6B62\u6211\u4EEC\u770B\u4E0D\u5230\u8BB0\u5F55head\u7684\u6709\u4EC0\u4E48\u7528. \u8FD9\u91CC\u7684lo\u548Chi\u8868\u793A\u7684\u662F\u5206\u6563\u5230\u524D\u65B9\u533A\u57DF\u548C\u540E\u65B9\u533A\u57DF.(loHead, hiHead\u662F\u65B0\u751F\u6210\u7684\u4E24\u4E2A\u94FE\u8868\u7684\u8D77\u59CB)</p><p>loTail\u548ChiTail\u624D\u662F\u771F\u6B63\u7528\u4E8E\u4E4B\u540E\u91CD\u6784\u7684\u5BF9\u8C61. \u6570\u636E\u91CD\u6784\u4E4B\u540E\u7684\u7ED3\u679C\u65E0\u975E\u4E24\u79CD\u94FE\u8868\u548C\u6811. \u6CE8\u610F\u8FD9\u5757if\u7684\u64CD\u4F5C\u53EA\u662F\u628A\u539F\u6765\u7684\u6811\u53D8\u6210\u4E86\u4E24\u4E2A\u94FE\u8868(\u867D\u7136\u547D\u540D\u662FTreeNode\u4F46\u662F\u53EA\u4F7F\u7528\u4E86next\u548Cprev). \u5E76\u4E14\u4F7F\u7528lc\u548Chc\u5206\u522B\u8BB0\u5F55\u62C6\u5206\u5230\u524D\u65B9\u548C\u540E\u65B9\u7684\u8282\u70B9\u6570. \u800C\u8FD9\u4E24\u4E2A\u53D8\u91CF\u7684\u4F5C\u7528\u5C31\u662F\u5224\u65AD\u662F\u5426\u8FBE\u5230\u8F6C\u6362\u4E3A\u6811\u7684\u9608\u503CUNTREEIFY_THRESHOLD.</p><p>\u5F88\u660E\u663E, \u6BCF\u4E00\u4E2A\u8282\u70B9\u7684<code>hash &amp; bit</code>\u8981\u4E48\u662F\u7B49\u4E8E0\u8981\u4E48\u7B49\u4E8E1. \u5F53\u7B49\u4E8E0\u65F6, \u5982\u679C\u662F\u7B2C\u4E00\u6B21\u51FA\u73B0\u5C31\u9700\u8981\u8BB0\u5F55\u4E3A\u9876\u7EA7\u8282\u70B9loHead\u548CloTail, \u5F53\u4E4B\u540E\u51FA\u73B0\u7B49\u4E8E0\u7684\u65F6\u5019, \u5C31\u628A\u5F53\u524D\u8282\u70B9\u4F5C\u4E3AhiTail\u7684\u5B50\u8282\u70B9; \u5F53\u4E0D\u7B49\u4E8E0\u65F6\u4EA6\u7136. \u56E0\u6B64\u4E0A\u9762\u7684\u4EE3\u7801\u5757\u6267\u884C\u4E4B\u540E\u6211\u4EEC\u5C31\u5F97\u5230\u4E86\u4E24\u4E2A\u94FE\u8868.</p><p>\u4E0B\u9762\u7684\u4EE3\u7801\u5C31\u5F88\u7B80\u5355\u4E86, \u5206\u522B\u5224\u65AD\u4E24\u4E2A\u94FE\u8868\u957F\u5EA6\u662F\u5426\u8FBE\u5230\u6811\u5316\u9608\u503C.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>loHead <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lc <span class="token operator">&lt;=</span> <span class="token constant">UNTREEIFY_THRESHOLD</span><span class="token punctuation">)</span>
        tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">.</span><span class="token function">untreeify</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hiHead <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// (else is already treeified)</span>
            loHead<span class="token punctuation">.</span><span class="token function">treeify</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>hiHead <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hc <span class="token operator">&lt;=</span> <span class="token constant">UNTREEIFY_THRESHOLD</span><span class="token punctuation">)</span>
        tab<span class="token punctuation">[</span>index <span class="token operator">+</span> bit<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">.</span><span class="token function">untreeify</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        tab<span class="token punctuation">[</span>index <span class="token operator">+</span> bit<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>loHead <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            hiHead<span class="token punctuation">.</span><span class="token function">treeify</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u770B\u5230\u8FD9\u91CC\u6216\u8BB8\u4F60\u5DF2\u7ECF\u660E\u767D\u4E86loHead\u548ChiHead\u7684\u4F5C\u7528, \u5C31\u662F\u4E3A\u4E86\u4FBF\u4E8E\u627E\u5230\u5934\u8282\u70B9, \u5C31\u76EE\u524D\u751F\u6210\u7684loTail, hiTail\u5355\u5411\u94FE\u8868\u6211\u4EEC\u662F\u65E0\u6CD5\u4ECE\u6700\u540E\u7684\u8282\u70B9\u63A8\u51FA\u5934\u8282\u70B9\u7684.</p><p>\u5982\u679C\u94FE\u8868\u957F\u5EA6\u6CA1\u6709\u8D85\u8FC7UNTREEIFY_THRESHOLD, \u5219\u5C06\u6811\u8282\u70B9\u8F6C\u5316\u4E3A\u94FE\u8868\u8282\u70B9 \u8D85\u8FC7UNTREEIFY_THRESHOLD, \u5219\u8F6C\u5316\u4E3A\u7EA2\u9ED1\u6811. \u5177\u4F53\u7684\u6D41\u7A0B\u4E4B\u540E\u5728\u8FDB\u884C\u89E3\u8BF4.</p><h3 id="\u5904\u7406\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#\u5904\u7406\u94FE\u8868" aria-hidden="true">#</a> \u5904\u7406\u94FE\u8868</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> loHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> loTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> hiHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> hiTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>
<span class="token keyword">do</span> <span class="token punctuation">{</span>
    next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>
        loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>
        hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u76F8\u4FE1\u770B\u5B8C\u4E0A\u4E00\u8282\u62C6\u5206\u7EA2\u9ED1\u6811\u7684\u5206\u6790\u4E4B\u540E, \u8FD9\u6BB5\u4EE3\u7801\u5E94\u8BE5\u4E0D\u96BE\u7406\u89E3: \u540C\u6837\u662F\u4EE5<code>e.hash &amp; oldCap</code>\u4F5C\u4E3A\u6761\u4EF6\u5C06\u539F\u6709\u7684\u94FE\u8868\u5206\u4E3AloTail\u548ChiTail. \u6700\u540E\u5C06\u8FD9\u4E24\u4E2A\u94FE\u8868\u5206\u522B\u653E\u5230\u65B0\u6570\u7EC4\u7684newTab[j]\u548CnewTab[j + oldCap]\u4E0A.\u5F53\u7136\u653E\u7F6E\u7684\u65F6\u5019, \u8981\u653E\u7F6E\u5934\u8282\u70B9loHead\u548ChiHead.</p><h2 id="end" tabindex="-1"><a class="header-anchor" href="#end" aria-hidden="true">#</a> end</h2><p>\u8FD9\u4E00\u7BC7\u4E3B\u8981\u8BB2\u4E86HashMap\u6269\u5BB9\u7684\u64CD\u4F5C, \u51E0\u4E4E\u5168\u90E8\u662F\u5BF9resize\u65B9\u6CD5\u7684\u8BB2\u89E3. \u4E0B\u4E00\u7BC7\u6587\u7AE0\u4F1A\u7EE7\u7EED\u4ECB\u7ECDputVal\u65B9\u6CD5</p>`,56),o=[e];function c(l,u){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","\u6E90\u7801\u5206\u6790[2]HashMap\u7684\u6269\u5BB9.html.vue"]]);export{r as default};
