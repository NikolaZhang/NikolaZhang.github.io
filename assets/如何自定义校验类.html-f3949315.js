import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-6ae140a2.js";const p={},e=t(`<blockquote><p>HashMap节点删除, 我打算拖一下, 因为红黑树删除那一块搞起来, 又要画图又要举例子, 还是挺费事的. 这篇就水一下, 讲一下自定义校验的方法. 一般情况下, 用户提交的表单数据的校验往往是逻辑相关的, 如果我输入的年龄为20, 但是身份证出生日和这个年龄不符那么这种情况下似乎不能使用已有注解进行校验. 公司很多代码都是写在接口, 或者业务层进行校验. 这好吗? 肯定是不好啊. 况且springboot支持自定义校验注解.</p></blockquote><h2 id="校验一个表单对象" tabindex="-1"><a class="header-anchor" href="#校验一个表单对象" aria-hidden="true">#</a> 校验一个表单对象</h2><p>通常我们校验一个表单会加上如下的一些注解, <code>@NotBlank, @Min, @NotNull</code>等等. 但是这些属性都是单独校验的, 彼此之间没有关系. 虽然这已经解决了大部分的校验问题. 但是单独依靠工具提供的校验注解, 总是有捉襟见肘的时候.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfoForm</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;叫撒子&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;年龄值不能小于0&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;年龄值过大, 还想再活500年&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;不是男人就是娘炮, 选一个&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> man<span class="token punctuation">;</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义一个注解" tabindex="-1"><a class="header-anchor" href="#自定义一个注解" aria-hidden="true">#</a> 自定义一个注解</h2><p>我们可以参考@NotBlank去定义一个我们自己的校验注解.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Constraint</span><span class="token punctuation">(</span>validatedBy <span class="token operator">=</span> <span class="token class-name">UserInfoFormValidator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">UserInfoFormValidate</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">groups</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Payload</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义这样一个自定义注解必须要包含以下内容:</p><ol><li>message 这个是校验规则触发对应的消息</li><li>groups 指明在什么条件下触发</li><li>payload 允许定义要通过此验证传递的有效负载 (这个不是很清楚作用是什么)</li><li>Constraint这个注解用于指明实际实现校验逻辑的类, 注意这个类要实现ConstraintValidator接口</li></ol><p>Target这里我指明该注解用于类型上.</p><p>注意这个注解要加载<code>UserInfoForm</code>上</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@UserInfoFormValidate</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfoForm</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="校验逻辑" tabindex="-1"><a class="header-anchor" href="#校验逻辑" aria-hidden="true">#</a> 校验逻辑</h2><p><code>UserInfoFormValidator</code>具体的校验逻辑如下:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfoFormValidator</span> <span class="token keyword">implements</span> <span class="token class-name">ConstraintValidator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInfoFormValidate</span><span class="token punctuation">,</span> <span class="token class-name">UserInfoForm</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">UserInfoForm</span> userInfoForm<span class="token punctuation">,</span> <span class="token class-name">ConstraintValidatorContext</span> constraintValidatorContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>userInfoForm<span class="token punctuation">.</span><span class="token function">getMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> userInfoForm<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            constraintValidatorContext<span class="token punctuation">.</span><span class="token function">buildConstraintViolationWithTemplate</span><span class="token punctuation">(</span><span class="token string">&quot;年龄小于20岁不是男人.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addConstraintViolation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token class-name">UserInfoFormValidate</span> constraintAnnotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>constraintValidatorContext.buildConstraintViolationWithTemplate</code>设置isValid为false的情况下的message. 如果校验通过直接返回true.</p><h2 id="controller接口" tabindex="-1"><a class="header-anchor" href="#controller接口" aria-hidden="true">#</a> controller接口</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token annotation punctuation">@Valid</span> <span class="token class-name">UserInfoForm</span> userInfoForm<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;表单数据: {}&quot;</span><span class="token punctuation">,</span> userInfoForm<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这些还不够, 为了更友好的返回给前端提示, 因此我们需要使用<code>@ControllerAdvice</code>对参数校验异常进行处理. 这里的方法可以参考下面的代码片段, 设计具体实现就不在详述.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestControllerAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionCatchConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">BaseResponse</span> <span class="token function">methodArgumentNotValidExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BaseResponse</span><span class="token punctuation">.</span><span class="token function">buildValidFail</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="验证" tabindex="-1"><a class="header-anchor" href="#验证" aria-hidden="true">#</a> 验证</h2><ol><li>单个属性的校验 比如username输入为空返回消息提示为: <img src="https://tech.nikolazhang.top/2020-01-24-15-57-25.png" alt="2020-01-24-15-57-25"></li><li>表单实体的验证 当输入年龄为10, man为true, 则返回提示消息为: <img src="https://tech.nikolazhang.top/2020-01-24-17-33-26.png" alt="2020-01-24-17-33-26"></li></ol><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><p>以上的方法还不足以让校验按照我们想要的顺序进行(先按照单个参数进行校验, 之后进行相关逻辑校验)</p><p>如果man参数前端没有传过来, 由于先进行表单类的就会导致空指针出现. <img src="https://tech.nikolazhang.top/2020-01-24-17-38-38.png" alt="2020-01-24-17-38-38"></p><p>这个时候有两种处理方式:</p><p>1.所有校验都在自定义校验类中进行处理. 2.指定校验顺序. 其实我推荐使用第一种方法进行校验.</p><p>因为这样代码结构比较清晰. 相反第二方式, 如果你忽略了某个属性的校验, 很容易导致NPE.</p><p>但是第二种方式还是要提及一下的.</p><p>下面我们还是以上面的为例, 探讨如何解决这个空指针问题.</p><h3 id="groups" tabindex="-1"><a class="header-anchor" href="#groups" aria-hidden="true">#</a> groups</h3><p>先回头看一下自定义注解中的groups. 另外补充一个注解<code>GroupSequence</code>这个注解可以用于定义字段的校验顺序</p><p>我们先定义几个接口, 用来表示校验的顺序, 接口可以随意定义.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SingleGroup</span> <span class="token punctuation">{</span>
    <span class="token keyword">interface</span> <span class="token class-name">First</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">interface</span> <span class="token class-name">Second</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">interface</span> <span class="token class-name">Third</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ComplexGroup</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面看一下具体的使用方法. 在需要进行先进行校验的属性上添加<code>@GroupSequence</code>中顺序在前的属性, 可以参考如下示例.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> NikolaZhang
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@GroupSequence</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">SingleGroup<span class="token punctuation">.</span>First</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">SingleGroup<span class="token punctuation">.</span>Second</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ComplexGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">UserInfoForm</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@UserInfoFormValidate</span><span class="token punctuation">(</span>groups <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">ComplexGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfoForm</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;叫撒子&quot;</span><span class="token punctuation">,</span> groups <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">SingleGroup<span class="token punctuation">.</span>Second</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;年龄值不能小于0&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;年龄值过大, 还想再活500年&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;不是男人就是娘炮, 选一个&quot;</span><span class="token punctuation">,</span> groups <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">SingleGroup<span class="token punctuation">.</span>First</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> man<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新调用接口结果如下: <img src="https://tech.nikolazhang.top/2020-01-24-21-25-25.png" alt="2020-01-24-21-25-25"></p><p>问题解决.</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>这一节介绍了如何使用自定义注解进行表单中相关逻辑字段的校验. 以及如何通过groups控制校验的顺序.</p>`,40),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","如何自定义校验类.html.vue"]]);export{k as default};
