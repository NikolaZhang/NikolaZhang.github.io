const n=JSON.parse('{"key":"v-51de6256","path":"/posts/hashmap/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90_3_HashMap%E7%9A%84%E5%AD%98%E5%8F%96.html","title":"源码分析[3] HashMap的存取","lang":"en-US","frontmatter":{"isOriginal":true,"title":"源码分析[3] HashMap的存取","mathjax":true,"tag":["hashmap","put方法"],"category":"源码","date":"2020-01-09T00:00:00.000Z","description":"继续分析put","image":"http://image.nikolazhang.top/d8c686dbd6af4697619c11fc042f232d.jpg","sticky":false,"timeline":true,"article":true,"star":false,"head":[["meta",{"property":"og:url","content":"https://nikolazhang.github.io/posts/hashmap/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90_3_HashMap%E7%9A%84%E5%AD%98%E5%8F%96.html"}],["meta",{"property":"og:title","content":"源码分析[3] HashMap的存取"}],["meta",{"property":"og:description","content":"继续分析put"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-06-08T15:09:36.000Z"}],["meta",{"property":"article:author","content":"我小叮当、"}],["meta",{"property":"article:tag","content":"hashmap"}],["meta",{"property":"article:tag","content":"put方法"}],["meta",{"property":"article:published_time","content":"2020-01-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-08T15:09:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"源码分析[3] HashMap的存取\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-01-09T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-08T15:09:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"我小叮当、\\",\\"url\\":\\"https://nikolazhang.github.io\\"}]}"]]},"headers":[{"level":2,"title":"存取方法","slug":"存取方法","link":"#存取方法","children":[]},{"level":2,"title":"各安天命","slug":"各安天命","link":"#各安天命","children":[]},{"level":2,"title":"end","slug":"end","link":"#end","children":[]}],"git":{"createdTime":1686236976000,"updatedTime":1686236976000,"contributors":[{"name":"nikola","email":"nikolazhang@163.com","commits":1}]},"readingTime":{"minutes":3.05,"words":914},"filePathRelative":"posts/hashmap/源码分析[3]HashMap的存取.md","localizedDate":"January 9, 2020","excerpt":"<blockquote>\\n<p>续上节, 当hashmap为空或者table长度为0时, 会进行扩容. 这一节分析单hashmap中含有值的情况</p>\\n</blockquote>\\n<h2> 存取方法</h2>\\n<p>下面的代码实现了对输入键值对的存储</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>p <span class=\\"token operator\\">=</span> tab<span class=\\"token punctuation\\">[</span>i <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>n <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&amp;</span> hash<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n    tab<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">newNode</span><span class=\\"token punctuation\\">(</span>hash<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">Node</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> e<span class=\\"token punctuation\\">;</span> <span class=\\"token class-name\\">K</span> k<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">.</span>hash <span class=\\"token operator\\">==</span> hash <span class=\\"token operator\\">&amp;&amp;</span>\\n        <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>k <span class=\\"token operator\\">=</span> p<span class=\\"token punctuation\\">.</span>key<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> key <span class=\\"token operator\\">||</span> <span class=\\"token punctuation\\">(</span>key <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">&amp;&amp;</span> key<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">equals</span><span class=\\"token punctuation\\">(</span>k<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        e <span class=\\"token operator\\">=</span> p<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>p <span class=\\"token keyword\\">instanceof</span> <span class=\\"token class-name\\">TreeNode</span><span class=\\"token punctuation\\">)</span>\\n        e <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">TreeNode</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">)</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">putTreeVal</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span> tab<span class=\\"token punctuation\\">,</span> hash<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> binCount <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>binCount<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>e <span class=\\"token operator\\">=</span> p<span class=\\"token punctuation\\">.</span>next<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                p<span class=\\"token punctuation\\">.</span>next <span class=\\"token operator\\">=</span> <span class=\\"token function\\">newNode</span><span class=\\"token punctuation\\">(</span>hash<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>binCount <span class=\\"token operator\\">&gt;=</span> <span class=\\"token constant\\">TREEIFY_THRESHOLD</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// -1 for 1st</span>\\n                    <span class=\\"token function\\">treeifyBin</span><span class=\\"token punctuation\\">(</span>tab<span class=\\"token punctuation\\">,</span> hash<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">.</span>hash <span class=\\"token operator\\">==</span> hash <span class=\\"token operator\\">&amp;&amp;</span>\\n                <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>k <span class=\\"token operator\\">=</span> e<span class=\\"token punctuation\\">.</span>key<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> key <span class=\\"token operator\\">||</span> <span class=\\"token punctuation\\">(</span>key <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">&amp;&amp;</span> key<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">equals</span><span class=\\"token punctuation\\">(</span>k<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n            p <span class=\\"token operator\\">=</span> e<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>e <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">// existing mapping for key</span>\\n        <span class=\\"token class-name\\">V</span> oldValue <span class=\\"token operator\\">=</span> e<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>onlyIfAbsent <span class=\\"token operator\\">||</span> oldValue <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n            e<span class=\\"token punctuation\\">.</span>value <span class=\\"token operator\\">=</span> value<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">afterNodeAccess</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> oldValue<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{n as data};
