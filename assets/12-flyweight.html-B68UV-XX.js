import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-Cminz_GF.js";const e={},p=t(`<blockquote><p>享元模式可以通过共享对象减少系统中低等级的、详细的对象数目。如果一个类实例包含用来互换使用的相同信息，该模式允许程序通过共享一个接口来避免使用多个具有相同信息的类实例所带来的开销。</p></blockquote><p><img src="https://raw.githubusercontent.com/NikolaZhang/image-blog/main/12-flyweight/20240121112418.png" alt="20240121112418"></p><p>主要角色：</p><ol><li>抽象享元（Flyweight）角色：<br> 这通常是一个接口或抽象类，定义了具体享元类公共的方法和内部状态（Intrinsic State）的访问方式。<br> 内部状态是存储在享元对象内部，并且在整个系统中可以被多个享元对象共享的状态。<br> 抽象享元角色也可能提供一个方法来接收外部状态（Extrinsic State），外部状态是不能被共享的，它依赖于具体的使用场景。</li><li>具体享元（Concrete Flyweight）角色：<br> 实现抽象享元角色所定义的接口，为内部状态提供了存储空间，并实现了相应的操作。<br> 具体享元对象是可共享的，系统中对于具有相同内部状态的对象只创建一个实例。<br> 通常结合单例模式或其他机制来确保同一内部状态对应的具体享元只有一个实例。</li><li>享元工厂（Flyweight Factory）角色：<br> 负责创建和管理享元对象，客户端不直接创建具体享元对象，而是通过享元工厂获取。<br> 工厂会根据需要重用已有的享元对象，或者在没有可用享元对象时才创建新的实例。</li><li>客户端（Flyweight Client）角色：<br> 客户端并不直接操作具体享元对象，而是通过抽象享元接口与享元对象交互，并向享元对象传入外部状态。</li></ol><div class="hint-container info"><p class="hint-container-title">信息</p><p>通过这种设计，当系统中有大量相似对象时，可以通过享元模式大大节省内存消耗并提高程序性能。例如，在抢火车票的例子中，每种座位类别（如硬座、软座、硬卧等）可以作为一个具体享元类，它们共享诸如起始站、终点站和价格等不变的内部状态，而购买者的个人信息则作为外部状态由客户端在请求时传入。</p></div><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h2><h3 id="抽象享元" tabindex="-1"><a class="header-anchor" href="#抽象享元" aria-hidden="true">#</a> 抽象享元</h3><p>抽象享元定义了传入外部状态的方法。如果子类之间的内部状态是不互通的，可以将内部状态定义到子类中。建议是有一个通用的状态，并且这个状态是可以通过工厂定位到唯一的实例的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Flyweight</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token class-name">String</span> extrinsicState<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="具体享元" tabindex="-1"><a class="header-anchor" href="#具体享元" aria-hidden="true">#</a> 具体享元</h3><p>具体享元实现了抽象享元中的抽象行为，并且存储了内部状态。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteFlyweight</span> <span class="token keyword">extends</span> <span class="token class-name">Flyweight</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> intrisicState<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ConcreteFlyweight</span><span class="token punctuation">(</span><span class="token class-name">String</span> intrisicState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>intrisicState <span class="token operator">=</span> intrisicState<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token class-name">String</span> extrinsicState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ConcreteFlyweight operation, extrinsicState:&quot;</span> <span class="token operator">+</span> extrinsicState<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后我们仿照上面的代码定义<code>UnshareConcreteFlyweight</code>。</p><h3 id="享元工厂" tabindex="-1"><a class="header-anchor" href="#享元工厂" aria-hidden="true">#</a> 享元工厂</h3><p>享元工厂是享元对象的工厂，它负责创建和管理享元对象，享元工厂是单例模式。如果不存在享元则创建一个新的享元对象；否则直接从内存中获取。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlyweightFactory</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Flyweight</span><span class="token punctuation">&gt;</span></span> flyweights <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Flyweight</span> <span class="token function">getConcreteFlyweight</span><span class="token punctuation">(</span><span class="token class-name">String</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flyweights<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            flyweights<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteFlyweight</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> flyweights<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="客户端" tabindex="-1"><a class="header-anchor" href="#客户端" aria-hidden="true">#</a> 客户端</h3><p>客户端通过享元工厂获取具体享元对象，并传入外部状态。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlyweightClient</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Flyweight</span> flyweight1 <span class="token operator">=</span> <span class="token class-name">FlyweightFactory</span><span class="token punctuation">.</span><span class="token function">getConcreteFlyweight</span><span class="token punctuation">(</span><span class="token string">&quot;state1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        flyweight1<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token string">&quot;state1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),c=[p];function i(l,o){return s(),a("div",null,c)}const d=n(e,[["render",i],["__file","12-flyweight.html.vue"]]);export{d as default};
