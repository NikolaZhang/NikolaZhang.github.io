import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as l,c as p,a as t,d as n,b as a,e as i}from"./app-UtHoJJor.js";const r={},d=t("h2",{id:"基本操作",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#基本操作","aria-hidden":"true"},"#"),n(" 基本操作")],-1),c={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/elasticsearch-intro.html",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html",target:"_blank",rel:"noopener noreferrer"},h=i(`<h3 id="插入" tabindex="-1"><a class="header-anchor" href="#插入" aria-hidden="true">#</a> 插入</h3><p>通过做一个公司和员工的案例来熟悉基本的一些操作.<br> 向公司(megacorp)中添加id为1的员工(employee)</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>PUT /megacorp/employee/<span class="token number">1</span>
<span class="token punctuation">{</span>
    <span class="token property">&quot;first_name&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;last_name&quot;</span> <span class="token operator">:</span>  <span class="token string">&quot;Smith&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;age&quot;</span> <span class="token operator">:</span>        <span class="token number">25</span><span class="token punctuation">,</span>
    <span class="token property">&quot;about&quot;</span> <span class="token operator">:</span>      <span class="token string">&quot;I love to go rock climbing&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;interests&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;sports&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;music&quot;</span> <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此处的<code>megacorp</code>就是一个索引. <code>employee</code>为一个类型.<br> body中的json就是一个当前员工信息的文档. 其中的每一个属性即一个字段.</p><p>将上面的命令复制, 粘贴到kibana, 执行:<br><img src="https://tech.nikolazhang.top/2020-02-01-13-24-00.png" alt="2020-02-01-13-24-00"></p><p>之后插入更多数据.</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>PUT /megacorp/employee/<span class="token number">2</span>
<span class="token punctuation">{</span>
    <span class="token property">&quot;first_name&quot;</span> <span class="token operator">:</span>  <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;last_name&quot;</span> <span class="token operator">:</span>   <span class="token string">&quot;Smith&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;age&quot;</span> <span class="token operator">:</span>         <span class="token number">32</span><span class="token punctuation">,</span>
    <span class="token property">&quot;about&quot;</span> <span class="token operator">:</span>       <span class="token string">&quot;I like to collect rock albums&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;interests&quot;</span><span class="token operator">:</span>  <span class="token punctuation">[</span> <span class="token string">&quot;music&quot;</span> <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

PUT /megacorp/employee/<span class="token number">3</span>
<span class="token punctuation">{</span>
    <span class="token property">&quot;first_name&quot;</span> <span class="token operator">:</span>  <span class="token string">&quot;Douglas&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;last_name&quot;</span> <span class="token operator">:</span>   <span class="token string">&quot;Fir&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;age&quot;</span> <span class="token operator">:</span>         <span class="token number">35</span><span class="token punctuation">,</span>
    <span class="token property">&quot;about&quot;</span><span class="token operator">:</span>        <span class="token string">&quot;I like to build cabinets&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;interests&quot;</span><span class="token operator">:</span>  <span class="token punctuation">[</span> <span class="token string">&quot;forestry&quot;</span> <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行查询命令:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /megacorp/_search
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://tech.nikolazhang.top/2020-02-01-13-27-30.png" alt="2020-02-01-13-27-30"></p><h4 id="why-put" tabindex="-1"><a class="header-anchor" href="#why-put" aria-hidden="true">#</a> why PUT</h4><p>为什么上面讲的例子插入都是使用PUT而不是POST. 这明显不restful啊.<br><img src="https://tech.nikolazhang.top/2020-02-02-20-43-38.png" alt="2020-02-02-20-43-38"></p><p>当我们使用put方法进行请求指定id, 然而在查询之前我们并不知道这个id是不是已经存在了, 如果没有存在则是创建模式(<code>result</code>字段值为<code>created</code>), 否则为更新(<code>result</code>字段值为<code>updated</code>). 为了保证为创建模式有以下方法创建:</p><ol><li><p>使用POST方法, 让es自动生成唯一id. 通过下图你可以发现PUT和POST的不同.<br><img src="https://tech.nikolazhang.top/2020-02-01-20-33-47.png" alt="2020-02-01-20-33-47"><br> 使用post方式生成的id, 长度为20个字符, URL安全, base64编码, GUID, 分布式系统并行生成时不可能会发生冲突</p></li><li><p>使用PUT, 通过添加<code>?op_type=create</code>或者<code>_create</code>来进行控制, 如果已经存在则响应409.<br><img src="https://tech.nikolazhang.top/2020-02-01-20-47-53.png" alt="2020-02-01-20-47-53"></p></li></ol><h4 id="文档的结构" tabindex="-1"><a class="header-anchor" href="#文档的结构" aria-hidden="true">#</a> 文档的结构</h4><p>每个文档都含有元数据(描述数据的数据)字段, 有些元数据是可以在创建时自定义的, 诸如: <code>_index</code>, <code>_type</code>, <code>_id</code>.</p><h5 id="文档源元字段" tabindex="-1"><a class="header-anchor" href="#文档源元字段" aria-hidden="true">#</a> 文档源元字段</h5><p><code>_source</code>: 表示的是文档的json序列化.<br><code>_size</code>: 表示<code>_source</code>的比特值. 由<code>mapper-size</code>插件提供</p><h5 id="索引元字段" tabindex="-1"><a class="header-anchor" href="#索引元字段" aria-hidden="true">#</a> 索引元字段</h5><p><code>_field_names</code>:<br> All fields in the document which contain non-null values.<br><code>_ignored</code>:<br> All fields in the document that have been ignored at index time because of ignore_malformed.</p><h5 id="路由元字段" tabindex="-1"><a class="header-anchor" href="#路由元字段" aria-hidden="true">#</a> 路由元字段</h5><p><code>_routing</code><br> A custom routing value which routes a document to a particular shard.</p><h5 id="其他元字段" tabindex="-1"><a class="header-anchor" href="#其他元字段" aria-hidden="true">#</a> 其他元字段</h5><p><code>_meta</code><br> Application specific metadata.</p><h2 id="映射" tabindex="-1"><a class="header-anchor" href="#映射" aria-hidden="true">#</a> 映射</h2><p>映射是定义一个文档包含哪些字段, 以及如何存储和索引的过程.</p><p>当我们使用传统数据库的时候, 创建一个表时, 需要指定表中字段的类型. 不知道你是否有这个疑问: 当我们插入一个文档的时候, 似乎并没有指定文档中的字段类型啊. 其实es的文档中的字段是有类型的, 只是当我们不指定字段类型的时候, 会给我们自动进行类型的匹配. 当然你可以给字段指定类型, 这就是映射.</p><h3 id="字段数据类型" tabindex="-1"><a class="header-anchor" href="#字段数据类型" aria-hidden="true">#</a> 字段数据类型</h3><p>主要的数据类型有以下几种:</p><table><thead><tr><th style="text-align:left;">数据类型</th><th style="text-align:left;">关键字/说明</th></tr></thead><tbody><tr><td style="text-align:left;">核心数据类型</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">string</td><td style="text-align:left;">text, keyword</td></tr><tr><td style="text-align:left;">Numeric</td><td style="text-align:left;">long, integer, short, byte, double, float, half_float, scaled_float</td></tr><tr><td style="text-align:left;">Date</td><td style="text-align:left;">date</td></tr><tr><td style="text-align:left;">Date nanoseconds</td><td style="text-align:left;">date_nanos</td></tr><tr><td style="text-align:left;">Boolean</td><td style="text-align:left;">boolean</td></tr><tr><td style="text-align:left;">Binary</td><td style="text-align:left;">binary</td></tr><tr><td style="text-align:left;">Range</td><td style="text-align:left;">integer_range, float_range, long_range, double_range, date_range</td></tr><tr><td style="text-align:left;">复杂数据类型</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">Object</td><td style="text-align:left;"><code>object</code> for single JSON objects</td></tr><tr><td style="text-align:left;">Nested</td><td style="text-align:left;"><code>nested</code> for arrays of JSON objects</td></tr><tr><td style="text-align:left;">地理数据类型</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">Geo-point</td><td style="text-align:left;"><code>geo_point</code> 用于经纬度定位</td></tr><tr><td style="text-align:left;">Geo-shape</td><td style="text-align:left;"><code>geo_shape</code> 用于像多边形这种复杂形状</td></tr><tr><td style="text-align:left;">专用数据类型</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">IP</td><td style="text-align:left;"><code>ip</code> for IPv4 and IPv6 addresses</td></tr><tr><td style="text-align:left;">Completion datatype</td><td style="text-align:left;"><code>completion</code> 提供自动完成的建议</td></tr><tr><td style="text-align:left;">Token count</td><td style="text-align:left;"><code>token_count</code> 计算字符串中标识数量</td></tr><tr><td style="text-align:left;">mapper-murmur3</td><td style="text-align:left;"><code>murmur3</code> 在索引时计算值的hash并存储在索引中</td></tr><tr><td style="text-align:left;">mapper-annotated-text</td><td style="text-align:left;"><code>annotated-text</code> 索引包含特殊标记的文本(通常用于标记命名实体)</td></tr><tr><td style="text-align:left;">Percolator</td><td style="text-align:left;">接收用于查询的dsl</td></tr><tr><td style="text-align:left;">Join</td><td style="text-align:left;">定义同一索引中文档的父子关心</td></tr><tr><td style="text-align:left;">Rank feature</td><td style="text-align:left;">记录数字特征以在查询时提高命中</td></tr><tr><td style="text-align:left;">Rank features</td><td style="text-align:left;">记录数字特征以在查询时提高命中</td></tr><tr><td style="text-align:left;">Dense vector</td><td style="text-align:left;">记录浮点值的密集向量</td></tr><tr><td style="text-align:left;">Sparse vector</td><td style="text-align:left;">记录浮点值的稀疏向量</td></tr><tr><td style="text-align:left;">Search-as-you-type</td><td style="text-align:left;">一个类似文本的字段, 针对查询进行了优化, 以实现自动完成</td></tr><tr><td style="text-align:left;">Alias</td><td style="text-align:left;">定义现有字段的别名</td></tr><tr><td style="text-align:left;">Flattened</td><td style="text-align:left;">允许将整个JSON对象作为单个字段进行索引</td></tr><tr><td style="text-align:left;">Shape</td><td style="text-align:left;"><code>shape</code> 用于任意笛卡尔几何</td></tr><tr><td style="text-align:left;">阵列类型</td><td style="text-align:left;">所有值, 必须为相同的数据类型</td></tr><tr><td style="text-align:left;">多领域类型</td><td style="text-align:left;">允许字段应用于不同目的, 不同的分词方式等</td></tr></tbody></table><h3 id="映射操作" tabindex="-1"><a class="header-anchor" href="#映射操作" aria-hidden="true">#</a> 映射操作</h3><p>可以看到给字段定义类型远比使用简单的自动转换功能要强大. 自定义映射允许你执行下面的操作:</p><ul><li>全文字符串域和精确值字符串域的区别</li><li>使用特定语言分析器</li><li>优化域以适应部分匹配</li><li>指定自定义数据格式</li><li>还有更多</li></ul><p>域最重要的属性是<code>type</code>, 对于不是 string 的域, 你一般只需要设置<code>type</code>.<br> 默认, <code>string</code>类型域会被认为包含全文。就是说, 它们的值在索引前, 会通过一个分析器. 针对于这个域的查询在搜索前也会经过一个分析器。</p><p>string 域映射的两个最重要属性是 index 和 analyzer</p><h4 id="index" tabindex="-1"><a class="header-anchor" href="#index" aria-hidden="true">#</a> index</h4><p>这个字段值为: true和false. 当为false时, 表示该字段会被存储, 但是不会被索引和查找.</p><h4 id="analyzer" tabindex="-1"><a class="header-anchor" href="#analyzer" aria-hidden="true">#</a> analyzer</h4><p>被分解的字符串字段是通过一个分词器将字符串转换拿为一连串的标记或者词条. 例如: <code>&quot;The quick Brown Foxes.&quot;</code>通过某种分词器可以被分解为<code>quick, brown, fox</code>三部分. 这些是真正用于构建索引这个字段的词语.</p><p>上述的分析过程不仅在索引时有效, 在查询时同样会发挥作用. 查询的字符串同样经过相同的分词器, 以使其查询中的词语和在索引中的词语为相同格式.</p><p>es查找分词器的过程如下(有些东西不翻译比较好, 英语渣, 翻译之后觉得容易误导又删了):</p><ol><li>在索引时 <ul><li>The analyzer defined in the field mapping.</li><li>An analyzer named default in the index settings.</li><li>The standard analyzer</li></ul></li><li>在查询时 <ul><li>The analyzer defined in a full-text query.</li><li>The search_analyzer defined in the field mapping.</li><li>The analyzer defined in the field mapping.</li><li>An analyzer named default_search in the index settings.</li><li>An analyzer named default in the index settings.</li><li>The standard analyzer.</li></ul></li></ol><h5 id="创建分词器" tabindex="-1"><a class="header-anchor" href="#创建分词器" aria-hidden="true">#</a> 创建分词器</h5><p>创建分词器最简单的方法是: 在映射中针对特定字段进行设置, 操作见下</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>PUT /ana_index
<span class="token punctuation">{</span>
  <span class="token property">&quot;mappings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;text&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;fields&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;english&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span>     <span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;analyzer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;english&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://tech.nikolazhang.top/2020-02-03-14-42-25.png" alt="2020-02-03-14-42-25"></p><p>简单解释一下: <code>text</code>字段使用默认的分词器<code>standard</code>. <code>text.english</code>使用<code>english</code>分词器, 这种分词器会删除结束词并提取词干.</p><h5 id="使用分词器" tabindex="-1"><a class="header-anchor" href="#使用分词器" aria-hidden="true">#</a> 使用分词器</h5><p>通过一下方式我们可以使用上面的分词器:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>
GET ana_index/_analyze
<span class="token punctuation">{</span>
  <span class="token property">&quot;field&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;text&quot;</span><span class="token operator">:</span> <span class="token string">&quot;The quick Brown Foxes.&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://tech.nikolazhang.top/2020-02-03-14-57-29.png" alt="2020-02-03-14-57-29"></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET ana_index/_analyze
<span class="token punctuation">{</span>
  <span class="token property">&quot;field&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text.english&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;text&quot;</span><span class="token operator">:</span> <span class="token string">&quot;The quick Brown Foxes.&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://tech.nikolazhang.top/2020-02-03-14-58-07.png" alt="2020-02-03-14-58-07"></p><p>你可以对比一下两种分词方式的不同, 但这不是重点. 之后有机会我们再继续研究不同的分词器.</p><h3 id="映射基本操作" tabindex="-1"><a class="header-anchor" href="#映射基本操作" aria-hidden="true">#</a> 映射基本操作</h3><p>那么如何操作我们自己的映射呢.</p><h4 id="创建" tabindex="-1"><a class="header-anchor" href="#创建" aria-hidden="true">#</a> 创建</h4><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>PUT /my-index
<span class="token punctuation">{</span>
  <span class="token property">&quot;mappings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;age&quot;</span><span class="token operator">:</span>    <span class="token punctuation">{</span> <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;integer&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  
      <span class="token property">&quot;email&quot;</span><span class="token operator">:</span>  <span class="token punctuation">{</span> <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span>   <span class="token punctuation">{</span> <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span>  <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://tech.nikolazhang.top/2020-02-03-13-24-43.png" alt="2020-02-03-13-24-43"></p><h3 id="修改" tabindex="-1"><a class="header-anchor" href="#修改" aria-hidden="true">#</a> 修改</h3><p>向存在的映射中添加一个字段:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>PUT /my-index/_mapping
<span class="token punctuation">{</span>
  <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;employee-id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;keyword&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://tech.nikolazhang.top/2020-02-03-13-25-10.png" alt="2020-02-03-13-25-10"></p><p>我们可以使用上面的方式更改一个已经存在的字段吗? 答案是不能, 因为可能会导致已经建立索引的值无效. <code>Except for supported mapping parameters, you can’t change the mapping or field type of an existing field. Changing an existing field could invalidate data that’s already indexed.</code></p><p>如果你非要更改已经存在的字段, 官方文档上给出的方法是, 重建一个索引, 并建立最新的映射, 之后将数据重新导入. 注意: 如果你只是想给之前的字段换个名字, 可以使用<code>alias</code>字段作为别名. 再说一遍, 直接更改原有字段会导致数据索引失效.</p><h3 id="查看" tabindex="-1"><a class="header-anchor" href="#查看" aria-hidden="true">#</a> 查看</h3><ol><li>查看某个索引的映射</li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /my-index/_mapping
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://tech.nikolazhang.top/2020-02-03-11-46-28.png" alt="2020-02-03-11-46-28"><br> 2. 查看映射的某个字段</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /my-index/_mapping/field/name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://tech.nikolazhang.top/2020-02-03-11-45-58.png" alt="2020-02-03-11-45-58"></p>`,71);function g(k,v){const e=o("ExternalLinkIcon");return l(),p("div",null,[d,t("p",null,[n("下面的操作基本上是按照"),t("a",c,[n("官网"),a(e)]),n("和"),t("a",u,[n("权威指南"),a(e)]),n("上搞的. 你可以点击连接跳转查看. 但是需要注意权威指南的版本已经有些旧了. 主要还是按照官网英文7.5版本介绍(虽然英语不是很好, 勉强能够理解)")]),h])}const y=s(r,[["render",g],["__file","elasticsearch系列_3_入门-插入.html.vue"]]);export{y as default};
