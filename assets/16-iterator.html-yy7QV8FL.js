import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as r,e as a}from"./app-Nx8RZYD4.js";const o={},i=a('<blockquote><p>迭代器模式，为集合中的有序访问提供了一致的方法，它让对象可以遍历另一个对象的数据集。这种模式可以帮助我们遍历数组、集合和哈希表等。</p></blockquote><p><img src="https://raw.githubusercontent.com/NikolaZhang/image-blog/main/16-iterator/20240124214353.png" alt="20240124214353"></p><p>迭代器模式的主要角色如下：</p><ol><li><p>容器对象（ConcreteIterator）：<br> 容器对象提供遍历数据集的接口，它实现了迭代器接口的next()方法。这个方法会返回数据集的下一个元素，直到遍历结束。</p></li><li><p>迭代器接口（Iterator）：<br> 一个接口，定义了迭代器必须支持的的方法，如next()和hasNext()。</p></li></ol><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h2><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h3>',6),c=[i];function n(l,s){return t(),r("div",null,c)}const p=e(o,[["render",n],["__file","16-iterator.html.vue"]]);export{p as default};
