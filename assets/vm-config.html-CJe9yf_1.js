import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as r,c,a,d as n,b as s,e as i}from"./app-Nx8RZYD4.js";const t={},p=a("blockquote",null,[a("p",null,"平时开发总是离不开各种环境, 甚至在公司摸鱼学习有一个自己的环境, 回到家也有一套环境. 一个新的环境就要重新配置, 总是在解决相同的问题, 实在是索然无味. 如果你也有和我一样的痛点那么这篇文章可能会比较适合你.")],-1),d=a("h2",{id:"思路",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#思路","aria-hidden":"true"},"#"),n(" 思路")],-1),k={href:"https://gitee.com/NikolaZhang/vm-config",target:"_blank",rel:"noopener noreferrer"},u=a("h2",{id:"准备",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#准备","aria-hidden":"true"},"#"),n(" 准备")],-1),v=i(`<li><p>拉取该仓库的配置到本地</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://gitee.com/NikolaZhang/vm-config.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>安装docker</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 使用ubuntu</span>
<span class="token function">apt</span> <span class="token function">install</span> docker.io
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li>`,2),h=i(`<p>拉取docker镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull xxxxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你可能需要如下镜像:</p>`,3),b={href:"http://registry.cn-shanghai.aliyuncs.com/nikola-docker/efak-nikola:1.0",target:"_blank",rel:"noopener noreferrer"},m={href:"http://registry.cn-shanghai.aliyuncs.com/nikola-docker/kafka-nikola",target:"_blank",rel:"noopener noreferrer"},f={href:"http://registry.cn-shanghai.aliyuncs.com/nikola-docker/zookeeper-nikola",target:"_blank",rel:"noopener noreferrer"},g=a("li",null,"redis",-1),_=a("li",null,"mysql",-1),x=i(`<li><p>创建网络环境<br> 为了隔离各个环境之前ip的差别, 最好使用自定义的名称进行隔离.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network create nikola-net
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过nikola-net这个桥接网络, 容器可以通过各自的网络别名进行访问.<br> 运行容器时设置<code>--network nikola-net --network-alias=容器网络别名</code>即可</p></li><li><p>编辑环境配置<br> 我们的环境配置有以下几种：</p><ul><li>环境变量文件：在vm-config根目录下的env_xxx这样的文件名</li><li>docker容器挂载的配置文件，配置文件目录需要在环境变量中配置</li></ul><p>注意环境中的配置参数,编辑后不是直接生效的, 需要执行<code>source xxx</code>才可以.<br> 你需要什么环境的配置，直接source对应的文件即可</p></li>`,2),y=i(`<h2 id="zookeeper部署" tabindex="-1"><a class="header-anchor" href="#zookeeper部署" aria-hidden="true">#</a> zookeeper部署</h2><p><code>vm-config/docker/zookeeper</code>目录下,<code>zookeeper.sh</code>为启动zookeeper容器的脚本. 直接执行即可.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./zookeeper-1.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用<code>docker ps</code>发现容器状态为<code>Up</code>, ok</p><h2 id="kafka-部署" tabindex="-1"><a class="header-anchor" href="#kafka-部署" aria-hidden="true">#</a> kafka 部署</h2><p>kafka的启动脚本在<code>vm-config/docker/kafka/</code>目录下.<br> 注意执行之前需要配置环境信息</p><ol><li><p>使用<code>source 你的配置文件</code>, 使配置生效.</p></li><li><p>执行下面的脚本就可以启动kafka了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./kafka-env.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="mysql部署" tabindex="-1"><a class="header-anchor" href="#mysql部署" aria-hidden="true">#</a> mysql部署</h2><p>执行下面的命令即可启动mysql</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./mysql-1.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="efak-部署" tabindex="-1"><a class="header-anchor" href="#efak-部署" aria-hidden="true">#</a> efak 部署</h2><p>efak用于kafka的监控.它的启动需要依赖zookeeper,kafka,mysql<br> 请检查容器状态, 确保以上环境启动正确.</p><ol><li>配置环境信息, 并使用source使配置生效<br><code>vm-config</code>目录中的你的配置文件中需要配置: <ul><li><code>EFAK_LOG_FILE</code>: 为efak日志文件的全路径</li><li><code>EFAK_CONF_FILE</code>: 为2中你的配置文件的全路径</li></ul></li><li>执行<code>./efak.sh</code>即可启动efak</li><li>到你的浏览器中输入: 你的ip:8048即可<br> 初始账号:admin 密码:123456</li></ol><h3 id="efak-docker镜像的构建" tabindex="-1"><a class="header-anchor" href="#efak-docker镜像的构建" aria-hidden="true">#</a> efak docker镜像的构建</h3><p>efak的镜像是通过程序包进行构建的, 以下为构建过程</p>`,15),q={href:"http://download.kafka-eagle.org/",target:"_blank",rel:"noopener noreferrer"},E=i(`<li><p>编辑dockerfile</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>FROM  java:8
COPY efak-web-2.0.8 /home/efak
ENV <span class="token assign-left variable">KE_HOME</span><span class="token operator">=</span>/home/efak
EXPOSE <span class="token number">8048</span>
RUN <span class="token function">chmod</span> <span class="token number">777</span> /home/efak/*
CMD <span class="token punctuation">[</span><span class="token string">&quot;bash&quot;</span>,<span class="token string">&quot;-c&quot;</span>,<span class="token string">&quot;/home/efak/bin/ke.sh start &amp;&amp; tail -f /dev/null&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行<code>docker build -t efak-nikola .</code>完成镜像构建.</p></li>`,2),w={href:"http://registry.cn-shanghai.aliyuncs.com/nikola-docker/efak-nikola:%5Bversion%5D",target:"_blank",rel:"noopener noreferrer"},N={href:"http://registry.cn-shanghai.aliyuncs.com/nikola-docker/efak-nikola:%5Bversion%5D",target:"_blank",rel:"noopener noreferrer"},F=i(`<p>p.s.: 4,5两步用于完成阿里云容器镜像推送</p><h2 id="redis部署" tabindex="-1"><a class="header-anchor" href="#redis部署" aria-hidden="true">#</a> redis部署</h2><p>执行如下命令:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./redis-1.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="外部访问" tabindex="-1"><a class="header-anchor" href="#外部访问" aria-hidden="true">#</a> 外部访问</h2><p>当使用外部程序访问容器时, 比如kafka会出现kafka-1无法解析的问题, 需要在你的hosts文件中添加</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>虚拟机ip kafka-1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="部署脚本" tabindex="-1"><a class="header-anchor" href="#部署脚本" aria-hidden="true">#</a> 部署脚本</h2><p>以efak的部署脚本为例:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;x<span class="token variable">$EFAK_LOG_FILE</span>&quot;</span> <span class="token operator">=</span> <span class="token string">&quot;x&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token builtin class-name">echo</span> please run <span class="token builtin class-name">source</span> env_xxx to init environment<span class="token operator">!</span>
  <span class="token builtin class-name">exit</span> <span class="token number">1</span>
<span class="token keyword">fi</span>
<span class="token assign-left variable">containerName</span><span class="token operator">=</span>efak-web
<span class="token assign-left variable">shellPath</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> $0<span class="token variable">)</span></span>
<span class="token variable">$shellPath</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/common/docker_container_remove.sh <span class="token variable">$containerName</span>

<span class="token builtin class-name">echo</span> start efak-nikola <span class="token operator">&gt;</span> <span class="token variable">$EFAK_LOG_FILE</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8048</span>:8048 <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\\</span>
    <span class="token parameter variable">--name</span> <span class="token variable">$containerName</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">--network</span> nikola-net <span class="token punctuation">\\</span>
    --network-alias efak-1 <span class="token punctuation">\\</span>
    <span class="token parameter variable">-v</span> <span class="token variable">$EFAK_LOG_FILE</span>:/home/efak/logs/log.log <span class="token punctuation">\\</span>
    <span class="token parameter variable">-v</span> <span class="token variable">$EFAK_CONF_FILE</span>:/home/efak/conf/system-config.properties <span class="token punctuation">\\</span>
    registry.cn-shanghai.aliyuncs.com/nikola-docker/efak-nikola:1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>EFAK_LOG_FILE</code>: 为日志文件路径, 该文件会挂载到容器中作为日志输出, 该配置需要在你的变量配置文件中设置, 并且使用source命令使其生效.<br> 脚本第一步是去检测该配置是否存在, 如果不存在表示没有执行过source命令.</p><p><code>docker_container_remove.sh</code>: 是容器移除的脚本. 该脚本会检测容器是否正在运行, 如果运行中则将其停止. 之后再将其删除, 以便下次重新创建.<br> 脚本具体内容见下:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">containerName</span><span class="token operator">=</span><span class="token variable">$1</span>
<span class="token comment"># 判断容器是否存在</span>
<span class="token assign-left variable">containerExist</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token operator">|</span> <span class="token function">grep</span> $containerName<span class="token variable">\`</span></span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;<span class="token variable">$containerExist</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token comment"># 容器是否为运行状态</span>
    <span class="token builtin class-name">echo</span> 容器正在运行
    <span class="token assign-left variable">containerStatus</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">docker</span> container inspect $containerName <span class="token parameter variable">--format</span><span class="token operator">=</span><span class="token string">&quot;{{.State.Running}}&quot;</span><span class="token variable">\`</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$containerStatus</span>&quot;</span> <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token function">docker</span> stop <span class="token variable">$containerName</span>
        <span class="token builtin class-name">echo</span> 停止容器
    <span class="token keyword">fi</span>
    <span class="token builtin class-name">echo</span> 删除容器
    <span class="token function">docker</span> <span class="token function">rm</span> <span class="token variable">$containerName</span>
<span class="token keyword">fi</span>
<span class="token builtin class-name">echo</span> 创建容器<span class="token punctuation">..</span><span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后面的是efak docker容器的创建命令, 大致内容如下:</p><ol><li>容器在后台运行</li><li>映射主机端口8048</li><li>容器会自动重启</li><li>容器名称为<code>efak-web</code></li><li>使用<code>nikola-net</code>网络, 在该网络下使用efak-1可以访问容器</li><li>挂载日志和配置文件</li><li>指定镜像</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ol><li>首先source你的环境变量(如果需要的话)</li><li>修改容器配置文件(如果需要的话)</li><li>创建网络 docker network create nikola-net</li><li>执行容器启动脚本</li><li>外部环境配置hosts</li></ol><p>像zookeeper mysql redis kafka 你只要执行第3,4步即可,<br> efak你需要执行第1,3,4步(如果需要改配置第2步也不可少)</p>`,18);function $(L,z){const e=o("ExternalLinkIcon");return r(),c("div",null,[p,d,a("p",null,[n("使用docker进行环境和服务的部署. 本文章的解决方案已经开源到"),a("a",k,[n("gitee"),s(e)])]),u,a("ol",null,[v,a("li",null,[h,a("ul",null,[a("li",null,[n("efak: "),a("a",b,[n("registry.cn-shanghai.aliyuncs.com/nikola-docker/efak-nikola:1.0"),s(e)])]),a("li",null,[n("kafka: "),a("a",m,[n("registry.cn-shanghai.aliyuncs.com/nikola-docker/kafka-nikola"),s(e)])]),a("li",null,[n("zookeeper "),a("a",f,[n("registry.cn-shanghai.aliyuncs.com/nikola-docker/zookeeper-nikola"),s(e)])]),g,_])]),x]),y,a("ol",null,[a("li",null,[a("p",null,[n("从"),a("a",q,[n("efak官网"),s(e)]),n("下载efak程序包, 解压")])]),E,a("li",null,[a("p",null,[n("docker tag efak-nikola "),a("a",w,[n("registry.cn-shanghai.aliyuncs.com/nikola-docker/efak-nikola:[version]"),s(e)])])]),a("li",null,[a("p",null,[n("docker push "),a("a",N,[n("registry.cn-shanghai.aliyuncs.com/nikola-docker/efak-nikola:[version]"),s(e)])])])]),F])}const K=l(t,[["render",$],["__file","vm-config.html.vue"]]);export{K as default};
