import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as o,e as r}from"./app-LDsfaBLG.js";const c="/assets/2020-04-03-00-01-50-ntsrCXys.png",t="/assets/2020-04-03-00-05-22-bNIRxP2u.png",a="/assets/2020-04-03-00-07-49-4Biyb9V6.png",d="/assets/2020-04-03-00-10-29-hnZbxip_.png",n="/assets/2020-04-03-00-10-49-d7sG2HE9.png",i="/assets/2020-04-03-00-19-04-2QaWia6Z.png",p="/assets/2020-04-03-00-26-45-OtXsYKSt.png",h="/assets/2020-04-03-00-28-46-_zPCzGof.png",m="/assets/2020-04-03-00-32-27-Trl0NCc_.png",b="/assets/2020-04-03-00-47-57-zPCLDXHh.png",_="/assets/2020-04-03-00-49-15-ugsinujO.png",l="/assets/2020-04-03-00-53-52-HKQ0VbMp.png",g="/assets/2020-04-03-00-55-39-gmJyBBoH.png",k={},u=r('<blockquote><p>谈一谈jenkins部署的一些方法, 顺便把这几天踩的的坑简单的整理一下.</p></blockquote><h2 id="如何通过提交信息构建" tabindex="-1"><a class="header-anchor" href="#如何通过提交信息构建" aria-hidden="true">#</a> 如何通过提交信息构建</h2><p>通过webhook, 当提交代码到远程仓库后, 可以直接触发jenkins构建流程.</p><h3 id="gitee的webhook" tabindex="-1"><a class="header-anchor" href="#gitee的webhook" aria-hidden="true">#</a> gitee的webhook</h3><p>在仓库中的setting中我们可以找到webhook选项<br><img src="'+c+'" alt="2020-04-03-00-01-50"></p><p>点击add.<br> url中需要填入jenkins路径<br><code>http://&lt;username&gt;:&lt;password&gt;@&lt;JENKINS_URL&gt;/generic-webhook-trigger/invoke</code><br> 其中username和password为可以登录jenkins的用户账号密码.<br> JENKINS_URL为jenkins的访问路径. 当然你可以使用ip+端口的方式<br> 上面的这个路径可以在jenkins项目配置中找到:<br><img src="'+t+'" alt="2020-04-03-00-05-22"><br> 当你选择通过webhook触发构建的时候就可以找到这个路径.<br> 之后根据需要选择触发的事件类型:<br><img src="'+a+'" alt="2020-04-03-00-07-49"></p><p>之后我们可以通过<code>Test</code>测试是否连接成功. 成功之后就可以进行jenkins端项目构建条件的配置.<br> 以syscore模块的编译为例:<br> 如下图所示我设置了两个变量一个是<code>repository</code>一个是<code>commits</code>, 这两个变量的值是通过<code>JSONPath</code>表达式从webhook请求体中获取构建的仓库以及提交信息中含有<code>build syscore</code>的数量. 之后通过<code>Optional filter</code>将这两个变量<code>$repository_$commits</code>, 进行正则匹配<code>^communicate_\\[[1-9][0-9]*\\]$</code>如果为<code>communicate</code>仓库且<code>build syscore</code>的数量大于0则触发构建.<br><img src="'+d+'" alt="2020-04-03-00-10-29"><br><img src="'+n+'" alt="2020-04-03-00-10-49"></p><p>所以针对不同类型的提交请求体可能是不同的, 因此需要根据实际情况进行配置.<br> 之前我们在gitee仓库中对jenkins连接进行了测试, 我们可以在测试的请求信息中看到webhook请求体的详细情况.<br><img src="'+i+'" alt="2020-04-03-00-19-04"></p><h2 id="构建之后" tabindex="-1"><a class="header-anchor" href="#构建之后" aria-hidden="true">#</a> 构建之后</h2><p>项目构建之后我们就需要将其发布.</p><p>注意构建成功之后项目的文件是放在jenkins的workspace目录下的. 这个目录默认位置为<code>/var/lib/jenkins/workspace</code>,<br> 你可以在这个目录下找到构建成功的文件.</p><p>如果项目部署的位置和jenkins在同一台服务器上, 直接通过拷贝到对应的目录下就可以了. 否则就需要使用ssh进行文件传输. 你可以使用<code>scp</code>或者借助<code>Publish Over SSH</code>插件.</p><p>下面介绍一下这个插件如何使用.</p><p>安装插件之后你应该能看到下图中的红框内容:<br><img src="'+p+'" alt="2020-04-03-00-26-45"></p><p><img src="'+h+'" alt="2020-04-03-00-28-46"><br> 首要你要选中一个你提前配置好的ssh server. 这个配置是在<code>Manage Jenkins</code>的<code>Config SYSTEM</code>中.<br> 之后我们要配置传输的文件的路径, 注意这个路径是相对于当前构建模块来说的.<br> 我使用的syscore模块的路径为<code>/var/lib/jenkins/workspace/commuicate/syscore/</code>, 注意这个路径末尾的syscore就是指的是这个构建模块的名字. 因此配置路径直接从这个路径下开始配置即可.<br><code>Remove prefix</code>用来在远程创建文件时移除路径前缀.<br><code>Remote directory</code> 这个路径的配置是相对于ssh server中的全局路径来说的.<br> 你可以看下一节ssh server的介绍.<br><code>Exec command</code> 这个就是你想要在远程服务器运行的命令. 一般我们用它来运行启动脚本. 不过你要提前在远程服务器添加启动脚本. 当然你可以尝试在此处编写启动脚本.</p><h3 id="配置ssh-server" tabindex="-1"><a class="header-anchor" href="#配置ssh-server" aria-hidden="true">#</a> 配置ssh server</h3><p>找到<code>Publish over SSH</code>模块, 仿照下图进行配置:<br><img src="'+m+'" alt="2020-04-03-00-32-27"></p><p><code>Passphrase</code>及ssh的密码, <code>Path to key</code>是你的私钥的路径. <code>Key</code>中的内容直接复制私钥中的信息粘贴即可.</p><p><code>SSH Servers</code>的配置中hostname是远程服务器的地址, <code>username</code>是访问远程服务器的账号, <code>Remote Directory</code>是一个默认的全局路径.</p><h2 id="前端构建和后端构建" tabindex="-1"><a class="header-anchor" href="#前端构建和后端构建" aria-hidden="true">#</a> 前端构建和后端构建</h2><p>前端构建和后端构建是不同的.</p><p>后端的构建我们创建item的时候使用的是<code>maven project</code>因此借助maven插件我们可以通过配置如下信息构建maven项目.<br><img src="'+b+'" alt="2020-04-03-00-47-57"><br> 前端的构建也很简单, 可以直接添加一个构建脚本即可.<br><img src="'+_+'" alt="2020-04-03-00-49-15"></p><h2 id="构建工作流" tabindex="-1"><a class="header-anchor" href="#构建工作流" aria-hidden="true">#</a> 构建工作流</h2><p>在一些情况下我们的构建是有先后顺序的, 比如我们修改了一个公共模块, 因此要优先构建该模块, 之后再构建其他模块. 这个可以通过设置构建触发器进行控制(webhook也是构建触发器的一种)</p><p><img src="'+l+'" alt="2020-04-03-00-53-52"></p><p><code>Build after other projects are built</code> 中的<code>Projects to watch</code>中配置的就是优先构建的模块, 当这个<code>common</code>模块构建成功之后会触发当前模块的构建.</p><p>配置之后, 你可以在<code>common</code>模块的页面中看到<code>Downstream Projects</code>信息<br><img src="'+g+'" alt="2020-04-03-00-55-39"></p><h2 id="end" tabindex="-1"><a class="header-anchor" href="#end" aria-hidden="true">#</a> end</h2>',28),f=[u];function j(v,w){return s(),o("div",null,f)}const S=e(k,[["render",j],["__file","jenkins部署相关.html.vue"]]);export{S as default};
